// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pipe.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "pipe.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace turi {
namespace visualization {
namespace pipe {
class VegaSpecDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<VegaSpec> {
} _VegaSpec_default_instance_;
class VegaDataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<VegaData> {
} _VegaData_default_instance_;
class ColumnDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Column> {
} _Column_default_instance_;
class TableSpecDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TableSpec> {
} _TableSpec_default_instance_;
class FlexVecDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<FlexVec> {
} _FlexVec_default_instance_;
class FlexListDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<FlexList> {
} _FlexList_default_instance_;
class FlexDatetimeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<FlexDatetime> {
} _FlexDatetime_default_instance_;
class FlexDict_DictEntryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<FlexDict::FlexDict_DictEntry> {
} _FlexDict_DictEntry_default_instance_;
class FlexDictDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<FlexDict> {
} _FlexDict_default_instance_;
class FlexUndefinedDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<FlexUndefined> {
} _FlexUndefined_default_instance_;
class FlexImageDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<FlexImage> {
} _FlexImage_default_instance_;
class FlexNDVectorDimensionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<FlexNDVectorDimension> {
} _FlexNDVectorDimension_default_instance_;
class FlexNDVectorDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<FlexNDVector> {
  public:
  const ::turi::visualization::pipe::FlexNDVectorDimension* dimension_;
  const ::turi::visualization::pipe::FlexVec* values_;
} _FlexNDVector_default_instance_;
class FlexibleTypeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<FlexibleType> {
  public:
  ::google::protobuf::int64 integer_;
  float float__;
  ::google::protobuf::internal::ArenaStringPtr string_;
  const ::turi::visualization::pipe::FlexVec* vector_;
  const ::turi::visualization::pipe::FlexList* list_;
  const ::turi::visualization::pipe::FlexDict* dict_;
  const ::turi::visualization::pipe::FlexDatetime* datetime_;
  const ::turi::visualization::pipe::FlexUndefined* undefined_;
  const ::turi::visualization::pipe::FlexImage* image_;
  const ::turi::visualization::pipe::FlexNDVector* nd_vector_;
} _FlexibleType_default_instance_;
class TableRowDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TableRow> {
} _TableRow_default_instance_;
class TableDataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TableData> {
} _TableData_default_instance_;

namespace protobuf_pipe_2eproto {

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};


void TableStruct::Shutdown() {
  _VegaSpec_default_instance_.Shutdown();
  _VegaData_default_instance_.Shutdown();
  _Column_default_instance_.Shutdown();
  _TableSpec_default_instance_.Shutdown();
  _FlexVec_default_instance_.Shutdown();
  _FlexList_default_instance_.Shutdown();
  _FlexDatetime_default_instance_.Shutdown();
  _FlexDict_default_instance_.Shutdown();
  _FlexUndefined_default_instance_.Shutdown();
  _FlexImage_default_instance_.Shutdown();
  _FlexNDVectorDimension_default_instance_.Shutdown();
  _FlexNDVector_default_instance_.Shutdown();
  _FlexibleType_default_instance_.Shutdown();
  _TableRow_default_instance_.Shutdown();
  _TableData_default_instance_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _VegaSpec_default_instance_.DefaultConstruct();
  _VegaData_default_instance_.DefaultConstruct();
  _Column_default_instance_.DefaultConstruct();
  _TableSpec_default_instance_.DefaultConstruct();
  _FlexVec_default_instance_.DefaultConstruct();
  _FlexList_default_instance_.DefaultConstruct();
  _FlexDatetime_default_instance_.DefaultConstruct();
  _FlexDict_DictEntry_default_instance_.DefaultConstruct();
  _FlexDict_default_instance_.DefaultConstruct();
  _FlexUndefined_default_instance_.DefaultConstruct();
  _FlexImage_default_instance_.DefaultConstruct();
  _FlexNDVectorDimension_default_instance_.DefaultConstruct();
  _FlexNDVector_default_instance_.DefaultConstruct();
  _FlexibleType_default_instance_.DefaultConstruct();
  _TableRow_default_instance_.DefaultConstruct();
  _TableData_default_instance_.DefaultConstruct();
  _FlexDict_DictEntry_default_instance_.get_mutable()->set_default_instance(_FlexDict_DictEntry_default_instance_.get_mutable());
  _FlexDict_DictEntry_default_instance_.get_mutable()->InitAsDefaultInstance();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER

}  // namespace protobuf_pipe_2eproto

bool Column_ColumnType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Column_ColumnType Column::INTEGER;
const Column_ColumnType Column::FLOAT;
const Column_ColumnType Column::STRING;
const Column_ColumnType Column::VECTOR;
const Column_ColumnType Column::LIST;
const Column_ColumnType Column::DICT;
const Column_ColumnType Column::DATETIME;
const Column_ColumnType Column::UNDEFINED;
const Column_ColumnType Column::IMAGE;
const Column_ColumnType Column::ND_VECTOR;
const Column_ColumnType Column::ColumnType_MIN;
const Column_ColumnType Column::ColumnType_MAX;
const int Column::ColumnType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool FlexImage_Format_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const FlexImage_Format FlexImage::JPG;
const FlexImage_Format FlexImage::PNG;
const FlexImage_Format FlexImage::RAW_ARRAY;
const FlexImage_Format FlexImage::UNDEFINED;
const FlexImage_Format FlexImage::Format_MIN;
const FlexImage_Format FlexImage::Format_MAX;
const int FlexImage::Format_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VegaSpec::kSpecFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VegaSpec::VegaSpec()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_pipe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:turi.visualization.pipe.VegaSpec)
}
VegaSpec::VegaSpec(const VegaSpec& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  spec_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.spec().size() > 0) {
    spec_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.spec_);
  }
  // @@protoc_insertion_point(copy_constructor:turi.visualization.pipe.VegaSpec)
}

void VegaSpec::SharedCtor() {
  spec_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

VegaSpec::~VegaSpec() {
  // @@protoc_insertion_point(destructor:turi.visualization.pipe.VegaSpec)
  SharedDtor();
}

void VegaSpec::SharedDtor() {
  spec_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void VegaSpec::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const VegaSpec& VegaSpec::default_instance() {
  protobuf_pipe_2eproto::InitDefaults();
  return *internal_default_instance();
}

VegaSpec* VegaSpec::New(::google::protobuf::Arena* arena) const {
  VegaSpec* n = new VegaSpec;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VegaSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:turi.visualization.pipe.VegaSpec)
  spec_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool VegaSpec::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:turi.visualization.pipe.VegaSpec)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string spec = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_spec()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->spec().data(), this->spec().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "turi.visualization.pipe.VegaSpec.spec"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:turi.visualization.pipe.VegaSpec)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:turi.visualization.pipe.VegaSpec)
  return false;
#undef DO_
}

void VegaSpec::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:turi.visualization.pipe.VegaSpec)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string spec = 1;
  if (this->spec().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->spec().data(), this->spec().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "turi.visualization.pipe.VegaSpec.spec");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->spec(), output);
  }

  // @@protoc_insertion_point(serialize_end:turi.visualization.pipe.VegaSpec)
}

size_t VegaSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:turi.visualization.pipe.VegaSpec)
  size_t total_size = 0;

  // string spec = 1;
  if (this->spec().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->spec());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VegaSpec::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const VegaSpec*>(&from));
}

void VegaSpec::MergeFrom(const VegaSpec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:turi.visualization.pipe.VegaSpec)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.spec().size() > 0) {

    spec_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.spec_);
  }
}

void VegaSpec::CopyFrom(const VegaSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:turi.visualization.pipe.VegaSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VegaSpec::IsInitialized() const {
  return true;
}

void VegaSpec::Swap(VegaSpec* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VegaSpec::InternalSwap(VegaSpec* other) {
  spec_.Swap(&other->spec_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string VegaSpec::GetTypeName() const {
  return "turi.visualization.pipe.VegaSpec";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VegaSpec

// string spec = 1;
void VegaSpec::clear_spec() {
  spec_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& VegaSpec::spec() const {
  // @@protoc_insertion_point(field_get:turi.visualization.pipe.VegaSpec.spec)
  return spec_.GetNoArena();
}
void VegaSpec::set_spec(const ::std::string& value) {
  
  spec_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:turi.visualization.pipe.VegaSpec.spec)
}
#if LANG_CXX11
void VegaSpec::set_spec(::std::string&& value) {
  
  spec_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:turi.visualization.pipe.VegaSpec.spec)
}
#endif
void VegaSpec::set_spec(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  spec_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:turi.visualization.pipe.VegaSpec.spec)
}
void VegaSpec::set_spec(const char* value, size_t size) {
  
  spec_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:turi.visualization.pipe.VegaSpec.spec)
}
::std::string* VegaSpec::mutable_spec() {
  
  // @@protoc_insertion_point(field_mutable:turi.visualization.pipe.VegaSpec.spec)
  return spec_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VegaSpec::release_spec() {
  // @@protoc_insertion_point(field_release:turi.visualization.pipe.VegaSpec.spec)
  
  return spec_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VegaSpec::set_allocated_spec(::std::string* spec) {
  if (spec != NULL) {
    
  } else {
    
  }
  spec_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), spec);
  // @@protoc_insertion_point(field_set_allocated:turi.visualization.pipe.VegaSpec.spec)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VegaData::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VegaData::VegaData()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_pipe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:turi.visualization.pipe.VegaData)
}
VegaData::VegaData(const VegaData& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  // @@protoc_insertion_point(copy_constructor:turi.visualization.pipe.VegaData)
}

void VegaData::SharedCtor() {
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

VegaData::~VegaData() {
  // @@protoc_insertion_point(destructor:turi.visualization.pipe.VegaData)
  SharedDtor();
}

void VegaData::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void VegaData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const VegaData& VegaData::default_instance() {
  protobuf_pipe_2eproto::InitDefaults();
  return *internal_default_instance();
}

VegaData* VegaData::New(::google::protobuf::Arena* arena) const {
  VegaData* n = new VegaData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VegaData::Clear() {
// @@protoc_insertion_point(message_clear_start:turi.visualization.pipe.VegaData)
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool VegaData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:turi.visualization.pipe.VegaData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->data().data(), this->data().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "turi.visualization.pipe.VegaData.data"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:turi.visualization.pipe.VegaData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:turi.visualization.pipe.VegaData)
  return false;
#undef DO_
}

void VegaData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:turi.visualization.pipe.VegaData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string data = 1;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "turi.visualization.pipe.VegaData.data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->data(), output);
  }

  // @@protoc_insertion_point(serialize_end:turi.visualization.pipe.VegaData)
}

size_t VegaData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:turi.visualization.pipe.VegaData)
  size_t total_size = 0;

  // string data = 1;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->data());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VegaData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const VegaData*>(&from));
}

void VegaData::MergeFrom(const VegaData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:turi.visualization.pipe.VegaData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
}

void VegaData::CopyFrom(const VegaData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:turi.visualization.pipe.VegaData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VegaData::IsInitialized() const {
  return true;
}

void VegaData::Swap(VegaData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VegaData::InternalSwap(VegaData* other) {
  data_.Swap(&other->data_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string VegaData::GetTypeName() const {
  return "turi.visualization.pipe.VegaData";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VegaData

// string data = 1;
void VegaData::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& VegaData::data() const {
  // @@protoc_insertion_point(field_get:turi.visualization.pipe.VegaData.data)
  return data_.GetNoArena();
}
void VegaData::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:turi.visualization.pipe.VegaData.data)
}
#if LANG_CXX11
void VegaData::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:turi.visualization.pipe.VegaData.data)
}
#endif
void VegaData::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:turi.visualization.pipe.VegaData.data)
}
void VegaData::set_data(const char* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:turi.visualization.pipe.VegaData.data)
}
::std::string* VegaData::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:turi.visualization.pipe.VegaData.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VegaData::release_data() {
  // @@protoc_insertion_point(field_release:turi.visualization.pipe.VegaData.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VegaData::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:turi.visualization.pipe.VegaData.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Column::kNameFieldNumber;
const int Column::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Column::Column()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_pipe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:turi.visualization.pipe.Column)
}
Column::Column(const Column& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:turi.visualization.pipe.Column)
}

void Column::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  _cached_size_ = 0;
}

Column::~Column() {
  // @@protoc_insertion_point(destructor:turi.visualization.pipe.Column)
  SharedDtor();
}

void Column::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Column::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Column& Column::default_instance() {
  protobuf_pipe_2eproto::InitDefaults();
  return *internal_default_instance();
}

Column* Column::New(::google::protobuf::Arena* arena) const {
  Column* n = new Column;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Column::Clear() {
// @@protoc_insertion_point(message_clear_start:turi.visualization.pipe.Column)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
}

bool Column::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:turi.visualization.pipe.Column)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "turi.visualization.pipe.Column.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .turi.visualization.pipe.Column.ColumnType type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::turi::visualization::pipe::Column_ColumnType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:turi.visualization.pipe.Column)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:turi.visualization.pipe.Column)
  return false;
#undef DO_
}

void Column::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:turi.visualization.pipe.Column)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "turi.visualization.pipe.Column.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // .turi.visualization.pipe.Column.ColumnType type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // @@protoc_insertion_point(serialize_end:turi.visualization.pipe.Column)
}

size_t Column::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:turi.visualization.pipe.Column)
  size_t total_size = 0;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .turi.visualization.pipe.Column.ColumnType type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Column::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Column*>(&from));
}

void Column::MergeFrom(const Column& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:turi.visualization.pipe.Column)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void Column::CopyFrom(const Column& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:turi.visualization.pipe.Column)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Column::IsInitialized() const {
  return true;
}

void Column::Swap(Column* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Column::InternalSwap(Column* other) {
  name_.Swap(&other->name_);
  std::swap(type_, other->type_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Column::GetTypeName() const {
  return "turi.visualization.pipe.Column";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Column

// string name = 1;
void Column::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Column::name() const {
  // @@protoc_insertion_point(field_get:turi.visualization.pipe.Column.name)
  return name_.GetNoArena();
}
void Column::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:turi.visualization.pipe.Column.name)
}
#if LANG_CXX11
void Column::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:turi.visualization.pipe.Column.name)
}
#endif
void Column::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:turi.visualization.pipe.Column.name)
}
void Column::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:turi.visualization.pipe.Column.name)
}
::std::string* Column::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:turi.visualization.pipe.Column.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Column::release_name() {
  // @@protoc_insertion_point(field_release:turi.visualization.pipe.Column.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Column::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:turi.visualization.pipe.Column.name)
}

// .turi.visualization.pipe.Column.ColumnType type = 2;
void Column::clear_type() {
  type_ = 0;
}
::turi::visualization::pipe::Column_ColumnType Column::type() const {
  // @@protoc_insertion_point(field_get:turi.visualization.pipe.Column.type)
  return static_cast< ::turi::visualization::pipe::Column_ColumnType >(type_);
}
void Column::set_type(::turi::visualization::pipe::Column_ColumnType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:turi.visualization.pipe.Column.type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TableSpec::kSizeFieldNumber;
const int TableSpec::kTitleFieldNumber;
const int TableSpec::kColumnsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TableSpec::TableSpec()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_pipe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:turi.visualization.pipe.TableSpec)
}
TableSpec::TableSpec(const TableSpec& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      columns_(from.columns_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.title().size() > 0) {
    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  size_ = from.size_;
  // @@protoc_insertion_point(copy_constructor:turi.visualization.pipe.TableSpec)
}

void TableSpec::SharedCtor() {
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  size_ = 0;
  _cached_size_ = 0;
}

TableSpec::~TableSpec() {
  // @@protoc_insertion_point(destructor:turi.visualization.pipe.TableSpec)
  SharedDtor();
}

void TableSpec::SharedDtor() {
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TableSpec::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TableSpec& TableSpec::default_instance() {
  protobuf_pipe_2eproto::InitDefaults();
  return *internal_default_instance();
}

TableSpec* TableSpec::New(::google::protobuf::Arena* arena) const {
  TableSpec* n = new TableSpec;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TableSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:turi.visualization.pipe.TableSpec)
  columns_.Clear();
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  size_ = 0;
}

bool TableSpec::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:turi.visualization.pipe.TableSpec)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 size = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string title = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "turi.visualization.pipe.TableSpec.title"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .turi.visualization.pipe.Column columns = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_columns()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:turi.visualization.pipe.TableSpec)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:turi.visualization.pipe.TableSpec)
  return false;
#undef DO_
}

void TableSpec::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:turi.visualization.pipe.TableSpec)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 size = 1;
  if (this->size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->size(), output);
  }

  // string title = 2;
  if (this->title().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "turi.visualization.pipe.TableSpec.title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->title(), output);
  }

  // repeated .turi.visualization.pipe.Column columns = 3;
  for (unsigned int i = 0, n = this->columns_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->columns(i), output);
  }

  // @@protoc_insertion_point(serialize_end:turi.visualization.pipe.TableSpec)
}

size_t TableSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:turi.visualization.pipe.TableSpec)
  size_t total_size = 0;

  // repeated .turi.visualization.pipe.Column columns = 3;
  {
    unsigned int count = this->columns_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->columns(i));
    }
  }

  // string title = 2;
  if (this->title().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->title());
  }

  // int32 size = 1;
  if (this->size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TableSpec::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TableSpec*>(&from));
}

void TableSpec::MergeFrom(const TableSpec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:turi.visualization.pipe.TableSpec)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  columns_.MergeFrom(from.columns_);
  if (from.title().size() > 0) {

    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  if (from.size() != 0) {
    set_size(from.size());
  }
}

void TableSpec::CopyFrom(const TableSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:turi.visualization.pipe.TableSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableSpec::IsInitialized() const {
  return true;
}

void TableSpec::Swap(TableSpec* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TableSpec::InternalSwap(TableSpec* other) {
  columns_.InternalSwap(&other->columns_);
  title_.Swap(&other->title_);
  std::swap(size_, other->size_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string TableSpec::GetTypeName() const {
  return "turi.visualization.pipe.TableSpec";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TableSpec

// int32 size = 1;
void TableSpec::clear_size() {
  size_ = 0;
}
::google::protobuf::int32 TableSpec::size() const {
  // @@protoc_insertion_point(field_get:turi.visualization.pipe.TableSpec.size)
  return size_;
}
void TableSpec::set_size(::google::protobuf::int32 value) {
  
  size_ = value;
  // @@protoc_insertion_point(field_set:turi.visualization.pipe.TableSpec.size)
}

// string title = 2;
void TableSpec::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TableSpec::title() const {
  // @@protoc_insertion_point(field_get:turi.visualization.pipe.TableSpec.title)
  return title_.GetNoArena();
}
void TableSpec::set_title(const ::std::string& value) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:turi.visualization.pipe.TableSpec.title)
}
#if LANG_CXX11
void TableSpec::set_title(::std::string&& value) {
  
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:turi.visualization.pipe.TableSpec.title)
}
#endif
void TableSpec::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:turi.visualization.pipe.TableSpec.title)
}
void TableSpec::set_title(const char* value, size_t size) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:turi.visualization.pipe.TableSpec.title)
}
::std::string* TableSpec::mutable_title() {
  
  // @@protoc_insertion_point(field_mutable:turi.visualization.pipe.TableSpec.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TableSpec::release_title() {
  // @@protoc_insertion_point(field_release:turi.visualization.pipe.TableSpec.title)
  
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TableSpec::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    
  } else {
    
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:turi.visualization.pipe.TableSpec.title)
}

// repeated .turi.visualization.pipe.Column columns = 3;
int TableSpec::columns_size() const {
  return columns_.size();
}
void TableSpec::clear_columns() {
  columns_.Clear();
}
const ::turi::visualization::pipe::Column& TableSpec::columns(int index) const {
  // @@protoc_insertion_point(field_get:turi.visualization.pipe.TableSpec.columns)
  return columns_.Get(index);
}
::turi::visualization::pipe::Column* TableSpec::mutable_columns(int index) {
  // @@protoc_insertion_point(field_mutable:turi.visualization.pipe.TableSpec.columns)
  return columns_.Mutable(index);
}
::turi::visualization::pipe::Column* TableSpec::add_columns() {
  // @@protoc_insertion_point(field_add:turi.visualization.pipe.TableSpec.columns)
  return columns_.Add();
}
::google::protobuf::RepeatedPtrField< ::turi::visualization::pipe::Column >*
TableSpec::mutable_columns() {
  // @@protoc_insertion_point(field_mutable_list:turi.visualization.pipe.TableSpec.columns)
  return &columns_;
}
const ::google::protobuf::RepeatedPtrField< ::turi::visualization::pipe::Column >&
TableSpec::columns() const {
  // @@protoc_insertion_point(field_list:turi.visualization.pipe.TableSpec.columns)
  return columns_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FlexVec::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FlexVec::FlexVec()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_pipe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:turi.visualization.pipe.FlexVec)
}
FlexVec::FlexVec(const FlexVec& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      value_(from.value_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:turi.visualization.pipe.FlexVec)
}

void FlexVec::SharedCtor() {
  _cached_size_ = 0;
}

FlexVec::~FlexVec() {
  // @@protoc_insertion_point(destructor:turi.visualization.pipe.FlexVec)
  SharedDtor();
}

void FlexVec::SharedDtor() {
}

void FlexVec::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FlexVec& FlexVec::default_instance() {
  protobuf_pipe_2eproto::InitDefaults();
  return *internal_default_instance();
}

FlexVec* FlexVec::New(::google::protobuf::Arena* arena) const {
  FlexVec* n = new FlexVec;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FlexVec::Clear() {
// @@protoc_insertion_point(message_clear_start:turi.visualization.pipe.FlexVec)
  value_.Clear();
}

bool FlexVec::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:turi.visualization.pipe.FlexVec)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float value = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_value())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(13u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 10u, input, this->mutable_value())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:turi.visualization.pipe.FlexVec)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:turi.visualization.pipe.FlexVec)
  return false;
#undef DO_
}

void FlexVec::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:turi.visualization.pipe.FlexVec)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float value = 1;
  if (this->value_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_value_cached_byte_size_);
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->value().data(), this->value_size(), output);
  }

  // @@protoc_insertion_point(serialize_end:turi.visualization.pipe.FlexVec)
}

size_t FlexVec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:turi.visualization.pipe.FlexVec)
  size_t total_size = 0;

  // repeated float value = 1;
  {
    unsigned int count = this->value_size();
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _value_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FlexVec::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FlexVec*>(&from));
}

void FlexVec::MergeFrom(const FlexVec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:turi.visualization.pipe.FlexVec)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  value_.MergeFrom(from.value_);
}

void FlexVec::CopyFrom(const FlexVec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:turi.visualization.pipe.FlexVec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlexVec::IsInitialized() const {
  return true;
}

void FlexVec::Swap(FlexVec* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FlexVec::InternalSwap(FlexVec* other) {
  value_.InternalSwap(&other->value_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string FlexVec::GetTypeName() const {
  return "turi.visualization.pipe.FlexVec";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FlexVec

// repeated float value = 1;
int FlexVec::value_size() const {
  return value_.size();
}
void FlexVec::clear_value() {
  value_.Clear();
}
float FlexVec::value(int index) const {
  // @@protoc_insertion_point(field_get:turi.visualization.pipe.FlexVec.value)
  return value_.Get(index);
}
void FlexVec::set_value(int index, float value) {
  value_.Set(index, value);
  // @@protoc_insertion_point(field_set:turi.visualization.pipe.FlexVec.value)
}
void FlexVec::add_value(float value) {
  value_.Add(value);
  // @@protoc_insertion_point(field_add:turi.visualization.pipe.FlexVec.value)
}
const ::google::protobuf::RepeatedField< float >&
FlexVec::value() const {
  // @@protoc_insertion_point(field_list:turi.visualization.pipe.FlexVec.value)
  return value_;
}
::google::protobuf::RepeatedField< float >*
FlexVec::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:turi.visualization.pipe.FlexVec.value)
  return &value_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FlexList::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FlexList::FlexList()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_pipe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:turi.visualization.pipe.FlexList)
}
FlexList::FlexList(const FlexList& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      value_(from.value_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:turi.visualization.pipe.FlexList)
}

void FlexList::SharedCtor() {
  _cached_size_ = 0;
}

FlexList::~FlexList() {
  // @@protoc_insertion_point(destructor:turi.visualization.pipe.FlexList)
  SharedDtor();
}

void FlexList::SharedDtor() {
}

void FlexList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FlexList& FlexList::default_instance() {
  protobuf_pipe_2eproto::InitDefaults();
  return *internal_default_instance();
}

FlexList* FlexList::New(::google::protobuf::Arena* arena) const {
  FlexList* n = new FlexList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FlexList::Clear() {
// @@protoc_insertion_point(message_clear_start:turi.visualization.pipe.FlexList)
  value_.Clear();
}

bool FlexList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:turi.visualization.pipe.FlexList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .turi.visualization.pipe.FlexibleType value = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:turi.visualization.pipe.FlexList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:turi.visualization.pipe.FlexList)
  return false;
#undef DO_
}

void FlexList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:turi.visualization.pipe.FlexList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .turi.visualization.pipe.FlexibleType value = 1;
  for (unsigned int i = 0, n = this->value_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->value(i), output);
  }

  // @@protoc_insertion_point(serialize_end:turi.visualization.pipe.FlexList)
}

size_t FlexList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:turi.visualization.pipe.FlexList)
  size_t total_size = 0;

  // repeated .turi.visualization.pipe.FlexibleType value = 1;
  {
    unsigned int count = this->value_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->value(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FlexList::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FlexList*>(&from));
}

void FlexList::MergeFrom(const FlexList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:turi.visualization.pipe.FlexList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  value_.MergeFrom(from.value_);
}

void FlexList::CopyFrom(const FlexList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:turi.visualization.pipe.FlexList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlexList::IsInitialized() const {
  return true;
}

void FlexList::Swap(FlexList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FlexList::InternalSwap(FlexList* other) {
  value_.InternalSwap(&other->value_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string FlexList::GetTypeName() const {
  return "turi.visualization.pipe.FlexList";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FlexList

// repeated .turi.visualization.pipe.FlexibleType value = 1;
int FlexList::value_size() const {
  return value_.size();
}
void FlexList::clear_value() {
  value_.Clear();
}
const ::turi::visualization::pipe::FlexibleType& FlexList::value(int index) const {
  // @@protoc_insertion_point(field_get:turi.visualization.pipe.FlexList.value)
  return value_.Get(index);
}
::turi::visualization::pipe::FlexibleType* FlexList::mutable_value(int index) {
  // @@protoc_insertion_point(field_mutable:turi.visualization.pipe.FlexList.value)
  return value_.Mutable(index);
}
::turi::visualization::pipe::FlexibleType* FlexList::add_value() {
  // @@protoc_insertion_point(field_add:turi.visualization.pipe.FlexList.value)
  return value_.Add();
}
::google::protobuf::RepeatedPtrField< ::turi::visualization::pipe::FlexibleType >*
FlexList::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:turi.visualization.pipe.FlexList.value)
  return &value_;
}
const ::google::protobuf::RepeatedPtrField< ::turi::visualization::pipe::FlexibleType >&
FlexList::value() const {
  // @@protoc_insertion_point(field_list:turi.visualization.pipe.FlexList.value)
  return value_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FlexDatetime::kPosixTimestampFieldNumber;
const int FlexDatetime::kTz15MinOffsetFieldNumber;
const int FlexDatetime::kMicrosecondFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FlexDatetime::FlexDatetime()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_pipe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:turi.visualization.pipe.FlexDatetime)
}
FlexDatetime::FlexDatetime(const FlexDatetime& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&posix_timestamp_, &from.posix_timestamp_,
    reinterpret_cast<char*>(&microsecond_) -
    reinterpret_cast<char*>(&posix_timestamp_) + sizeof(microsecond_));
  // @@protoc_insertion_point(copy_constructor:turi.visualization.pipe.FlexDatetime)
}

void FlexDatetime::SharedCtor() {
  ::memset(&posix_timestamp_, 0, reinterpret_cast<char*>(&microsecond_) -
    reinterpret_cast<char*>(&posix_timestamp_) + sizeof(microsecond_));
  _cached_size_ = 0;
}

FlexDatetime::~FlexDatetime() {
  // @@protoc_insertion_point(destructor:turi.visualization.pipe.FlexDatetime)
  SharedDtor();
}

void FlexDatetime::SharedDtor() {
}

void FlexDatetime::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FlexDatetime& FlexDatetime::default_instance() {
  protobuf_pipe_2eproto::InitDefaults();
  return *internal_default_instance();
}

FlexDatetime* FlexDatetime::New(::google::protobuf::Arena* arena) const {
  FlexDatetime* n = new FlexDatetime;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FlexDatetime::Clear() {
// @@protoc_insertion_point(message_clear_start:turi.visualization.pipe.FlexDatetime)
  ::memset(&posix_timestamp_, 0, reinterpret_cast<char*>(&microsecond_) -
    reinterpret_cast<char*>(&posix_timestamp_) + sizeof(microsecond_));
}

bool FlexDatetime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:turi.visualization.pipe.FlexDatetime)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 posix_timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &posix_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 tz_15min_offset = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tz_15min_offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 microsecond = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &microsecond_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:turi.visualization.pipe.FlexDatetime)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:turi.visualization.pipe.FlexDatetime)
  return false;
#undef DO_
}

void FlexDatetime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:turi.visualization.pipe.FlexDatetime)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 posix_timestamp = 1;
  if (this->posix_timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->posix_timestamp(), output);
  }

  // int32 tz_15min_offset = 2;
  if (this->tz_15min_offset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tz_15min_offset(), output);
  }

  // int32 microsecond = 3;
  if (this->microsecond() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->microsecond(), output);
  }

  // @@protoc_insertion_point(serialize_end:turi.visualization.pipe.FlexDatetime)
}

size_t FlexDatetime::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:turi.visualization.pipe.FlexDatetime)
  size_t total_size = 0;

  // uint64 posix_timestamp = 1;
  if (this->posix_timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->posix_timestamp());
  }

  // int32 tz_15min_offset = 2;
  if (this->tz_15min_offset() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->tz_15min_offset());
  }

  // int32 microsecond = 3;
  if (this->microsecond() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->microsecond());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FlexDatetime::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FlexDatetime*>(&from));
}

void FlexDatetime::MergeFrom(const FlexDatetime& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:turi.visualization.pipe.FlexDatetime)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.posix_timestamp() != 0) {
    set_posix_timestamp(from.posix_timestamp());
  }
  if (from.tz_15min_offset() != 0) {
    set_tz_15min_offset(from.tz_15min_offset());
  }
  if (from.microsecond() != 0) {
    set_microsecond(from.microsecond());
  }
}

void FlexDatetime::CopyFrom(const FlexDatetime& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:turi.visualization.pipe.FlexDatetime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlexDatetime::IsInitialized() const {
  return true;
}

void FlexDatetime::Swap(FlexDatetime* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FlexDatetime::InternalSwap(FlexDatetime* other) {
  std::swap(posix_timestamp_, other->posix_timestamp_);
  std::swap(tz_15min_offset_, other->tz_15min_offset_);
  std::swap(microsecond_, other->microsecond_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string FlexDatetime::GetTypeName() const {
  return "turi.visualization.pipe.FlexDatetime";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FlexDatetime

// uint64 posix_timestamp = 1;
void FlexDatetime::clear_posix_timestamp() {
  posix_timestamp_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 FlexDatetime::posix_timestamp() const {
  // @@protoc_insertion_point(field_get:turi.visualization.pipe.FlexDatetime.posix_timestamp)
  return posix_timestamp_;
}
void FlexDatetime::set_posix_timestamp(::google::protobuf::uint64 value) {
  
  posix_timestamp_ = value;
  // @@protoc_insertion_point(field_set:turi.visualization.pipe.FlexDatetime.posix_timestamp)
}

// int32 tz_15min_offset = 2;
void FlexDatetime::clear_tz_15min_offset() {
  tz_15min_offset_ = 0;
}
::google::protobuf::int32 FlexDatetime::tz_15min_offset() const {
  // @@protoc_insertion_point(field_get:turi.visualization.pipe.FlexDatetime.tz_15min_offset)
  return tz_15min_offset_;
}
void FlexDatetime::set_tz_15min_offset(::google::protobuf::int32 value) {
  
  tz_15min_offset_ = value;
  // @@protoc_insertion_point(field_set:turi.visualization.pipe.FlexDatetime.tz_15min_offset)
}

// int32 microsecond = 3;
void FlexDatetime::clear_microsecond() {
  microsecond_ = 0;
}
::google::protobuf::int32 FlexDatetime::microsecond() const {
  // @@protoc_insertion_point(field_get:turi.visualization.pipe.FlexDatetime.microsecond)
  return microsecond_;
}
void FlexDatetime::set_microsecond(::google::protobuf::int32 value) {
  
  microsecond_ = value;
  // @@protoc_insertion_point(field_set:turi.visualization.pipe.FlexDatetime.microsecond)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FlexDict::kDictFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FlexDict::FlexDict()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_pipe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:turi.visualization.pipe.FlexDict)
}
FlexDict::FlexDict(const FlexDict& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dict_.MergeFrom(from.dict_);
  // @@protoc_insertion_point(copy_constructor:turi.visualization.pipe.FlexDict)
}

void FlexDict::SharedCtor() {
  _cached_size_ = 0;
}

FlexDict::~FlexDict() {
  // @@protoc_insertion_point(destructor:turi.visualization.pipe.FlexDict)
  SharedDtor();
}

void FlexDict::SharedDtor() {
}

void FlexDict::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FlexDict& FlexDict::default_instance() {
  protobuf_pipe_2eproto::InitDefaults();
  return *internal_default_instance();
}

FlexDict* FlexDict::New(::google::protobuf::Arena* arena) const {
  FlexDict* n = new FlexDict;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FlexDict::Clear() {
// @@protoc_insertion_point(message_clear_start:turi.visualization.pipe.FlexDict)
  dict_.Clear();
}

bool FlexDict::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:turi.visualization.pipe.FlexDict)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<string, .turi.visualization.pipe.FlexibleType> dict = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          FlexDict_DictEntry::Parser< ::google::protobuf::internal::MapFieldLite<
              FlexDict_DictEntry,
              ::std::string, ::turi::visualization::pipe::FlexibleType,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::turi::visualization::pipe::FlexibleType > > parser(&dict_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "turi.visualization.pipe.FlexDict.DictEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:turi.visualization.pipe.FlexDict)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:turi.visualization.pipe.FlexDict)
  return false;
#undef DO_
}

void FlexDict::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:turi.visualization.pipe.FlexDict)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .turi.visualization.pipe.FlexibleType> dict = 6;
  if (!this->dict().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::turi::visualization::pipe::FlexibleType >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "turi.visualization.pipe.FlexDict.DictEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->dict().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->dict().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::turi::visualization::pipe::FlexibleType >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::turi::visualization::pipe::FlexibleType >::const_iterator
          it = this->dict().begin();
          it != this->dict().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<FlexDict_DictEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(dict_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            6, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<FlexDict_DictEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::turi::visualization::pipe::FlexibleType >::const_iterator
          it = this->dict().begin();
          it != this->dict().end(); ++it) {
        entry.reset(dict_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            6, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_end:turi.visualization.pipe.FlexDict)
}

size_t FlexDict::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:turi.visualization.pipe.FlexDict)
  size_t total_size = 0;

  // map<string, .turi.visualization.pipe.FlexibleType> dict = 6;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->dict_size());
  {
    ::google::protobuf::scoped_ptr<FlexDict_DictEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::turi::visualization::pipe::FlexibleType >::const_iterator
        it = this->dict().begin();
        it != this->dict().end(); ++it) {
      entry.reset(dict_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FlexDict::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FlexDict*>(&from));
}

void FlexDict::MergeFrom(const FlexDict& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:turi.visualization.pipe.FlexDict)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dict_.MergeFrom(from.dict_);
}

void FlexDict::CopyFrom(const FlexDict& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:turi.visualization.pipe.FlexDict)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlexDict::IsInitialized() const {
  return true;
}

void FlexDict::Swap(FlexDict* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FlexDict::InternalSwap(FlexDict* other) {
  dict_.Swap(&other->dict_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string FlexDict::GetTypeName() const {
  return "turi.visualization.pipe.FlexDict";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FlexDict

// map<string, .turi.visualization.pipe.FlexibleType> dict = 6;
int FlexDict::dict_size() const {
  return dict_.size();
}
void FlexDict::clear_dict() {
  dict_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::turi::visualization::pipe::FlexibleType >&
FlexDict::dict() const {
  // @@protoc_insertion_point(field_map:turi.visualization.pipe.FlexDict.dict)
  return dict_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::turi::visualization::pipe::FlexibleType >*
FlexDict::mutable_dict() {
  // @@protoc_insertion_point(field_mutable_map:turi.visualization.pipe.FlexDict.dict)
  return dict_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FlexUndefined::FlexUndefined()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_pipe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:turi.visualization.pipe.FlexUndefined)
}
FlexUndefined::FlexUndefined(const FlexUndefined& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:turi.visualization.pipe.FlexUndefined)
}

void FlexUndefined::SharedCtor() {
  _cached_size_ = 0;
}

FlexUndefined::~FlexUndefined() {
  // @@protoc_insertion_point(destructor:turi.visualization.pipe.FlexUndefined)
  SharedDtor();
}

void FlexUndefined::SharedDtor() {
}

void FlexUndefined::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FlexUndefined& FlexUndefined::default_instance() {
  protobuf_pipe_2eproto::InitDefaults();
  return *internal_default_instance();
}

FlexUndefined* FlexUndefined::New(::google::protobuf::Arena* arena) const {
  FlexUndefined* n = new FlexUndefined;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FlexUndefined::Clear() {
// @@protoc_insertion_point(message_clear_start:turi.visualization.pipe.FlexUndefined)
}

bool FlexUndefined::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:turi.visualization.pipe.FlexUndefined)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:turi.visualization.pipe.FlexUndefined)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:turi.visualization.pipe.FlexUndefined)
  return false;
#undef DO_
}

void FlexUndefined::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:turi.visualization.pipe.FlexUndefined)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // @@protoc_insertion_point(serialize_end:turi.visualization.pipe.FlexUndefined)
}

size_t FlexUndefined::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:turi.visualization.pipe.FlexUndefined)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FlexUndefined::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FlexUndefined*>(&from));
}

void FlexUndefined::MergeFrom(const FlexUndefined& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:turi.visualization.pipe.FlexUndefined)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void FlexUndefined::CopyFrom(const FlexUndefined& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:turi.visualization.pipe.FlexUndefined)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlexUndefined::IsInitialized() const {
  return true;
}

void FlexUndefined::Swap(FlexUndefined* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FlexUndefined::InternalSwap(FlexUndefined* other) {
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string FlexUndefined::GetTypeName() const {
  return "turi.visualization.pipe.FlexUndefined";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FlexUndefined

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FlexImage::kHeightFieldNumber;
const int FlexImage::kWidthFieldNumber;
const int FlexImage::kChannelsFieldNumber;
const int FlexImage::kFormatFieldNumber;
const int FlexImage::kImageDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FlexImage::FlexImage()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_pipe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:turi.visualization.pipe.FlexImage)
}
FlexImage::FlexImage(const FlexImage& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  image_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.image_data().size() > 0) {
    image_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_data_);
  }
  ::memcpy(&height_, &from.height_,
    reinterpret_cast<char*>(&format_) -
    reinterpret_cast<char*>(&height_) + sizeof(format_));
  // @@protoc_insertion_point(copy_constructor:turi.visualization.pipe.FlexImage)
}

void FlexImage::SharedCtor() {
  image_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&height_, 0, reinterpret_cast<char*>(&format_) -
    reinterpret_cast<char*>(&height_) + sizeof(format_));
  _cached_size_ = 0;
}

FlexImage::~FlexImage() {
  // @@protoc_insertion_point(destructor:turi.visualization.pipe.FlexImage)
  SharedDtor();
}

void FlexImage::SharedDtor() {
  image_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FlexImage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FlexImage& FlexImage::default_instance() {
  protobuf_pipe_2eproto::InitDefaults();
  return *internal_default_instance();
}

FlexImage* FlexImage::New(::google::protobuf::Arena* arena) const {
  FlexImage* n = new FlexImage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FlexImage::Clear() {
// @@protoc_insertion_point(message_clear_start:turi.visualization.pipe.FlexImage)
  image_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&height_, 0, reinterpret_cast<char*>(&format_) -
    reinterpret_cast<char*>(&height_) + sizeof(format_));
}

bool FlexImage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:turi.visualization.pipe.FlexImage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 height = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 width = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 channels = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channels_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .turi.visualization.pipe.FlexImage.Format format = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_format(static_cast< ::turi::visualization::pipe::FlexImage_Format >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes image_data = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_image_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:turi.visualization.pipe.FlexImage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:turi.visualization.pipe.FlexImage)
  return false;
#undef DO_
}

void FlexImage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:turi.visualization.pipe.FlexImage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 height = 1;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->height(), output);
  }

  // int32 width = 2;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->width(), output);
  }

  // int32 channels = 3;
  if (this->channels() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->channels(), output);
  }

  // .turi.visualization.pipe.FlexImage.Format format = 4;
  if (this->format() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->format(), output);
  }

  // bytes image_data = 10;
  if (this->image_data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      10, this->image_data(), output);
  }

  // @@protoc_insertion_point(serialize_end:turi.visualization.pipe.FlexImage)
}

size_t FlexImage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:turi.visualization.pipe.FlexImage)
  size_t total_size = 0;

  // bytes image_data = 10;
  if (this->image_data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->image_data());
  }

  // int32 height = 1;
  if (this->height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->height());
  }

  // int32 width = 2;
  if (this->width() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->width());
  }

  // int32 channels = 3;
  if (this->channels() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->channels());
  }

  // .turi.visualization.pipe.FlexImage.Format format = 4;
  if (this->format() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->format());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FlexImage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FlexImage*>(&from));
}

void FlexImage::MergeFrom(const FlexImage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:turi.visualization.pipe.FlexImage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.image_data().size() > 0) {

    image_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_data_);
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.channels() != 0) {
    set_channels(from.channels());
  }
  if (from.format() != 0) {
    set_format(from.format());
  }
}

void FlexImage::CopyFrom(const FlexImage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:turi.visualization.pipe.FlexImage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlexImage::IsInitialized() const {
  return true;
}

void FlexImage::Swap(FlexImage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FlexImage::InternalSwap(FlexImage* other) {
  image_data_.Swap(&other->image_data_);
  std::swap(height_, other->height_);
  std::swap(width_, other->width_);
  std::swap(channels_, other->channels_);
  std::swap(format_, other->format_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string FlexImage::GetTypeName() const {
  return "turi.visualization.pipe.FlexImage";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FlexImage

// int32 height = 1;
void FlexImage::clear_height() {
  height_ = 0;
}
::google::protobuf::int32 FlexImage::height() const {
  // @@protoc_insertion_point(field_get:turi.visualization.pipe.FlexImage.height)
  return height_;
}
void FlexImage::set_height(::google::protobuf::int32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:turi.visualization.pipe.FlexImage.height)
}

// int32 width = 2;
void FlexImage::clear_width() {
  width_ = 0;
}
::google::protobuf::int32 FlexImage::width() const {
  // @@protoc_insertion_point(field_get:turi.visualization.pipe.FlexImage.width)
  return width_;
}
void FlexImage::set_width(::google::protobuf::int32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:turi.visualization.pipe.FlexImage.width)
}

// int32 channels = 3;
void FlexImage::clear_channels() {
  channels_ = 0;
}
::google::protobuf::int32 FlexImage::channels() const {
  // @@protoc_insertion_point(field_get:turi.visualization.pipe.FlexImage.channels)
  return channels_;
}
void FlexImage::set_channels(::google::protobuf::int32 value) {
  
  channels_ = value;
  // @@protoc_insertion_point(field_set:turi.visualization.pipe.FlexImage.channels)
}

// .turi.visualization.pipe.FlexImage.Format format = 4;
void FlexImage::clear_format() {
  format_ = 0;
}
::turi::visualization::pipe::FlexImage_Format FlexImage::format() const {
  // @@protoc_insertion_point(field_get:turi.visualization.pipe.FlexImage.format)
  return static_cast< ::turi::visualization::pipe::FlexImage_Format >(format_);
}
void FlexImage::set_format(::turi::visualization::pipe::FlexImage_Format value) {
  
  format_ = value;
  // @@protoc_insertion_point(field_set:turi.visualization.pipe.FlexImage.format)
}

// bytes image_data = 10;
void FlexImage::clear_image_data() {
  image_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& FlexImage::image_data() const {
  // @@protoc_insertion_point(field_get:turi.visualization.pipe.FlexImage.image_data)
  return image_data_.GetNoArena();
}
void FlexImage::set_image_data(const ::std::string& value) {
  
  image_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:turi.visualization.pipe.FlexImage.image_data)
}
#if LANG_CXX11
void FlexImage::set_image_data(::std::string&& value) {
  
  image_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:turi.visualization.pipe.FlexImage.image_data)
}
#endif
void FlexImage::set_image_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  image_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:turi.visualization.pipe.FlexImage.image_data)
}
void FlexImage::set_image_data(const void* value, size_t size) {
  
  image_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:turi.visualization.pipe.FlexImage.image_data)
}
::std::string* FlexImage::mutable_image_data() {
  
  // @@protoc_insertion_point(field_mutable:turi.visualization.pipe.FlexImage.image_data)
  return image_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FlexImage::release_image_data() {
  // @@protoc_insertion_point(field_release:turi.visualization.pipe.FlexImage.image_data)
  
  return image_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FlexImage::set_allocated_image_data(::std::string* image_data) {
  if (image_data != NULL) {
    
  } else {
    
  }
  image_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), image_data);
  // @@protoc_insertion_point(field_set_allocated:turi.visualization.pipe.FlexImage.image_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FlexNDVectorDimension::kDimensionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FlexNDVectorDimension::FlexNDVectorDimension()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_pipe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:turi.visualization.pipe.FlexNDVectorDimension)
}
FlexNDVectorDimension::FlexNDVectorDimension(const FlexNDVectorDimension& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      dimension_(from.dimension_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:turi.visualization.pipe.FlexNDVectorDimension)
}

void FlexNDVectorDimension::SharedCtor() {
  _cached_size_ = 0;
}

FlexNDVectorDimension::~FlexNDVectorDimension() {
  // @@protoc_insertion_point(destructor:turi.visualization.pipe.FlexNDVectorDimension)
  SharedDtor();
}

void FlexNDVectorDimension::SharedDtor() {
}

void FlexNDVectorDimension::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FlexNDVectorDimension& FlexNDVectorDimension::default_instance() {
  protobuf_pipe_2eproto::InitDefaults();
  return *internal_default_instance();
}

FlexNDVectorDimension* FlexNDVectorDimension::New(::google::protobuf::Arena* arena) const {
  FlexNDVectorDimension* n = new FlexNDVectorDimension;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FlexNDVectorDimension::Clear() {
// @@protoc_insertion_point(message_clear_start:turi.visualization.pipe.FlexNDVectorDimension)
  dimension_.Clear();
}

bool FlexNDVectorDimension::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:turi.visualization.pipe.FlexNDVectorDimension)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .turi.visualization.pipe.FlexNDVector dimension = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dimension()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:turi.visualization.pipe.FlexNDVectorDimension)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:turi.visualization.pipe.FlexNDVectorDimension)
  return false;
#undef DO_
}

void FlexNDVectorDimension::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:turi.visualization.pipe.FlexNDVectorDimension)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .turi.visualization.pipe.FlexNDVector dimension = 1;
  for (unsigned int i = 0, n = this->dimension_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->dimension(i), output);
  }

  // @@protoc_insertion_point(serialize_end:turi.visualization.pipe.FlexNDVectorDimension)
}

size_t FlexNDVectorDimension::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:turi.visualization.pipe.FlexNDVectorDimension)
  size_t total_size = 0;

  // repeated .turi.visualization.pipe.FlexNDVector dimension = 1;
  {
    unsigned int count = this->dimension_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dimension(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FlexNDVectorDimension::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FlexNDVectorDimension*>(&from));
}

void FlexNDVectorDimension::MergeFrom(const FlexNDVectorDimension& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:turi.visualization.pipe.FlexNDVectorDimension)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dimension_.MergeFrom(from.dimension_);
}

void FlexNDVectorDimension::CopyFrom(const FlexNDVectorDimension& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:turi.visualization.pipe.FlexNDVectorDimension)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlexNDVectorDimension::IsInitialized() const {
  return true;
}

void FlexNDVectorDimension::Swap(FlexNDVectorDimension* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FlexNDVectorDimension::InternalSwap(FlexNDVectorDimension* other) {
  dimension_.InternalSwap(&other->dimension_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string FlexNDVectorDimension::GetTypeName() const {
  return "turi.visualization.pipe.FlexNDVectorDimension";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FlexNDVectorDimension

// repeated .turi.visualization.pipe.FlexNDVector dimension = 1;
int FlexNDVectorDimension::dimension_size() const {
  return dimension_.size();
}
void FlexNDVectorDimension::clear_dimension() {
  dimension_.Clear();
}
const ::turi::visualization::pipe::FlexNDVector& FlexNDVectorDimension::dimension(int index) const {
  // @@protoc_insertion_point(field_get:turi.visualization.pipe.FlexNDVectorDimension.dimension)
  return dimension_.Get(index);
}
::turi::visualization::pipe::FlexNDVector* FlexNDVectorDimension::mutable_dimension(int index) {
  // @@protoc_insertion_point(field_mutable:turi.visualization.pipe.FlexNDVectorDimension.dimension)
  return dimension_.Mutable(index);
}
::turi::visualization::pipe::FlexNDVector* FlexNDVectorDimension::add_dimension() {
  // @@protoc_insertion_point(field_add:turi.visualization.pipe.FlexNDVectorDimension.dimension)
  return dimension_.Add();
}
::google::protobuf::RepeatedPtrField< ::turi::visualization::pipe::FlexNDVector >*
FlexNDVectorDimension::mutable_dimension() {
  // @@protoc_insertion_point(field_mutable_list:turi.visualization.pipe.FlexNDVectorDimension.dimension)
  return &dimension_;
}
const ::google::protobuf::RepeatedPtrField< ::turi::visualization::pipe::FlexNDVector >&
FlexNDVectorDimension::dimension() const {
  // @@protoc_insertion_point(field_list:turi.visualization.pipe.FlexNDVectorDimension.dimension)
  return dimension_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FlexNDVector::kDimensionFieldNumber;
const int FlexNDVector::kValuesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FlexNDVector::FlexNDVector()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_pipe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:turi.visualization.pipe.FlexNDVector)
}
FlexNDVector::FlexNDVector(const FlexNDVector& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_vector();
  switch (from.vector_case()) {
    case kDimension: {
      mutable_dimension()->::turi::visualization::pipe::FlexNDVectorDimension::MergeFrom(from.dimension());
      break;
    }
    case kValues: {
      mutable_values()->::turi::visualization::pipe::FlexVec::MergeFrom(from.values());
      break;
    }
    case VECTOR_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:turi.visualization.pipe.FlexNDVector)
}

void FlexNDVector::SharedCtor() {
  clear_has_vector();
  _cached_size_ = 0;
}

FlexNDVector::~FlexNDVector() {
  // @@protoc_insertion_point(destructor:turi.visualization.pipe.FlexNDVector)
  SharedDtor();
}

void FlexNDVector::SharedDtor() {
  if (has_vector()) {
    clear_vector();
  }
}

void FlexNDVector::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FlexNDVector& FlexNDVector::default_instance() {
  protobuf_pipe_2eproto::InitDefaults();
  return *internal_default_instance();
}

FlexNDVector* FlexNDVector::New(::google::protobuf::Arena* arena) const {
  FlexNDVector* n = new FlexNDVector;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FlexNDVector::clear_vector() {
// @@protoc_insertion_point(one_of_clear_start:turi.visualization.pipe.FlexNDVector)
  switch (vector_case()) {
    case kDimension: {
      delete vector_.dimension_;
      break;
    }
    case kValues: {
      delete vector_.values_;
      break;
    }
    case VECTOR_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VECTOR_NOT_SET;
}


void FlexNDVector::Clear() {
// @@protoc_insertion_point(message_clear_start:turi.visualization.pipe.FlexNDVector)
  clear_vector();
}

bool FlexNDVector::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:turi.visualization.pipe.FlexNDVector)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .turi.visualization.pipe.FlexNDVectorDimension dimension = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dimension()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .turi.visualization.pipe.FlexVec values = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_values()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:turi.visualization.pipe.FlexNDVector)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:turi.visualization.pipe.FlexNDVector)
  return false;
#undef DO_
}

void FlexNDVector::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:turi.visualization.pipe.FlexNDVector)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .turi.visualization.pipe.FlexNDVectorDimension dimension = 1;
  if (has_dimension()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *vector_.dimension_, output);
  }

  // .turi.visualization.pipe.FlexVec values = 2;
  if (has_values()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *vector_.values_, output);
  }

  // @@protoc_insertion_point(serialize_end:turi.visualization.pipe.FlexNDVector)
}

size_t FlexNDVector::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:turi.visualization.pipe.FlexNDVector)
  size_t total_size = 0;

  switch (vector_case()) {
    // .turi.visualization.pipe.FlexNDVectorDimension dimension = 1;
    case kDimension: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *vector_.dimension_);
      break;
    }
    // .turi.visualization.pipe.FlexVec values = 2;
    case kValues: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *vector_.values_);
      break;
    }
    case VECTOR_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FlexNDVector::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FlexNDVector*>(&from));
}

void FlexNDVector::MergeFrom(const FlexNDVector& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:turi.visualization.pipe.FlexNDVector)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.vector_case()) {
    case kDimension: {
      mutable_dimension()->::turi::visualization::pipe::FlexNDVectorDimension::MergeFrom(from.dimension());
      break;
    }
    case kValues: {
      mutable_values()->::turi::visualization::pipe::FlexVec::MergeFrom(from.values());
      break;
    }
    case VECTOR_NOT_SET: {
      break;
    }
  }
}

void FlexNDVector::CopyFrom(const FlexNDVector& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:turi.visualization.pipe.FlexNDVector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlexNDVector::IsInitialized() const {
  return true;
}

void FlexNDVector::Swap(FlexNDVector* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FlexNDVector::InternalSwap(FlexNDVector* other) {
  std::swap(vector_, other->vector_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string FlexNDVector::GetTypeName() const {
  return "turi.visualization.pipe.FlexNDVector";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FlexNDVector

// .turi.visualization.pipe.FlexNDVectorDimension dimension = 1;
bool FlexNDVector::has_dimension() const {
  return vector_case() == kDimension;
}
void FlexNDVector::set_has_dimension() {
  _oneof_case_[0] = kDimension;
}
void FlexNDVector::clear_dimension() {
  if (has_dimension()) {
    delete vector_.dimension_;
    clear_has_vector();
  }
}
 const ::turi::visualization::pipe::FlexNDVectorDimension& FlexNDVector::dimension() const {
  // @@protoc_insertion_point(field_get:turi.visualization.pipe.FlexNDVector.dimension)
  return has_dimension()
      ? *vector_.dimension_
      : ::turi::visualization::pipe::FlexNDVectorDimension::default_instance();
}
::turi::visualization::pipe::FlexNDVectorDimension* FlexNDVector::mutable_dimension() {
  if (!has_dimension()) {
    clear_vector();
    set_has_dimension();
    vector_.dimension_ = new ::turi::visualization::pipe::FlexNDVectorDimension;
  }
  // @@protoc_insertion_point(field_mutable:turi.visualization.pipe.FlexNDVector.dimension)
  return vector_.dimension_;
}
::turi::visualization::pipe::FlexNDVectorDimension* FlexNDVector::release_dimension() {
  // @@protoc_insertion_point(field_release:turi.visualization.pipe.FlexNDVector.dimension)
  if (has_dimension()) {
    clear_has_vector();
    ::turi::visualization::pipe::FlexNDVectorDimension* temp = vector_.dimension_;
    vector_.dimension_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void FlexNDVector::set_allocated_dimension(::turi::visualization::pipe::FlexNDVectorDimension* dimension) {
  clear_vector();
  if (dimension) {
    set_has_dimension();
    vector_.dimension_ = dimension;
  }
  // @@protoc_insertion_point(field_set_allocated:turi.visualization.pipe.FlexNDVector.dimension)
}

// .turi.visualization.pipe.FlexVec values = 2;
bool FlexNDVector::has_values() const {
  return vector_case() == kValues;
}
void FlexNDVector::set_has_values() {
  _oneof_case_[0] = kValues;
}
void FlexNDVector::clear_values() {
  if (has_values()) {
    delete vector_.values_;
    clear_has_vector();
  }
}
 const ::turi::visualization::pipe::FlexVec& FlexNDVector::values() const {
  // @@protoc_insertion_point(field_get:turi.visualization.pipe.FlexNDVector.values)
  return has_values()
      ? *vector_.values_
      : ::turi::visualization::pipe::FlexVec::default_instance();
}
::turi::visualization::pipe::FlexVec* FlexNDVector::mutable_values() {
  if (!has_values()) {
    clear_vector();
    set_has_values();
    vector_.values_ = new ::turi::visualization::pipe::FlexVec;
  }
  // @@protoc_insertion_point(field_mutable:turi.visualization.pipe.FlexNDVector.values)
  return vector_.values_;
}
::turi::visualization::pipe::FlexVec* FlexNDVector::release_values() {
  // @@protoc_insertion_point(field_release:turi.visualization.pipe.FlexNDVector.values)
  if (has_values()) {
    clear_has_vector();
    ::turi::visualization::pipe::FlexVec* temp = vector_.values_;
    vector_.values_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void FlexNDVector::set_allocated_values(::turi::visualization::pipe::FlexVec* values) {
  clear_vector();
  if (values) {
    set_has_values();
    vector_.values_ = values;
  }
  // @@protoc_insertion_point(field_set_allocated:turi.visualization.pipe.FlexNDVector.values)
}

bool FlexNDVector::has_vector() const {
  return vector_case() != VECTOR_NOT_SET;
}
void FlexNDVector::clear_has_vector() {
  _oneof_case_[0] = VECTOR_NOT_SET;
}
FlexNDVector::VectorCase FlexNDVector::vector_case() const {
  return FlexNDVector::VectorCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FlexibleType::kIntegerFieldNumber;
const int FlexibleType::kFloatFieldNumber;
const int FlexibleType::kStringFieldNumber;
const int FlexibleType::kVectorFieldNumber;
const int FlexibleType::kListFieldNumber;
const int FlexibleType::kDictFieldNumber;
const int FlexibleType::kDatetimeFieldNumber;
const int FlexibleType::kUndefinedFieldNumber;
const int FlexibleType::kImageFieldNumber;
const int FlexibleType::kNdVectorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FlexibleType::FlexibleType()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_pipe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:turi.visualization.pipe.FlexibleType)
}
FlexibleType::FlexibleType(const FlexibleType& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_value();
  switch (from.value_case()) {
    case kInteger: {
      set_integer(from.integer());
      break;
    }
    case kFloat: {
      set_float_(from.float_());
      break;
    }
    case kString: {
      set_string(from.string());
      break;
    }
    case kVector: {
      mutable_vector()->::turi::visualization::pipe::FlexVec::MergeFrom(from.vector());
      break;
    }
    case kList: {
      mutable_list()->::turi::visualization::pipe::FlexList::MergeFrom(from.list());
      break;
    }
    case kDict: {
      mutable_dict()->::turi::visualization::pipe::FlexDict::MergeFrom(from.dict());
      break;
    }
    case kDatetime: {
      mutable_datetime()->::turi::visualization::pipe::FlexDatetime::MergeFrom(from.datetime());
      break;
    }
    case kUndefined: {
      mutable_undefined()->::turi::visualization::pipe::FlexUndefined::MergeFrom(from.undefined());
      break;
    }
    case kImage: {
      mutable_image()->::turi::visualization::pipe::FlexImage::MergeFrom(from.image());
      break;
    }
    case kNdVector: {
      mutable_nd_vector()->::turi::visualization::pipe::FlexNDVector::MergeFrom(from.nd_vector());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:turi.visualization.pipe.FlexibleType)
}

void FlexibleType::SharedCtor() {
  clear_has_value();
  _cached_size_ = 0;
}

FlexibleType::~FlexibleType() {
  // @@protoc_insertion_point(destructor:turi.visualization.pipe.FlexibleType)
  SharedDtor();
}

void FlexibleType::SharedDtor() {
  if (has_value()) {
    clear_value();
  }
}

void FlexibleType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FlexibleType& FlexibleType::default_instance() {
  protobuf_pipe_2eproto::InitDefaults();
  return *internal_default_instance();
}

FlexibleType* FlexibleType::New(::google::protobuf::Arena* arena) const {
  FlexibleType* n = new FlexibleType;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FlexibleType::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:turi.visualization.pipe.FlexibleType)
  switch (value_case()) {
    case kInteger: {
      // No need to clear
      break;
    }
    case kFloat: {
      // No need to clear
      break;
    }
    case kString: {
      value_.string_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kVector: {
      delete value_.vector_;
      break;
    }
    case kList: {
      delete value_.list_;
      break;
    }
    case kDict: {
      delete value_.dict_;
      break;
    }
    case kDatetime: {
      delete value_.datetime_;
      break;
    }
    case kUndefined: {
      delete value_.undefined_;
      break;
    }
    case kImage: {
      delete value_.image_;
      break;
    }
    case kNdVector: {
      delete value_.nd_vector_;
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_NOT_SET;
}


void FlexibleType::Clear() {
// @@protoc_insertion_point(message_clear_start:turi.visualization.pipe.FlexibleType)
  clear_value();
}

bool FlexibleType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:turi.visualization.pipe.FlexibleType)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 integer = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          clear_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &value_.integer_)));
          set_has_integer();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float float = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {
          clear_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &value_.float__)));
          set_has_float_();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string string = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_string()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->string().data(), this->string().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "turi.visualization.pipe.FlexibleType.string"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .turi.visualization.pipe.FlexVec vector = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vector()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .turi.visualization.pipe.FlexList list = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .turi.visualization.pipe.FlexDict dict = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dict()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .turi.visualization.pipe.FlexDatetime datetime = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_datetime()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .turi.visualization.pipe.FlexUndefined undefined = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_undefined()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .turi.visualization.pipe.FlexImage image = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_image()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .turi.visualization.pipe.FlexNDVector nd_vector = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_nd_vector()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:turi.visualization.pipe.FlexibleType)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:turi.visualization.pipe.FlexibleType)
  return false;
#undef DO_
}

void FlexibleType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:turi.visualization.pipe.FlexibleType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 integer = 1;
  if (has_integer()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->integer(), output);
  }

  // float float = 2;
  if (has_float_()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->float_(), output);
  }

  // string string = 3;
  if (has_string()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->string().data(), this->string().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "turi.visualization.pipe.FlexibleType.string");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->string(), output);
  }

  // .turi.visualization.pipe.FlexVec vector = 4;
  if (has_vector()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, *value_.vector_, output);
  }

  // .turi.visualization.pipe.FlexList list = 5;
  if (has_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, *value_.list_, output);
  }

  // .turi.visualization.pipe.FlexDict dict = 6;
  if (has_dict()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, *value_.dict_, output);
  }

  // .turi.visualization.pipe.FlexDatetime datetime = 7;
  if (has_datetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, *value_.datetime_, output);
  }

  // .turi.visualization.pipe.FlexUndefined undefined = 8;
  if (has_undefined()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, *value_.undefined_, output);
  }

  // .turi.visualization.pipe.FlexImage image = 9;
  if (has_image()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, *value_.image_, output);
  }

  // .turi.visualization.pipe.FlexNDVector nd_vector = 10;
  if (has_nd_vector()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      10, *value_.nd_vector_, output);
  }

  // @@protoc_insertion_point(serialize_end:turi.visualization.pipe.FlexibleType)
}

size_t FlexibleType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:turi.visualization.pipe.FlexibleType)
  size_t total_size = 0;

  switch (value_case()) {
    // int64 integer = 1;
    case kInteger: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->integer());
      break;
    }
    // float float = 2;
    case kFloat: {
      total_size += 1 + 4;
      break;
    }
    // string string = 3;
    case kString: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->string());
      break;
    }
    // .turi.visualization.pipe.FlexVec vector = 4;
    case kVector: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.vector_);
      break;
    }
    // .turi.visualization.pipe.FlexList list = 5;
    case kList: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.list_);
      break;
    }
    // .turi.visualization.pipe.FlexDict dict = 6;
    case kDict: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.dict_);
      break;
    }
    // .turi.visualization.pipe.FlexDatetime datetime = 7;
    case kDatetime: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.datetime_);
      break;
    }
    // .turi.visualization.pipe.FlexUndefined undefined = 8;
    case kUndefined: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.undefined_);
      break;
    }
    // .turi.visualization.pipe.FlexImage image = 9;
    case kImage: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.image_);
      break;
    }
    // .turi.visualization.pipe.FlexNDVector nd_vector = 10;
    case kNdVector: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.nd_vector_);
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FlexibleType::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FlexibleType*>(&from));
}

void FlexibleType::MergeFrom(const FlexibleType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:turi.visualization.pipe.FlexibleType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.value_case()) {
    case kInteger: {
      set_integer(from.integer());
      break;
    }
    case kFloat: {
      set_float_(from.float_());
      break;
    }
    case kString: {
      set_string(from.string());
      break;
    }
    case kVector: {
      mutable_vector()->::turi::visualization::pipe::FlexVec::MergeFrom(from.vector());
      break;
    }
    case kList: {
      mutable_list()->::turi::visualization::pipe::FlexList::MergeFrom(from.list());
      break;
    }
    case kDict: {
      mutable_dict()->::turi::visualization::pipe::FlexDict::MergeFrom(from.dict());
      break;
    }
    case kDatetime: {
      mutable_datetime()->::turi::visualization::pipe::FlexDatetime::MergeFrom(from.datetime());
      break;
    }
    case kUndefined: {
      mutable_undefined()->::turi::visualization::pipe::FlexUndefined::MergeFrom(from.undefined());
      break;
    }
    case kImage: {
      mutable_image()->::turi::visualization::pipe::FlexImage::MergeFrom(from.image());
      break;
    }
    case kNdVector: {
      mutable_nd_vector()->::turi::visualization::pipe::FlexNDVector::MergeFrom(from.nd_vector());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
}

void FlexibleType::CopyFrom(const FlexibleType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:turi.visualization.pipe.FlexibleType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlexibleType::IsInitialized() const {
  return true;
}

void FlexibleType::Swap(FlexibleType* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FlexibleType::InternalSwap(FlexibleType* other) {
  std::swap(value_, other->value_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string FlexibleType::GetTypeName() const {
  return "turi.visualization.pipe.FlexibleType";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FlexibleType

// int64 integer = 1;
bool FlexibleType::has_integer() const {
  return value_case() == kInteger;
}
void FlexibleType::set_has_integer() {
  _oneof_case_[0] = kInteger;
}
void FlexibleType::clear_integer() {
  if (has_integer()) {
    value_.integer_ = GOOGLE_LONGLONG(0);
    clear_has_value();
  }
}
::google::protobuf::int64 FlexibleType::integer() const {
  // @@protoc_insertion_point(field_get:turi.visualization.pipe.FlexibleType.integer)
  if (has_integer()) {
    return value_.integer_;
  }
  return GOOGLE_LONGLONG(0);
}
void FlexibleType::set_integer(::google::protobuf::int64 value) {
  if (!has_integer()) {
    clear_value();
    set_has_integer();
  }
  value_.integer_ = value;
  // @@protoc_insertion_point(field_set:turi.visualization.pipe.FlexibleType.integer)
}

// float float = 2;
bool FlexibleType::has_float_() const {
  return value_case() == kFloat;
}
void FlexibleType::set_has_float_() {
  _oneof_case_[0] = kFloat;
}
void FlexibleType::clear_float_() {
  if (has_float_()) {
    value_.float__ = 0;
    clear_has_value();
  }
}
float FlexibleType::float_() const {
  // @@protoc_insertion_point(field_get:turi.visualization.pipe.FlexibleType.float)
  if (has_float_()) {
    return value_.float__;
  }
  return 0;
}
void FlexibleType::set_float_(float value) {
  if (!has_float_()) {
    clear_value();
    set_has_float_();
  }
  value_.float__ = value;
  // @@protoc_insertion_point(field_set:turi.visualization.pipe.FlexibleType.float)
}

// string string = 3;
bool FlexibleType::has_string() const {
  return value_case() == kString;
}
void FlexibleType::set_has_string() {
  _oneof_case_[0] = kString;
}
void FlexibleType::clear_string() {
  if (has_string()) {
    value_.string_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_value();
  }
}
const ::std::string& FlexibleType::string() const {
  // @@protoc_insertion_point(field_get:turi.visualization.pipe.FlexibleType.string)
  if (has_string()) {
    return value_.string_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void FlexibleType::set_string(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:turi.visualization.pipe.FlexibleType.string)
  if (!has_string()) {
    clear_value();
    set_has_string();
    value_.string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:turi.visualization.pipe.FlexibleType.string)
}
#if LANG_CXX11
void FlexibleType::set_string(::std::string&& value) {
  // @@protoc_insertion_point(field_set:turi.visualization.pipe.FlexibleType.string)
  if (!has_string()) {
    clear_value();
    set_has_string();
    value_.string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.string_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:turi.visualization.pipe.FlexibleType.string)
}
#endif
void FlexibleType::set_string(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_string()) {
    clear_value();
    set_has_string();
    value_.string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:turi.visualization.pipe.FlexibleType.string)
}
void FlexibleType::set_string(const char* value, size_t size) {
  if (!has_string()) {
    clear_value();
    set_has_string();
    value_.string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:turi.visualization.pipe.FlexibleType.string)
}
::std::string* FlexibleType::mutable_string() {
  if (!has_string()) {
    clear_value();
    set_has_string();
    value_.string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:turi.visualization.pipe.FlexibleType.string)
  return value_.string_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FlexibleType::release_string() {
  // @@protoc_insertion_point(field_release:turi.visualization.pipe.FlexibleType.string)
  if (has_string()) {
    clear_has_value();
    return value_.string_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void FlexibleType::set_allocated_string(::std::string* string) {
  if (!has_string()) {
    value_.string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_value();
  if (string != NULL) {
    set_has_string();
    value_.string_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        string);
  }
  // @@protoc_insertion_point(field_set_allocated:turi.visualization.pipe.FlexibleType.string)
}

// .turi.visualization.pipe.FlexVec vector = 4;
bool FlexibleType::has_vector() const {
  return value_case() == kVector;
}
void FlexibleType::set_has_vector() {
  _oneof_case_[0] = kVector;
}
void FlexibleType::clear_vector() {
  if (has_vector()) {
    delete value_.vector_;
    clear_has_value();
  }
}
 const ::turi::visualization::pipe::FlexVec& FlexibleType::vector() const {
  // @@protoc_insertion_point(field_get:turi.visualization.pipe.FlexibleType.vector)
  return has_vector()
      ? *value_.vector_
      : ::turi::visualization::pipe::FlexVec::default_instance();
}
::turi::visualization::pipe::FlexVec* FlexibleType::mutable_vector() {
  if (!has_vector()) {
    clear_value();
    set_has_vector();
    value_.vector_ = new ::turi::visualization::pipe::FlexVec;
  }
  // @@protoc_insertion_point(field_mutable:turi.visualization.pipe.FlexibleType.vector)
  return value_.vector_;
}
::turi::visualization::pipe::FlexVec* FlexibleType::release_vector() {
  // @@protoc_insertion_point(field_release:turi.visualization.pipe.FlexibleType.vector)
  if (has_vector()) {
    clear_has_value();
    ::turi::visualization::pipe::FlexVec* temp = value_.vector_;
    value_.vector_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void FlexibleType::set_allocated_vector(::turi::visualization::pipe::FlexVec* vector) {
  clear_value();
  if (vector) {
    set_has_vector();
    value_.vector_ = vector;
  }
  // @@protoc_insertion_point(field_set_allocated:turi.visualization.pipe.FlexibleType.vector)
}

// .turi.visualization.pipe.FlexList list = 5;
bool FlexibleType::has_list() const {
  return value_case() == kList;
}
void FlexibleType::set_has_list() {
  _oneof_case_[0] = kList;
}
void FlexibleType::clear_list() {
  if (has_list()) {
    delete value_.list_;
    clear_has_value();
  }
}
 const ::turi::visualization::pipe::FlexList& FlexibleType::list() const {
  // @@protoc_insertion_point(field_get:turi.visualization.pipe.FlexibleType.list)
  return has_list()
      ? *value_.list_
      : ::turi::visualization::pipe::FlexList::default_instance();
}
::turi::visualization::pipe::FlexList* FlexibleType::mutable_list() {
  if (!has_list()) {
    clear_value();
    set_has_list();
    value_.list_ = new ::turi::visualization::pipe::FlexList;
  }
  // @@protoc_insertion_point(field_mutable:turi.visualization.pipe.FlexibleType.list)
  return value_.list_;
}
::turi::visualization::pipe::FlexList* FlexibleType::release_list() {
  // @@protoc_insertion_point(field_release:turi.visualization.pipe.FlexibleType.list)
  if (has_list()) {
    clear_has_value();
    ::turi::visualization::pipe::FlexList* temp = value_.list_;
    value_.list_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void FlexibleType::set_allocated_list(::turi::visualization::pipe::FlexList* list) {
  clear_value();
  if (list) {
    set_has_list();
    value_.list_ = list;
  }
  // @@protoc_insertion_point(field_set_allocated:turi.visualization.pipe.FlexibleType.list)
}

// .turi.visualization.pipe.FlexDict dict = 6;
bool FlexibleType::has_dict() const {
  return value_case() == kDict;
}
void FlexibleType::set_has_dict() {
  _oneof_case_[0] = kDict;
}
void FlexibleType::clear_dict() {
  if (has_dict()) {
    delete value_.dict_;
    clear_has_value();
  }
}
 const ::turi::visualization::pipe::FlexDict& FlexibleType::dict() const {
  // @@protoc_insertion_point(field_get:turi.visualization.pipe.FlexibleType.dict)
  return has_dict()
      ? *value_.dict_
      : ::turi::visualization::pipe::FlexDict::default_instance();
}
::turi::visualization::pipe::FlexDict* FlexibleType::mutable_dict() {
  if (!has_dict()) {
    clear_value();
    set_has_dict();
    value_.dict_ = new ::turi::visualization::pipe::FlexDict;
  }
  // @@protoc_insertion_point(field_mutable:turi.visualization.pipe.FlexibleType.dict)
  return value_.dict_;
}
::turi::visualization::pipe::FlexDict* FlexibleType::release_dict() {
  // @@protoc_insertion_point(field_release:turi.visualization.pipe.FlexibleType.dict)
  if (has_dict()) {
    clear_has_value();
    ::turi::visualization::pipe::FlexDict* temp = value_.dict_;
    value_.dict_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void FlexibleType::set_allocated_dict(::turi::visualization::pipe::FlexDict* dict) {
  clear_value();
  if (dict) {
    set_has_dict();
    value_.dict_ = dict;
  }
  // @@protoc_insertion_point(field_set_allocated:turi.visualization.pipe.FlexibleType.dict)
}

// .turi.visualization.pipe.FlexDatetime datetime = 7;
bool FlexibleType::has_datetime() const {
  return value_case() == kDatetime;
}
void FlexibleType::set_has_datetime() {
  _oneof_case_[0] = kDatetime;
}
void FlexibleType::clear_datetime() {
  if (has_datetime()) {
    delete value_.datetime_;
    clear_has_value();
  }
}
 const ::turi::visualization::pipe::FlexDatetime& FlexibleType::datetime() const {
  // @@protoc_insertion_point(field_get:turi.visualization.pipe.FlexibleType.datetime)
  return has_datetime()
      ? *value_.datetime_
      : ::turi::visualization::pipe::FlexDatetime::default_instance();
}
::turi::visualization::pipe::FlexDatetime* FlexibleType::mutable_datetime() {
  if (!has_datetime()) {
    clear_value();
    set_has_datetime();
    value_.datetime_ = new ::turi::visualization::pipe::FlexDatetime;
  }
  // @@protoc_insertion_point(field_mutable:turi.visualization.pipe.FlexibleType.datetime)
  return value_.datetime_;
}
::turi::visualization::pipe::FlexDatetime* FlexibleType::release_datetime() {
  // @@protoc_insertion_point(field_release:turi.visualization.pipe.FlexibleType.datetime)
  if (has_datetime()) {
    clear_has_value();
    ::turi::visualization::pipe::FlexDatetime* temp = value_.datetime_;
    value_.datetime_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void FlexibleType::set_allocated_datetime(::turi::visualization::pipe::FlexDatetime* datetime) {
  clear_value();
  if (datetime) {
    set_has_datetime();
    value_.datetime_ = datetime;
  }
  // @@protoc_insertion_point(field_set_allocated:turi.visualization.pipe.FlexibleType.datetime)
}

// .turi.visualization.pipe.FlexUndefined undefined = 8;
bool FlexibleType::has_undefined() const {
  return value_case() == kUndefined;
}
void FlexibleType::set_has_undefined() {
  _oneof_case_[0] = kUndefined;
}
void FlexibleType::clear_undefined() {
  if (has_undefined()) {
    delete value_.undefined_;
    clear_has_value();
  }
}
 const ::turi::visualization::pipe::FlexUndefined& FlexibleType::undefined() const {
  // @@protoc_insertion_point(field_get:turi.visualization.pipe.FlexibleType.undefined)
  return has_undefined()
      ? *value_.undefined_
      : ::turi::visualization::pipe::FlexUndefined::default_instance();
}
::turi::visualization::pipe::FlexUndefined* FlexibleType::mutable_undefined() {
  if (!has_undefined()) {
    clear_value();
    set_has_undefined();
    value_.undefined_ = new ::turi::visualization::pipe::FlexUndefined;
  }
  // @@protoc_insertion_point(field_mutable:turi.visualization.pipe.FlexibleType.undefined)
  return value_.undefined_;
}
::turi::visualization::pipe::FlexUndefined* FlexibleType::release_undefined() {
  // @@protoc_insertion_point(field_release:turi.visualization.pipe.FlexibleType.undefined)
  if (has_undefined()) {
    clear_has_value();
    ::turi::visualization::pipe::FlexUndefined* temp = value_.undefined_;
    value_.undefined_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void FlexibleType::set_allocated_undefined(::turi::visualization::pipe::FlexUndefined* undefined) {
  clear_value();
  if (undefined) {
    set_has_undefined();
    value_.undefined_ = undefined;
  }
  // @@protoc_insertion_point(field_set_allocated:turi.visualization.pipe.FlexibleType.undefined)
}

// .turi.visualization.pipe.FlexImage image = 9;
bool FlexibleType::has_image() const {
  return value_case() == kImage;
}
void FlexibleType::set_has_image() {
  _oneof_case_[0] = kImage;
}
void FlexibleType::clear_image() {
  if (has_image()) {
    delete value_.image_;
    clear_has_value();
  }
}
 const ::turi::visualization::pipe::FlexImage& FlexibleType::image() const {
  // @@protoc_insertion_point(field_get:turi.visualization.pipe.FlexibleType.image)
  return has_image()
      ? *value_.image_
      : ::turi::visualization::pipe::FlexImage::default_instance();
}
::turi::visualization::pipe::FlexImage* FlexibleType::mutable_image() {
  if (!has_image()) {
    clear_value();
    set_has_image();
    value_.image_ = new ::turi::visualization::pipe::FlexImage;
  }
  // @@protoc_insertion_point(field_mutable:turi.visualization.pipe.FlexibleType.image)
  return value_.image_;
}
::turi::visualization::pipe::FlexImage* FlexibleType::release_image() {
  // @@protoc_insertion_point(field_release:turi.visualization.pipe.FlexibleType.image)
  if (has_image()) {
    clear_has_value();
    ::turi::visualization::pipe::FlexImage* temp = value_.image_;
    value_.image_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void FlexibleType::set_allocated_image(::turi::visualization::pipe::FlexImage* image) {
  clear_value();
  if (image) {
    set_has_image();
    value_.image_ = image;
  }
  // @@protoc_insertion_point(field_set_allocated:turi.visualization.pipe.FlexibleType.image)
}

// .turi.visualization.pipe.FlexNDVector nd_vector = 10;
bool FlexibleType::has_nd_vector() const {
  return value_case() == kNdVector;
}
void FlexibleType::set_has_nd_vector() {
  _oneof_case_[0] = kNdVector;
}
void FlexibleType::clear_nd_vector() {
  if (has_nd_vector()) {
    delete value_.nd_vector_;
    clear_has_value();
  }
}
 const ::turi::visualization::pipe::FlexNDVector& FlexibleType::nd_vector() const {
  // @@protoc_insertion_point(field_get:turi.visualization.pipe.FlexibleType.nd_vector)
  return has_nd_vector()
      ? *value_.nd_vector_
      : ::turi::visualization::pipe::FlexNDVector::default_instance();
}
::turi::visualization::pipe::FlexNDVector* FlexibleType::mutable_nd_vector() {
  if (!has_nd_vector()) {
    clear_value();
    set_has_nd_vector();
    value_.nd_vector_ = new ::turi::visualization::pipe::FlexNDVector;
  }
  // @@protoc_insertion_point(field_mutable:turi.visualization.pipe.FlexibleType.nd_vector)
  return value_.nd_vector_;
}
::turi::visualization::pipe::FlexNDVector* FlexibleType::release_nd_vector() {
  // @@protoc_insertion_point(field_release:turi.visualization.pipe.FlexibleType.nd_vector)
  if (has_nd_vector()) {
    clear_has_value();
    ::turi::visualization::pipe::FlexNDVector* temp = value_.nd_vector_;
    value_.nd_vector_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void FlexibleType::set_allocated_nd_vector(::turi::visualization::pipe::FlexNDVector* nd_vector) {
  clear_value();
  if (nd_vector) {
    set_has_nd_vector();
    value_.nd_vector_ = nd_vector;
  }
  // @@protoc_insertion_point(field_set_allocated:turi.visualization.pipe.FlexibleType.nd_vector)
}

bool FlexibleType::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
void FlexibleType::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
FlexibleType::ValueCase FlexibleType::value_case() const {
  return FlexibleType::ValueCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TableRow::kIdFieldNumber;
const int TableRow::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TableRow::TableRow()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_pipe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:turi.visualization.pipe.TableRow)
}
TableRow::TableRow(const TableRow& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      data_(from.data_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:turi.visualization.pipe.TableRow)
}

void TableRow::SharedCtor() {
  id_ = 0;
  _cached_size_ = 0;
}

TableRow::~TableRow() {
  // @@protoc_insertion_point(destructor:turi.visualization.pipe.TableRow)
  SharedDtor();
}

void TableRow::SharedDtor() {
}

void TableRow::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TableRow& TableRow::default_instance() {
  protobuf_pipe_2eproto::InitDefaults();
  return *internal_default_instance();
}

TableRow* TableRow::New(::google::protobuf::Arena* arena) const {
  TableRow* n = new TableRow;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TableRow::Clear() {
// @@protoc_insertion_point(message_clear_start:turi.visualization.pipe.TableRow)
  data_.Clear();
  id_ = 0;
}

bool TableRow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:turi.visualization.pipe.TableRow)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .turi.visualization.pipe.FlexibleType data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:turi.visualization.pipe.TableRow)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:turi.visualization.pipe.TableRow)
  return false;
#undef DO_
}

void TableRow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:turi.visualization.pipe.TableRow)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // repeated .turi.visualization.pipe.FlexibleType data = 2;
  for (unsigned int i = 0, n = this->data_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->data(i), output);
  }

  // @@protoc_insertion_point(serialize_end:turi.visualization.pipe.TableRow)
}

size_t TableRow::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:turi.visualization.pipe.TableRow)
  size_t total_size = 0;

  // repeated .turi.visualization.pipe.FlexibleType data = 2;
  {
    unsigned int count = this->data_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data(i));
    }
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TableRow::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TableRow*>(&from));
}

void TableRow::MergeFrom(const TableRow& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:turi.visualization.pipe.TableRow)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  if (from.id() != 0) {
    set_id(from.id());
  }
}

void TableRow::CopyFrom(const TableRow& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:turi.visualization.pipe.TableRow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableRow::IsInitialized() const {
  return true;
}

void TableRow::Swap(TableRow* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TableRow::InternalSwap(TableRow* other) {
  data_.InternalSwap(&other->data_);
  std::swap(id_, other->id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string TableRow::GetTypeName() const {
  return "turi.visualization.pipe.TableRow";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TableRow

// int32 id = 1;
void TableRow::clear_id() {
  id_ = 0;
}
::google::protobuf::int32 TableRow::id() const {
  // @@protoc_insertion_point(field_get:turi.visualization.pipe.TableRow.id)
  return id_;
}
void TableRow::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:turi.visualization.pipe.TableRow.id)
}

// repeated .turi.visualization.pipe.FlexibleType data = 2;
int TableRow::data_size() const {
  return data_.size();
}
void TableRow::clear_data() {
  data_.Clear();
}
const ::turi::visualization::pipe::FlexibleType& TableRow::data(int index) const {
  // @@protoc_insertion_point(field_get:turi.visualization.pipe.TableRow.data)
  return data_.Get(index);
}
::turi::visualization::pipe::FlexibleType* TableRow::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:turi.visualization.pipe.TableRow.data)
  return data_.Mutable(index);
}
::turi::visualization::pipe::FlexibleType* TableRow::add_data() {
  // @@protoc_insertion_point(field_add:turi.visualization.pipe.TableRow.data)
  return data_.Add();
}
::google::protobuf::RepeatedPtrField< ::turi::visualization::pipe::FlexibleType >*
TableRow::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:turi.visualization.pipe.TableRow.data)
  return &data_;
}
const ::google::protobuf::RepeatedPtrField< ::turi::visualization::pipe::FlexibleType >&
TableRow::data() const {
  // @@protoc_insertion_point(field_list:turi.visualization.pipe.TableRow.data)
  return data_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TableData::kRowsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TableData::TableData()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_pipe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:turi.visualization.pipe.TableData)
}
TableData::TableData(const TableData& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      rows_(from.rows_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:turi.visualization.pipe.TableData)
}

void TableData::SharedCtor() {
  _cached_size_ = 0;
}

TableData::~TableData() {
  // @@protoc_insertion_point(destructor:turi.visualization.pipe.TableData)
  SharedDtor();
}

void TableData::SharedDtor() {
}

void TableData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TableData& TableData::default_instance() {
  protobuf_pipe_2eproto::InitDefaults();
  return *internal_default_instance();
}

TableData* TableData::New(::google::protobuf::Arena* arena) const {
  TableData* n = new TableData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TableData::Clear() {
// @@protoc_insertion_point(message_clear_start:turi.visualization.pipe.TableData)
  rows_.Clear();
}

bool TableData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:turi.visualization.pipe.TableData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .turi.visualization.pipe.TableRow rows = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rows()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:turi.visualization.pipe.TableData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:turi.visualization.pipe.TableData)
  return false;
#undef DO_
}

void TableData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:turi.visualization.pipe.TableData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .turi.visualization.pipe.TableRow rows = 1;
  for (unsigned int i = 0, n = this->rows_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->rows(i), output);
  }

  // @@protoc_insertion_point(serialize_end:turi.visualization.pipe.TableData)
}

size_t TableData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:turi.visualization.pipe.TableData)
  size_t total_size = 0;

  // repeated .turi.visualization.pipe.TableRow rows = 1;
  {
    unsigned int count = this->rows_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rows(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TableData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TableData*>(&from));
}

void TableData::MergeFrom(const TableData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:turi.visualization.pipe.TableData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rows_.MergeFrom(from.rows_);
}

void TableData::CopyFrom(const TableData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:turi.visualization.pipe.TableData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableData::IsInitialized() const {
  return true;
}

void TableData::Swap(TableData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TableData::InternalSwap(TableData* other) {
  rows_.InternalSwap(&other->rows_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string TableData::GetTypeName() const {
  return "turi.visualization.pipe.TableData";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TableData

// repeated .turi.visualization.pipe.TableRow rows = 1;
int TableData::rows_size() const {
  return rows_.size();
}
void TableData::clear_rows() {
  rows_.Clear();
}
const ::turi::visualization::pipe::TableRow& TableData::rows(int index) const {
  // @@protoc_insertion_point(field_get:turi.visualization.pipe.TableData.rows)
  return rows_.Get(index);
}
::turi::visualization::pipe::TableRow* TableData::mutable_rows(int index) {
  // @@protoc_insertion_point(field_mutable:turi.visualization.pipe.TableData.rows)
  return rows_.Mutable(index);
}
::turi::visualization::pipe::TableRow* TableData::add_rows() {
  // @@protoc_insertion_point(field_add:turi.visualization.pipe.TableData.rows)
  return rows_.Add();
}
::google::protobuf::RepeatedPtrField< ::turi::visualization::pipe::TableRow >*
TableData::mutable_rows() {
  // @@protoc_insertion_point(field_mutable_list:turi.visualization.pipe.TableData.rows)
  return &rows_;
}
const ::google::protobuf::RepeatedPtrField< ::turi::visualization::pipe::TableRow >&
TableData::rows() const {
  // @@protoc_insertion_point(field_list:turi.visualization.pipe.TableData.rows)
  return rows_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace pipe
}  // namespace visualization
}  // namespace turi

// @@protoc_insertion_point(global_scope)
