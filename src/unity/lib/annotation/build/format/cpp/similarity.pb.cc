// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: similarity.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "similarity.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace TuriCreate {
namespace Annotation {
namespace Specification {
class SimilarityDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Similarity> {
} _Similarity_default_instance_;

namespace protobuf_similarity_2eproto {

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
};


void TableStruct::Shutdown() {
  _Similarity_default_instance_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::TuriCreate::Annotation::Specification::protobuf_data_2eproto::InitDefaults();
  _Similarity_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::TuriCreate::Annotation::Specification::protobuf_data_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER

}  // namespace protobuf_similarity_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Similarity::kRowIndexFieldNumber;
const int Similarity::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Similarity::Similarity()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_similarity_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:TuriCreate.Annotation.Specification.Similarity)
}
Similarity::Similarity(const Similarity& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      data_(from.data_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rowindex_ = from.rowindex_;
  // @@protoc_insertion_point(copy_constructor:TuriCreate.Annotation.Specification.Similarity)
}

void Similarity::SharedCtor() {
  rowindex_ = GOOGLE_LONGLONG(0);
  _cached_size_ = 0;
}

Similarity::~Similarity() {
  // @@protoc_insertion_point(destructor:TuriCreate.Annotation.Specification.Similarity)
  SharedDtor();
}

void Similarity::SharedDtor() {
}

void Similarity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Similarity& Similarity::default_instance() {
  protobuf_similarity_2eproto::InitDefaults();
  return *internal_default_instance();
}

Similarity* Similarity::New(::google::protobuf::Arena* arena) const {
  Similarity* n = new Similarity;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Similarity::Clear() {
// @@protoc_insertion_point(message_clear_start:TuriCreate.Annotation.Specification.Similarity)
  data_.Clear();
  rowindex_ = GOOGLE_LONGLONG(0);
}

bool Similarity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TuriCreate.Annotation.Specification.Similarity)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 rowIndex = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &rowindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .TuriCreate.Annotation.Specification.Datum data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TuriCreate.Annotation.Specification.Similarity)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TuriCreate.Annotation.Specification.Similarity)
  return false;
#undef DO_
}

void Similarity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TuriCreate.Annotation.Specification.Similarity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 rowIndex = 1;
  if (this->rowindex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->rowindex(), output);
  }

  // repeated .TuriCreate.Annotation.Specification.Datum data = 2;
  for (unsigned int i = 0, n = this->data_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->data(i), output);
  }

  // @@protoc_insertion_point(serialize_end:TuriCreate.Annotation.Specification.Similarity)
}

size_t Similarity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TuriCreate.Annotation.Specification.Similarity)
  size_t total_size = 0;

  // repeated .TuriCreate.Annotation.Specification.Datum data = 2;
  {
    unsigned int count = this->data_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data(i));
    }
  }

  // int64 rowIndex = 1;
  if (this->rowindex() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->rowindex());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Similarity::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Similarity*>(&from));
}

void Similarity::MergeFrom(const Similarity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TuriCreate.Annotation.Specification.Similarity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  if (from.rowindex() != 0) {
    set_rowindex(from.rowindex());
  }
}

void Similarity::CopyFrom(const Similarity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TuriCreate.Annotation.Specification.Similarity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Similarity::IsInitialized() const {
  return true;
}

void Similarity::Swap(Similarity* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Similarity::InternalSwap(Similarity* other) {
  data_.InternalSwap(&other->data_);
  std::swap(rowindex_, other->rowindex_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Similarity::GetTypeName() const {
  return "TuriCreate.Annotation.Specification.Similarity";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Similarity

// int64 rowIndex = 1;
void Similarity::clear_rowindex() {
  rowindex_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 Similarity::rowindex() const {
  // @@protoc_insertion_point(field_get:TuriCreate.Annotation.Specification.Similarity.rowIndex)
  return rowindex_;
}
void Similarity::set_rowindex(::google::protobuf::int64 value) {
  
  rowindex_ = value;
  // @@protoc_insertion_point(field_set:TuriCreate.Annotation.Specification.Similarity.rowIndex)
}

// repeated .TuriCreate.Annotation.Specification.Datum data = 2;
int Similarity::data_size() const {
  return data_.size();
}
void Similarity::clear_data() {
  data_.Clear();
}
const ::TuriCreate::Annotation::Specification::Datum& Similarity::data(int index) const {
  // @@protoc_insertion_point(field_get:TuriCreate.Annotation.Specification.Similarity.data)
  return data_.Get(index);
}
::TuriCreate::Annotation::Specification::Datum* Similarity::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:TuriCreate.Annotation.Specification.Similarity.data)
  return data_.Mutable(index);
}
::TuriCreate::Annotation::Specification::Datum* Similarity::add_data() {
  // @@protoc_insertion_point(field_add:TuriCreate.Annotation.Specification.Similarity.data)
  return data_.Add();
}
::google::protobuf::RepeatedPtrField< ::TuriCreate::Annotation::Specification::Datum >*
Similarity::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:TuriCreate.Annotation.Specification.Similarity.data)
  return &data_;
}
const ::google::protobuf::RepeatedPtrField< ::TuriCreate::Annotation::Specification::Datum >&
Similarity::data() const {
  // @@protoc_insertion_point(field_list:TuriCreate.Annotation.Specification.Similarity.data)
  return data_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Specification
}  // namespace Annotation
}  // namespace TuriCreate

// @@protoc_insertion_point(global_scope)
