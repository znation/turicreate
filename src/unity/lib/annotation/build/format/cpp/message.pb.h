// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#ifndef PROTOBUF_message_2eproto__INCLUDED
#define PROTOBUF_message_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "annotate.pb.h"  // IWYU pragma: export
#include "data.pb.h"  // IWYU pragma: export
#include "meta.pb.h"  // IWYU pragma: export
// @@protoc_insertion_point(includes)
namespace TuriCreate {
namespace Annotation {
namespace Specification {
class ActivityClassificationLabel;
class ActivityClassificationLabelDefaultTypeInternal;
extern ActivityClassificationLabelDefaultTypeInternal _ActivityClassificationLabel_default_instance_;
class ActivityClassificationMeta;
class ActivityClassificationMetaDefaultTypeInternal;
extern ActivityClassificationMetaDefaultTypeInternal _ActivityClassificationMeta_default_instance_;
class Annotation;
class AnnotationDefaultTypeInternal;
extern AnnotationDefaultTypeInternal _Annotation_default_instance_;
class Annotations;
class AnnotationsDefaultTypeInternal;
extern AnnotationsDefaultTypeInternal _Annotations_default_instance_;
class AudioClassificationLabel;
class AudioClassificationLabelDefaultTypeInternal;
extern AudioClassificationLabelDefaultTypeInternal _AudioClassificationLabel_default_instance_;
class AudioClassificationMeta;
class AudioClassificationMetaDefaultTypeInternal;
extern AudioClassificationMetaDefaultTypeInternal _AudioClassificationMeta_default_instance_;
class ClientRequest;
class ClientRequestDefaultTypeInternal;
extern ClientRequestDefaultTypeInternal _ClientRequest_default_instance_;
class Data;
class DataDefaultTypeInternal;
extern DataDefaultTypeInternal _Data_default_instance_;
class DataGetter;
class DataGetterDefaultTypeInternal;
extern DataGetterDefaultTypeInternal _DataGetter_default_instance_;
class Datum;
class DatumDefaultTypeInternal;
extern DatumDefaultTypeInternal _Datum_default_instance_;
class DrawingClassificationLabel;
class DrawingClassificationLabelDefaultTypeInternal;
extern DrawingClassificationLabelDefaultTypeInternal _DrawingClassificationLabel_default_instance_;
class DrawingClassificationMeta;
class DrawingClassificationMetaDefaultTypeInternal;
extern DrawingClassificationMetaDefaultTypeInternal _DrawingClassificationMeta_default_instance_;
class ImageClassificationLabel;
class ImageClassificationLabelDefaultTypeInternal;
extern ImageClassificationLabelDefaultTypeInternal _ImageClassificationLabel_default_instance_;
class ImageClassificationMeta;
class ImageClassificationMetaDefaultTypeInternal;
extern ImageClassificationMetaDefaultTypeInternal _ImageClassificationMeta_default_instance_;
class ImageDatum;
class ImageDatumDefaultTypeInternal;
extern ImageDatumDefaultTypeInternal _ImageDatum_default_instance_;
class Label;
class LabelDefaultTypeInternal;
extern LabelDefaultTypeInternal _Label_default_instance_;
class MetaData;
class MetaDataDefaultTypeInternal;
extern MetaDataDefaultTypeInternal _MetaData_default_instance_;
class MetaLabel;
class MetaLabelDefaultTypeInternal;
extern MetaLabelDefaultTypeInternal _MetaLabel_default_instance_;
class ObjectDetectionLabel;
class ObjectDetectionLabelDefaultTypeInternal;
extern ObjectDetectionLabelDefaultTypeInternal _ObjectDetectionLabel_default_instance_;
class ObjectDetectionMeta;
class ObjectDetectionMetaDefaultTypeInternal;
extern ObjectDetectionMetaDefaultTypeInternal _ObjectDetectionMeta_default_instance_;
class Parcel;
class ParcelDefaultTypeInternal;
extern ParcelDefaultTypeInternal _Parcel_default_instance_;
class TextDatum;
class TextDatumDefaultTypeInternal;
extern TextDatumDefaultTypeInternal _TextDatum_default_instance_;
}  // namespace Specification
}  // namespace Annotation
}  // namespace TuriCreate

namespace TuriCreate {
namespace Annotation {
namespace Specification {

namespace protobuf_message_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_message_2eproto

// ===================================================================

class Parcel : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:TuriCreate.Annotation.Specification.Parcel) */ {
 public:
  Parcel();
  virtual ~Parcel();

  Parcel(const Parcel& from);

  inline Parcel& operator=(const Parcel& from) {
    CopyFrom(from);
    return *this;
  }

  static const Parcel& default_instance();

  enum MessageCase {
    kAnnotations = 1,
    kData = 2,
    kMetadata = 3,
    MESSAGE_NOT_SET = 0,
  };

  static inline const Parcel* internal_default_instance() {
    return reinterpret_cast<const Parcel*>(
               &_Parcel_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Parcel* other);

  // implements Message ----------------------------------------------

  inline Parcel* New() const PROTOBUF_FINAL { return New(NULL); }

  Parcel* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const Parcel& from);
  void MergeFrom(const Parcel& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Parcel* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .TuriCreate.Annotation.Specification.Annotations annotations = 1;
  bool has_annotations() const;
  void clear_annotations();
  static const int kAnnotationsFieldNumber = 1;
  const ::TuriCreate::Annotation::Specification::Annotations& annotations() const;
  ::TuriCreate::Annotation::Specification::Annotations* mutable_annotations();
  ::TuriCreate::Annotation::Specification::Annotations* release_annotations();
  void set_allocated_annotations(::TuriCreate::Annotation::Specification::Annotations* annotations);

  // .TuriCreate.Annotation.Specification.Data data = 2;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::TuriCreate::Annotation::Specification::Data& data() const;
  ::TuriCreate::Annotation::Specification::Data* mutable_data();
  ::TuriCreate::Annotation::Specification::Data* release_data();
  void set_allocated_data(::TuriCreate::Annotation::Specification::Data* data);

  // .TuriCreate.Annotation.Specification.MetaData metadata = 3;
  bool has_metadata() const;
  void clear_metadata();
  static const int kMetadataFieldNumber = 3;
  const ::TuriCreate::Annotation::Specification::MetaData& metadata() const;
  ::TuriCreate::Annotation::Specification::MetaData* mutable_metadata();
  ::TuriCreate::Annotation::Specification::MetaData* release_metadata();
  void set_allocated_metadata(::TuriCreate::Annotation::Specification::MetaData* metadata);

  MessageCase Message_case() const;
  // @@protoc_insertion_point(class_scope:TuriCreate.Annotation.Specification.Parcel)
 private:
  void set_has_annotations();
  void set_has_data();
  void set_has_metadata();

  inline bool has_Message() const;
  void clear_Message();
  inline void clear_has_Message();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  union MessageUnion {
    MessageUnion() {}
    ::TuriCreate::Annotation::Specification::Annotations* annotations_;
    ::TuriCreate::Annotation::Specification::Data* data_;
    ::TuriCreate::Annotation::Specification::MetaData* metadata_;
  } Message_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct protobuf_message_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ClientRequest : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:TuriCreate.Annotation.Specification.ClientRequest) */ {
 public:
  ClientRequest();
  virtual ~ClientRequest();

  ClientRequest(const ClientRequest& from);

  inline ClientRequest& operator=(const ClientRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ClientRequest& default_instance();

  enum TypeCase {
    kGetter = 1,
    kAnnotations = 2,
    TYPE_NOT_SET = 0,
  };

  static inline const ClientRequest* internal_default_instance() {
    return reinterpret_cast<const ClientRequest*>(
               &_ClientRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(ClientRequest* other);

  // implements Message ----------------------------------------------

  inline ClientRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  ClientRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const ClientRequest& from);
  void MergeFrom(const ClientRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClientRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .TuriCreate.Annotation.Specification.DataGetter getter = 1;
  bool has_getter() const;
  void clear_getter();
  static const int kGetterFieldNumber = 1;
  const ::TuriCreate::Annotation::Specification::DataGetter& getter() const;
  ::TuriCreate::Annotation::Specification::DataGetter* mutable_getter();
  ::TuriCreate::Annotation::Specification::DataGetter* release_getter();
  void set_allocated_getter(::TuriCreate::Annotation::Specification::DataGetter* getter);

  // .TuriCreate.Annotation.Specification.Annotations annotations = 2;
  bool has_annotations() const;
  void clear_annotations();
  static const int kAnnotationsFieldNumber = 2;
  const ::TuriCreate::Annotation::Specification::Annotations& annotations() const;
  ::TuriCreate::Annotation::Specification::Annotations* mutable_annotations();
  ::TuriCreate::Annotation::Specification::Annotations* release_annotations();
  void set_allocated_annotations(::TuriCreate::Annotation::Specification::Annotations* annotations);

  TypeCase Type_case() const;
  // @@protoc_insertion_point(class_scope:TuriCreate.Annotation.Specification.ClientRequest)
 private:
  void set_has_getter();
  void set_has_annotations();

  inline bool has_Type() const;
  void clear_Type();
  inline void clear_has_Type();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  union TypeUnion {
    TypeUnion() {}
    ::TuriCreate::Annotation::Specification::DataGetter* getter_;
    ::TuriCreate::Annotation::Specification::Annotations* annotations_;
  } Type_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct protobuf_message_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Parcel

// .TuriCreate.Annotation.Specification.Annotations annotations = 1;
inline bool Parcel::has_annotations() const {
  return Message_case() == kAnnotations;
}
inline void Parcel::set_has_annotations() {
  _oneof_case_[0] = kAnnotations;
}
inline void Parcel::clear_annotations() {
  if (has_annotations()) {
    delete Message_.annotations_;
    clear_has_Message();
  }
}
inline  const ::TuriCreate::Annotation::Specification::Annotations& Parcel::annotations() const {
  // @@protoc_insertion_point(field_get:TuriCreate.Annotation.Specification.Parcel.annotations)
  return has_annotations()
      ? *Message_.annotations_
      : ::TuriCreate::Annotation::Specification::Annotations::default_instance();
}
inline ::TuriCreate::Annotation::Specification::Annotations* Parcel::mutable_annotations() {
  if (!has_annotations()) {
    clear_Message();
    set_has_annotations();
    Message_.annotations_ = new ::TuriCreate::Annotation::Specification::Annotations;
  }
  // @@protoc_insertion_point(field_mutable:TuriCreate.Annotation.Specification.Parcel.annotations)
  return Message_.annotations_;
}
inline ::TuriCreate::Annotation::Specification::Annotations* Parcel::release_annotations() {
  // @@protoc_insertion_point(field_release:TuriCreate.Annotation.Specification.Parcel.annotations)
  if (has_annotations()) {
    clear_has_Message();
    ::TuriCreate::Annotation::Specification::Annotations* temp = Message_.annotations_;
    Message_.annotations_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Parcel::set_allocated_annotations(::TuriCreate::Annotation::Specification::Annotations* annotations) {
  clear_Message();
  if (annotations) {
    set_has_annotations();
    Message_.annotations_ = annotations;
  }
  // @@protoc_insertion_point(field_set_allocated:TuriCreate.Annotation.Specification.Parcel.annotations)
}

// .TuriCreate.Annotation.Specification.Data data = 2;
inline bool Parcel::has_data() const {
  return Message_case() == kData;
}
inline void Parcel::set_has_data() {
  _oneof_case_[0] = kData;
}
inline void Parcel::clear_data() {
  if (has_data()) {
    delete Message_.data_;
    clear_has_Message();
  }
}
inline  const ::TuriCreate::Annotation::Specification::Data& Parcel::data() const {
  // @@protoc_insertion_point(field_get:TuriCreate.Annotation.Specification.Parcel.data)
  return has_data()
      ? *Message_.data_
      : ::TuriCreate::Annotation::Specification::Data::default_instance();
}
inline ::TuriCreate::Annotation::Specification::Data* Parcel::mutable_data() {
  if (!has_data()) {
    clear_Message();
    set_has_data();
    Message_.data_ = new ::TuriCreate::Annotation::Specification::Data;
  }
  // @@protoc_insertion_point(field_mutable:TuriCreate.Annotation.Specification.Parcel.data)
  return Message_.data_;
}
inline ::TuriCreate::Annotation::Specification::Data* Parcel::release_data() {
  // @@protoc_insertion_point(field_release:TuriCreate.Annotation.Specification.Parcel.data)
  if (has_data()) {
    clear_has_Message();
    ::TuriCreate::Annotation::Specification::Data* temp = Message_.data_;
    Message_.data_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Parcel::set_allocated_data(::TuriCreate::Annotation::Specification::Data* data) {
  clear_Message();
  if (data) {
    set_has_data();
    Message_.data_ = data;
  }
  // @@protoc_insertion_point(field_set_allocated:TuriCreate.Annotation.Specification.Parcel.data)
}

// .TuriCreate.Annotation.Specification.MetaData metadata = 3;
inline bool Parcel::has_metadata() const {
  return Message_case() == kMetadata;
}
inline void Parcel::set_has_metadata() {
  _oneof_case_[0] = kMetadata;
}
inline void Parcel::clear_metadata() {
  if (has_metadata()) {
    delete Message_.metadata_;
    clear_has_Message();
  }
}
inline  const ::TuriCreate::Annotation::Specification::MetaData& Parcel::metadata() const {
  // @@protoc_insertion_point(field_get:TuriCreate.Annotation.Specification.Parcel.metadata)
  return has_metadata()
      ? *Message_.metadata_
      : ::TuriCreate::Annotation::Specification::MetaData::default_instance();
}
inline ::TuriCreate::Annotation::Specification::MetaData* Parcel::mutable_metadata() {
  if (!has_metadata()) {
    clear_Message();
    set_has_metadata();
    Message_.metadata_ = new ::TuriCreate::Annotation::Specification::MetaData;
  }
  // @@protoc_insertion_point(field_mutable:TuriCreate.Annotation.Specification.Parcel.metadata)
  return Message_.metadata_;
}
inline ::TuriCreate::Annotation::Specification::MetaData* Parcel::release_metadata() {
  // @@protoc_insertion_point(field_release:TuriCreate.Annotation.Specification.Parcel.metadata)
  if (has_metadata()) {
    clear_has_Message();
    ::TuriCreate::Annotation::Specification::MetaData* temp = Message_.metadata_;
    Message_.metadata_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Parcel::set_allocated_metadata(::TuriCreate::Annotation::Specification::MetaData* metadata) {
  clear_Message();
  if (metadata) {
    set_has_metadata();
    Message_.metadata_ = metadata;
  }
  // @@protoc_insertion_point(field_set_allocated:TuriCreate.Annotation.Specification.Parcel.metadata)
}

inline bool Parcel::has_Message() const {
  return Message_case() != MESSAGE_NOT_SET;
}
inline void Parcel::clear_has_Message() {
  _oneof_case_[0] = MESSAGE_NOT_SET;
}
inline Parcel::MessageCase Parcel::Message_case() const {
  return Parcel::MessageCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ClientRequest

// .TuriCreate.Annotation.Specification.DataGetter getter = 1;
inline bool ClientRequest::has_getter() const {
  return Type_case() == kGetter;
}
inline void ClientRequest::set_has_getter() {
  _oneof_case_[0] = kGetter;
}
inline void ClientRequest::clear_getter() {
  if (has_getter()) {
    delete Type_.getter_;
    clear_has_Type();
  }
}
inline  const ::TuriCreate::Annotation::Specification::DataGetter& ClientRequest::getter() const {
  // @@protoc_insertion_point(field_get:TuriCreate.Annotation.Specification.ClientRequest.getter)
  return has_getter()
      ? *Type_.getter_
      : ::TuriCreate::Annotation::Specification::DataGetter::default_instance();
}
inline ::TuriCreate::Annotation::Specification::DataGetter* ClientRequest::mutable_getter() {
  if (!has_getter()) {
    clear_Type();
    set_has_getter();
    Type_.getter_ = new ::TuriCreate::Annotation::Specification::DataGetter;
  }
  // @@protoc_insertion_point(field_mutable:TuriCreate.Annotation.Specification.ClientRequest.getter)
  return Type_.getter_;
}
inline ::TuriCreate::Annotation::Specification::DataGetter* ClientRequest::release_getter() {
  // @@protoc_insertion_point(field_release:TuriCreate.Annotation.Specification.ClientRequest.getter)
  if (has_getter()) {
    clear_has_Type();
    ::TuriCreate::Annotation::Specification::DataGetter* temp = Type_.getter_;
    Type_.getter_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void ClientRequest::set_allocated_getter(::TuriCreate::Annotation::Specification::DataGetter* getter) {
  clear_Type();
  if (getter) {
    set_has_getter();
    Type_.getter_ = getter;
  }
  // @@protoc_insertion_point(field_set_allocated:TuriCreate.Annotation.Specification.ClientRequest.getter)
}

// .TuriCreate.Annotation.Specification.Annotations annotations = 2;
inline bool ClientRequest::has_annotations() const {
  return Type_case() == kAnnotations;
}
inline void ClientRequest::set_has_annotations() {
  _oneof_case_[0] = kAnnotations;
}
inline void ClientRequest::clear_annotations() {
  if (has_annotations()) {
    delete Type_.annotations_;
    clear_has_Type();
  }
}
inline  const ::TuriCreate::Annotation::Specification::Annotations& ClientRequest::annotations() const {
  // @@protoc_insertion_point(field_get:TuriCreate.Annotation.Specification.ClientRequest.annotations)
  return has_annotations()
      ? *Type_.annotations_
      : ::TuriCreate::Annotation::Specification::Annotations::default_instance();
}
inline ::TuriCreate::Annotation::Specification::Annotations* ClientRequest::mutable_annotations() {
  if (!has_annotations()) {
    clear_Type();
    set_has_annotations();
    Type_.annotations_ = new ::TuriCreate::Annotation::Specification::Annotations;
  }
  // @@protoc_insertion_point(field_mutable:TuriCreate.Annotation.Specification.ClientRequest.annotations)
  return Type_.annotations_;
}
inline ::TuriCreate::Annotation::Specification::Annotations* ClientRequest::release_annotations() {
  // @@protoc_insertion_point(field_release:TuriCreate.Annotation.Specification.ClientRequest.annotations)
  if (has_annotations()) {
    clear_has_Type();
    ::TuriCreate::Annotation::Specification::Annotations* temp = Type_.annotations_;
    Type_.annotations_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void ClientRequest::set_allocated_annotations(::TuriCreate::Annotation::Specification::Annotations* annotations) {
  clear_Type();
  if (annotations) {
    set_has_annotations();
    Type_.annotations_ = annotations;
  }
  // @@protoc_insertion_point(field_set_allocated:TuriCreate.Annotation.Specification.ClientRequest.annotations)
}

inline bool ClientRequest::has_Type() const {
  return Type_case() != TYPE_NOT_SET;
}
inline void ClientRequest::clear_has_Type() {
  _oneof_case_[0] = TYPE_NOT_SET;
}
inline ClientRequest::TypeCase ClientRequest::Type_case() const {
  return ClientRequest::TypeCase(_oneof_case_[0]);
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace Specification
}  // namespace Annotation
}  // namespace TuriCreate

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_message_2eproto__INCLUDED
