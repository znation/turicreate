// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: data.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "data.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace TuriCreate {
namespace Annotation {
namespace Specification {
class ImageDatumDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ImageDatum> {
} _ImageDatum_default_instance_;
class TextDatumDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TextDatum> {
} _TextDatum_default_instance_;
class DatumDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Datum> {
} _Datum_default_instance_;
class DataGetterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DataGetter> {
} _DataGetter_default_instance_;
class DataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Data> {
} _Data_default_instance_;

namespace protobuf_data_2eproto {

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};


void TableStruct::Shutdown() {
  _ImageDatum_default_instance_.Shutdown();
  _TextDatum_default_instance_.Shutdown();
  _Datum_default_instance_.Shutdown();
  _DataGetter_default_instance_.Shutdown();
  _Data_default_instance_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _ImageDatum_default_instance_.DefaultConstruct();
  _TextDatum_default_instance_.DefaultConstruct();
  _Datum_default_instance_.DefaultConstruct();
  _DataGetter_default_instance_.DefaultConstruct();
  _Data_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER

}  // namespace protobuf_data_2eproto

bool ImageDatum_Format_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ImageDatum_Format ImageDatum::JPG;
const ImageDatum_Format ImageDatum::PNG;
const ImageDatum_Format ImageDatum::RAW_ARRAY;
const ImageDatum_Format ImageDatum::UNDEFINED;
const ImageDatum_Format ImageDatum::Format_MIN;
const ImageDatum_Format ImageDatum::Format_MAX;
const int ImageDatum::Format_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool DataGetter_GetterType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DataGetter_GetterType DataGetter::DATA;
const DataGetter_GetterType DataGetter::ANNOTATIONS;
const DataGetter_GetterType DataGetter::GetterType_MIN;
const DataGetter_GetterType DataGetter::GetterType_MAX;
const int DataGetter::GetterType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImageDatum::kWidthFieldNumber;
const int ImageDatum::kHeightFieldNumber;
const int ImageDatum::kChannelsFieldNumber;
const int ImageDatum::kTypeFieldNumber;
const int ImageDatum::kImgDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImageDatum::ImageDatum()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_data_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:TuriCreate.Annotation.Specification.ImageDatum)
}
ImageDatum::ImageDatum(const ImageDatum& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  imgdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.imgdata().size() > 0) {
    imgdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.imgdata_);
  }
  ::memcpy(&width_, &from.width_,
    reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&width_) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:TuriCreate.Annotation.Specification.ImageDatum)
}

void ImageDatum::SharedCtor() {
  imgdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&width_, 0, reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&width_) + sizeof(type_));
  _cached_size_ = 0;
}

ImageDatum::~ImageDatum() {
  // @@protoc_insertion_point(destructor:TuriCreate.Annotation.Specification.ImageDatum)
  SharedDtor();
}

void ImageDatum::SharedDtor() {
  imgdata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ImageDatum::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ImageDatum& ImageDatum::default_instance() {
  protobuf_data_2eproto::InitDefaults();
  return *internal_default_instance();
}

ImageDatum* ImageDatum::New(::google::protobuf::Arena* arena) const {
  ImageDatum* n = new ImageDatum;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ImageDatum::Clear() {
// @@protoc_insertion_point(message_clear_start:TuriCreate.Annotation.Specification.ImageDatum)
  imgdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&width_, 0, reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&width_) + sizeof(type_));
}

bool ImageDatum::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TuriCreate.Annotation.Specification.ImageDatum)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 width = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 height = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 channels = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channels_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .TuriCreate.Annotation.Specification.ImageDatum.Format type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::TuriCreate::Annotation::Specification::ImageDatum_Format >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string imgData = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_imgdata()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->imgdata().data(), this->imgdata().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TuriCreate.Annotation.Specification.ImageDatum.imgData"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TuriCreate.Annotation.Specification.ImageDatum)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TuriCreate.Annotation.Specification.ImageDatum)
  return false;
#undef DO_
}

void ImageDatum::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TuriCreate.Annotation.Specification.ImageDatum)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 width = 1;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->width(), output);
  }

  // int32 height = 2;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->height(), output);
  }

  // int32 channels = 3;
  if (this->channels() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->channels(), output);
  }

  // .TuriCreate.Annotation.Specification.ImageDatum.Format type = 4;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->type(), output);
  }

  // string imgData = 10;
  if (this->imgdata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->imgdata().data(), this->imgdata().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TuriCreate.Annotation.Specification.ImageDatum.imgData");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->imgdata(), output);
  }

  // @@protoc_insertion_point(serialize_end:TuriCreate.Annotation.Specification.ImageDatum)
}

size_t ImageDatum::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TuriCreate.Annotation.Specification.ImageDatum)
  size_t total_size = 0;

  // string imgData = 10;
  if (this->imgdata().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->imgdata());
  }

  // int32 width = 1;
  if (this->width() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->width());
  }

  // int32 height = 2;
  if (this->height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->height());
  }

  // int32 channels = 3;
  if (this->channels() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->channels());
  }

  // .TuriCreate.Annotation.Specification.ImageDatum.Format type = 4;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImageDatum::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ImageDatum*>(&from));
}

void ImageDatum::MergeFrom(const ImageDatum& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TuriCreate.Annotation.Specification.ImageDatum)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.imgdata().size() > 0) {

    imgdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.imgdata_);
  }
  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
  if (from.channels() != 0) {
    set_channels(from.channels());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void ImageDatum::CopyFrom(const ImageDatum& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TuriCreate.Annotation.Specification.ImageDatum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageDatum::IsInitialized() const {
  return true;
}

void ImageDatum::Swap(ImageDatum* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ImageDatum::InternalSwap(ImageDatum* other) {
  imgdata_.Swap(&other->imgdata_);
  std::swap(width_, other->width_);
  std::swap(height_, other->height_);
  std::swap(channels_, other->channels_);
  std::swap(type_, other->type_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ImageDatum::GetTypeName() const {
  return "TuriCreate.Annotation.Specification.ImageDatum";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ImageDatum

// int32 width = 1;
void ImageDatum::clear_width() {
  width_ = 0;
}
::google::protobuf::int32 ImageDatum::width() const {
  // @@protoc_insertion_point(field_get:TuriCreate.Annotation.Specification.ImageDatum.width)
  return width_;
}
void ImageDatum::set_width(::google::protobuf::int32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:TuriCreate.Annotation.Specification.ImageDatum.width)
}

// int32 height = 2;
void ImageDatum::clear_height() {
  height_ = 0;
}
::google::protobuf::int32 ImageDatum::height() const {
  // @@protoc_insertion_point(field_get:TuriCreate.Annotation.Specification.ImageDatum.height)
  return height_;
}
void ImageDatum::set_height(::google::protobuf::int32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:TuriCreate.Annotation.Specification.ImageDatum.height)
}

// int32 channels = 3;
void ImageDatum::clear_channels() {
  channels_ = 0;
}
::google::protobuf::int32 ImageDatum::channels() const {
  // @@protoc_insertion_point(field_get:TuriCreate.Annotation.Specification.ImageDatum.channels)
  return channels_;
}
void ImageDatum::set_channels(::google::protobuf::int32 value) {
  
  channels_ = value;
  // @@protoc_insertion_point(field_set:TuriCreate.Annotation.Specification.ImageDatum.channels)
}

// .TuriCreate.Annotation.Specification.ImageDatum.Format type = 4;
void ImageDatum::clear_type() {
  type_ = 0;
}
::TuriCreate::Annotation::Specification::ImageDatum_Format ImageDatum::type() const {
  // @@protoc_insertion_point(field_get:TuriCreate.Annotation.Specification.ImageDatum.type)
  return static_cast< ::TuriCreate::Annotation::Specification::ImageDatum_Format >(type_);
}
void ImageDatum::set_type(::TuriCreate::Annotation::Specification::ImageDatum_Format value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:TuriCreate.Annotation.Specification.ImageDatum.type)
}

// string imgData = 10;
void ImageDatum::clear_imgdata() {
  imgdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ImageDatum::imgdata() const {
  // @@protoc_insertion_point(field_get:TuriCreate.Annotation.Specification.ImageDatum.imgData)
  return imgdata_.GetNoArena();
}
void ImageDatum::set_imgdata(const ::std::string& value) {
  
  imgdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TuriCreate.Annotation.Specification.ImageDatum.imgData)
}
#if LANG_CXX11
void ImageDatum::set_imgdata(::std::string&& value) {
  
  imgdata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TuriCreate.Annotation.Specification.ImageDatum.imgData)
}
#endif
void ImageDatum::set_imgdata(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  imgdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TuriCreate.Annotation.Specification.ImageDatum.imgData)
}
void ImageDatum::set_imgdata(const char* value, size_t size) {
  
  imgdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TuriCreate.Annotation.Specification.ImageDatum.imgData)
}
::std::string* ImageDatum::mutable_imgdata() {
  
  // @@protoc_insertion_point(field_mutable:TuriCreate.Annotation.Specification.ImageDatum.imgData)
  return imgdata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ImageDatum::release_imgdata() {
  // @@protoc_insertion_point(field_release:TuriCreate.Annotation.Specification.ImageDatum.imgData)
  
  return imgdata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ImageDatum::set_allocated_imgdata(::std::string* imgdata) {
  if (imgdata != NULL) {
    
  } else {
    
  }
  imgdata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), imgdata);
  // @@protoc_insertion_point(field_set_allocated:TuriCreate.Annotation.Specification.ImageDatum.imgData)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TextDatum::kTextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TextDatum::TextDatum()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_data_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:TuriCreate.Annotation.Specification.TextDatum)
}
TextDatum::TextDatum(const TextDatum& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.text().size() > 0) {
    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  // @@protoc_insertion_point(copy_constructor:TuriCreate.Annotation.Specification.TextDatum)
}

void TextDatum::SharedCtor() {
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

TextDatum::~TextDatum() {
  // @@protoc_insertion_point(destructor:TuriCreate.Annotation.Specification.TextDatum)
  SharedDtor();
}

void TextDatum::SharedDtor() {
  text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TextDatum::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TextDatum& TextDatum::default_instance() {
  protobuf_data_2eproto::InitDefaults();
  return *internal_default_instance();
}

TextDatum* TextDatum::New(::google::protobuf::Arena* arena) const {
  TextDatum* n = new TextDatum;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TextDatum::Clear() {
// @@protoc_insertion_point(message_clear_start:TuriCreate.Annotation.Specification.TextDatum)
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool TextDatum::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TuriCreate.Annotation.Specification.TextDatum)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string text = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TuriCreate.Annotation.Specification.TextDatum.text"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TuriCreate.Annotation.Specification.TextDatum)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TuriCreate.Annotation.Specification.TextDatum)
  return false;
#undef DO_
}

void TextDatum::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TuriCreate.Annotation.Specification.TextDatum)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string text = 1;
  if (this->text().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TuriCreate.Annotation.Specification.TextDatum.text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->text(), output);
  }

  // @@protoc_insertion_point(serialize_end:TuriCreate.Annotation.Specification.TextDatum)
}

size_t TextDatum::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TuriCreate.Annotation.Specification.TextDatum)
  size_t total_size = 0;

  // string text = 1;
  if (this->text().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->text());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TextDatum::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TextDatum*>(&from));
}

void TextDatum::MergeFrom(const TextDatum& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TuriCreate.Annotation.Specification.TextDatum)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.text().size() > 0) {

    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
}

void TextDatum::CopyFrom(const TextDatum& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TuriCreate.Annotation.Specification.TextDatum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TextDatum::IsInitialized() const {
  return true;
}

void TextDatum::Swap(TextDatum* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TextDatum::InternalSwap(TextDatum* other) {
  text_.Swap(&other->text_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string TextDatum::GetTypeName() const {
  return "TuriCreate.Annotation.Specification.TextDatum";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TextDatum

// string text = 1;
void TextDatum::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TextDatum::text() const {
  // @@protoc_insertion_point(field_get:TuriCreate.Annotation.Specification.TextDatum.text)
  return text_.GetNoArena();
}
void TextDatum::set_text(const ::std::string& value) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TuriCreate.Annotation.Specification.TextDatum.text)
}
#if LANG_CXX11
void TextDatum::set_text(::std::string&& value) {
  
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TuriCreate.Annotation.Specification.TextDatum.text)
}
#endif
void TextDatum::set_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TuriCreate.Annotation.Specification.TextDatum.text)
}
void TextDatum::set_text(const char* value, size_t size) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TuriCreate.Annotation.Specification.TextDatum.text)
}
::std::string* TextDatum::mutable_text() {
  
  // @@protoc_insertion_point(field_mutable:TuriCreate.Annotation.Specification.TextDatum.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TextDatum::release_text() {
  // @@protoc_insertion_point(field_release:TuriCreate.Annotation.Specification.TextDatum.text)
  
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TextDatum::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    
  } else {
    
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:TuriCreate.Annotation.Specification.TextDatum.text)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Datum::kRowIndexFieldNumber;
const int Datum::kImagesFieldNumber;
const int Datum::kTextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Datum::Datum()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_data_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:TuriCreate.Annotation.Specification.Datum)
}
Datum::Datum(const Datum& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      images_(from.images_),
      text_(from.text_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rowindex_ = from.rowindex_;
  // @@protoc_insertion_point(copy_constructor:TuriCreate.Annotation.Specification.Datum)
}

void Datum::SharedCtor() {
  rowindex_ = GOOGLE_LONGLONG(0);
  _cached_size_ = 0;
}

Datum::~Datum() {
  // @@protoc_insertion_point(destructor:TuriCreate.Annotation.Specification.Datum)
  SharedDtor();
}

void Datum::SharedDtor() {
}

void Datum::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Datum& Datum::default_instance() {
  protobuf_data_2eproto::InitDefaults();
  return *internal_default_instance();
}

Datum* Datum::New(::google::protobuf::Arena* arena) const {
  Datum* n = new Datum;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Datum::Clear() {
// @@protoc_insertion_point(message_clear_start:TuriCreate.Annotation.Specification.Datum)
  images_.Clear();
  text_.Clear();
  rowindex_ = GOOGLE_LONGLONG(0);
}

bool Datum::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TuriCreate.Annotation.Specification.Datum)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 rowIndex = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &rowindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .TuriCreate.Annotation.Specification.ImageDatum images = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_images()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .TuriCreate.Annotation.Specification.TextDatum text = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_text()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TuriCreate.Annotation.Specification.Datum)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TuriCreate.Annotation.Specification.Datum)
  return false;
#undef DO_
}

void Datum::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TuriCreate.Annotation.Specification.Datum)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 rowIndex = 1;
  if (this->rowindex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->rowindex(), output);
  }

  // repeated .TuriCreate.Annotation.Specification.ImageDatum images = 10;
  for (unsigned int i = 0, n = this->images_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      10, this->images(i), output);
  }

  // repeated .TuriCreate.Annotation.Specification.TextDatum text = 20;
  for (unsigned int i = 0, n = this->text_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      20, this->text(i), output);
  }

  // @@protoc_insertion_point(serialize_end:TuriCreate.Annotation.Specification.Datum)
}

size_t Datum::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TuriCreate.Annotation.Specification.Datum)
  size_t total_size = 0;

  // repeated .TuriCreate.Annotation.Specification.ImageDatum images = 10;
  {
    unsigned int count = this->images_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->images(i));
    }
  }

  // repeated .TuriCreate.Annotation.Specification.TextDatum text = 20;
  {
    unsigned int count = this->text_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->text(i));
    }
  }

  // int64 rowIndex = 1;
  if (this->rowindex() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->rowindex());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Datum::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Datum*>(&from));
}

void Datum::MergeFrom(const Datum& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TuriCreate.Annotation.Specification.Datum)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  images_.MergeFrom(from.images_);
  text_.MergeFrom(from.text_);
  if (from.rowindex() != 0) {
    set_rowindex(from.rowindex());
  }
}

void Datum::CopyFrom(const Datum& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TuriCreate.Annotation.Specification.Datum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Datum::IsInitialized() const {
  return true;
}

void Datum::Swap(Datum* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Datum::InternalSwap(Datum* other) {
  images_.InternalSwap(&other->images_);
  text_.InternalSwap(&other->text_);
  std::swap(rowindex_, other->rowindex_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Datum::GetTypeName() const {
  return "TuriCreate.Annotation.Specification.Datum";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Datum

// int64 rowIndex = 1;
void Datum::clear_rowindex() {
  rowindex_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 Datum::rowindex() const {
  // @@protoc_insertion_point(field_get:TuriCreate.Annotation.Specification.Datum.rowIndex)
  return rowindex_;
}
void Datum::set_rowindex(::google::protobuf::int64 value) {
  
  rowindex_ = value;
  // @@protoc_insertion_point(field_set:TuriCreate.Annotation.Specification.Datum.rowIndex)
}

// repeated .TuriCreate.Annotation.Specification.ImageDatum images = 10;
int Datum::images_size() const {
  return images_.size();
}
void Datum::clear_images() {
  images_.Clear();
}
const ::TuriCreate::Annotation::Specification::ImageDatum& Datum::images(int index) const {
  // @@protoc_insertion_point(field_get:TuriCreate.Annotation.Specification.Datum.images)
  return images_.Get(index);
}
::TuriCreate::Annotation::Specification::ImageDatum* Datum::mutable_images(int index) {
  // @@protoc_insertion_point(field_mutable:TuriCreate.Annotation.Specification.Datum.images)
  return images_.Mutable(index);
}
::TuriCreate::Annotation::Specification::ImageDatum* Datum::add_images() {
  // @@protoc_insertion_point(field_add:TuriCreate.Annotation.Specification.Datum.images)
  return images_.Add();
}
::google::protobuf::RepeatedPtrField< ::TuriCreate::Annotation::Specification::ImageDatum >*
Datum::mutable_images() {
  // @@protoc_insertion_point(field_mutable_list:TuriCreate.Annotation.Specification.Datum.images)
  return &images_;
}
const ::google::protobuf::RepeatedPtrField< ::TuriCreate::Annotation::Specification::ImageDatum >&
Datum::images() const {
  // @@protoc_insertion_point(field_list:TuriCreate.Annotation.Specification.Datum.images)
  return images_;
}

// repeated .TuriCreate.Annotation.Specification.TextDatum text = 20;
int Datum::text_size() const {
  return text_.size();
}
void Datum::clear_text() {
  text_.Clear();
}
const ::TuriCreate::Annotation::Specification::TextDatum& Datum::text(int index) const {
  // @@protoc_insertion_point(field_get:TuriCreate.Annotation.Specification.Datum.text)
  return text_.Get(index);
}
::TuriCreate::Annotation::Specification::TextDatum* Datum::mutable_text(int index) {
  // @@protoc_insertion_point(field_mutable:TuriCreate.Annotation.Specification.Datum.text)
  return text_.Mutable(index);
}
::TuriCreate::Annotation::Specification::TextDatum* Datum::add_text() {
  // @@protoc_insertion_point(field_add:TuriCreate.Annotation.Specification.Datum.text)
  return text_.Add();
}
::google::protobuf::RepeatedPtrField< ::TuriCreate::Annotation::Specification::TextDatum >*
Datum::mutable_text() {
  // @@protoc_insertion_point(field_mutable_list:TuriCreate.Annotation.Specification.Datum.text)
  return &text_;
}
const ::google::protobuf::RepeatedPtrField< ::TuriCreate::Annotation::Specification::TextDatum >&
Datum::text() const {
  // @@protoc_insertion_point(field_list:TuriCreate.Annotation.Specification.Datum.text)
  return text_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DataGetter::kTypeFieldNumber;
const int DataGetter::kStartFieldNumber;
const int DataGetter::kEndFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DataGetter::DataGetter()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_data_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:TuriCreate.Annotation.Specification.DataGetter)
}
DataGetter::DataGetter(const DataGetter& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    reinterpret_cast<char*>(&end_) -
    reinterpret_cast<char*>(&type_) + sizeof(end_));
  // @@protoc_insertion_point(copy_constructor:TuriCreate.Annotation.Specification.DataGetter)
}

void DataGetter::SharedCtor() {
  ::memset(&type_, 0, reinterpret_cast<char*>(&end_) -
    reinterpret_cast<char*>(&type_) + sizeof(end_));
  _cached_size_ = 0;
}

DataGetter::~DataGetter() {
  // @@protoc_insertion_point(destructor:TuriCreate.Annotation.Specification.DataGetter)
  SharedDtor();
}

void DataGetter::SharedDtor() {
}

void DataGetter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DataGetter& DataGetter::default_instance() {
  protobuf_data_2eproto::InitDefaults();
  return *internal_default_instance();
}

DataGetter* DataGetter::New(::google::protobuf::Arena* arena) const {
  DataGetter* n = new DataGetter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DataGetter::Clear() {
// @@protoc_insertion_point(message_clear_start:TuriCreate.Annotation.Specification.DataGetter)
  ::memset(&type_, 0, reinterpret_cast<char*>(&end_) -
    reinterpret_cast<char*>(&type_) + sizeof(end_));
}

bool DataGetter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TuriCreate.Annotation.Specification.DataGetter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .TuriCreate.Annotation.Specification.DataGetter.GetterType type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::TuriCreate::Annotation::Specification::DataGetter_GetterType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 start = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &start_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 end = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &end_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TuriCreate.Annotation.Specification.DataGetter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TuriCreate.Annotation.Specification.DataGetter)
  return false;
#undef DO_
}

void DataGetter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TuriCreate.Annotation.Specification.DataGetter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .TuriCreate.Annotation.Specification.DataGetter.GetterType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // int32 start = 2;
  if (this->start() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->start(), output);
  }

  // int32 end = 3;
  if (this->end() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->end(), output);
  }

  // @@protoc_insertion_point(serialize_end:TuriCreate.Annotation.Specification.DataGetter)
}

size_t DataGetter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TuriCreate.Annotation.Specification.DataGetter)
  size_t total_size = 0;

  // .TuriCreate.Annotation.Specification.DataGetter.GetterType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // int32 start = 2;
  if (this->start() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->start());
  }

  // int32 end = 3;
  if (this->end() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->end());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataGetter::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DataGetter*>(&from));
}

void DataGetter::MergeFrom(const DataGetter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TuriCreate.Annotation.Specification.DataGetter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.start() != 0) {
    set_start(from.start());
  }
  if (from.end() != 0) {
    set_end(from.end());
  }
}

void DataGetter::CopyFrom(const DataGetter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TuriCreate.Annotation.Specification.DataGetter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataGetter::IsInitialized() const {
  return true;
}

void DataGetter::Swap(DataGetter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DataGetter::InternalSwap(DataGetter* other) {
  std::swap(type_, other->type_);
  std::swap(start_, other->start_);
  std::swap(end_, other->end_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string DataGetter::GetTypeName() const {
  return "TuriCreate.Annotation.Specification.DataGetter";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DataGetter

// .TuriCreate.Annotation.Specification.DataGetter.GetterType type = 1;
void DataGetter::clear_type() {
  type_ = 0;
}
::TuriCreate::Annotation::Specification::DataGetter_GetterType DataGetter::type() const {
  // @@protoc_insertion_point(field_get:TuriCreate.Annotation.Specification.DataGetter.type)
  return static_cast< ::TuriCreate::Annotation::Specification::DataGetter_GetterType >(type_);
}
void DataGetter::set_type(::TuriCreate::Annotation::Specification::DataGetter_GetterType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:TuriCreate.Annotation.Specification.DataGetter.type)
}

// int32 start = 2;
void DataGetter::clear_start() {
  start_ = 0;
}
::google::protobuf::int32 DataGetter::start() const {
  // @@protoc_insertion_point(field_get:TuriCreate.Annotation.Specification.DataGetter.start)
  return start_;
}
void DataGetter::set_start(::google::protobuf::int32 value) {
  
  start_ = value;
  // @@protoc_insertion_point(field_set:TuriCreate.Annotation.Specification.DataGetter.start)
}

// int32 end = 3;
void DataGetter::clear_end() {
  end_ = 0;
}
::google::protobuf::int32 DataGetter::end() const {
  // @@protoc_insertion_point(field_get:TuriCreate.Annotation.Specification.DataGetter.end)
  return end_;
}
void DataGetter::set_end(::google::protobuf::int32 value) {
  
  end_ = value;
  // @@protoc_insertion_point(field_set:TuriCreate.Annotation.Specification.DataGetter.end)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Data::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Data::Data()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_data_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:TuriCreate.Annotation.Specification.Data)
}
Data::Data(const Data& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      data_(from.data_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TuriCreate.Annotation.Specification.Data)
}

void Data::SharedCtor() {
  _cached_size_ = 0;
}

Data::~Data() {
  // @@protoc_insertion_point(destructor:TuriCreate.Annotation.Specification.Data)
  SharedDtor();
}

void Data::SharedDtor() {
}

void Data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Data& Data::default_instance() {
  protobuf_data_2eproto::InitDefaults();
  return *internal_default_instance();
}

Data* Data::New(::google::protobuf::Arena* arena) const {
  Data* n = new Data;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Data::Clear() {
// @@protoc_insertion_point(message_clear_start:TuriCreate.Annotation.Specification.Data)
  data_.Clear();
}

bool Data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TuriCreate.Annotation.Specification.Data)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .TuriCreate.Annotation.Specification.Datum data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TuriCreate.Annotation.Specification.Data)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TuriCreate.Annotation.Specification.Data)
  return false;
#undef DO_
}

void Data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TuriCreate.Annotation.Specification.Data)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TuriCreate.Annotation.Specification.Datum data = 1;
  for (unsigned int i = 0, n = this->data_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->data(i), output);
  }

  // @@protoc_insertion_point(serialize_end:TuriCreate.Annotation.Specification.Data)
}

size_t Data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TuriCreate.Annotation.Specification.Data)
  size_t total_size = 0;

  // repeated .TuriCreate.Annotation.Specification.Datum data = 1;
  {
    unsigned int count = this->data_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Data::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Data*>(&from));
}

void Data::MergeFrom(const Data& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TuriCreate.Annotation.Specification.Data)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void Data::CopyFrom(const Data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TuriCreate.Annotation.Specification.Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Data::IsInitialized() const {
  return true;
}

void Data::Swap(Data* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Data::InternalSwap(Data* other) {
  data_.InternalSwap(&other->data_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Data::GetTypeName() const {
  return "TuriCreate.Annotation.Specification.Data";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Data

// repeated .TuriCreate.Annotation.Specification.Datum data = 1;
int Data::data_size() const {
  return data_.size();
}
void Data::clear_data() {
  data_.Clear();
}
const ::TuriCreate::Annotation::Specification::Datum& Data::data(int index) const {
  // @@protoc_insertion_point(field_get:TuriCreate.Annotation.Specification.Data.data)
  return data_.Get(index);
}
::TuriCreate::Annotation::Specification::Datum* Data::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:TuriCreate.Annotation.Specification.Data.data)
  return data_.Mutable(index);
}
::TuriCreate::Annotation::Specification::Datum* Data::add_data() {
  // @@protoc_insertion_point(field_add:TuriCreate.Annotation.Specification.Data.data)
  return data_.Add();
}
::google::protobuf::RepeatedPtrField< ::TuriCreate::Annotation::Specification::Datum >*
Data::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:TuriCreate.Annotation.Specification.Data.data)
  return &data_;
}
const ::google::protobuf::RepeatedPtrField< ::TuriCreate::Annotation::Specification::Datum >&
Data::data() const {
  // @@protoc_insertion_point(field_list:TuriCreate.Annotation.Specification.Data.data)
  return data_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Specification
}  // namespace Annotation
}  // namespace TuriCreate

// @@protoc_insertion_point(global_scope)
