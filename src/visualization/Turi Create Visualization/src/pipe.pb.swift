// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: pipe.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Turi_Visualization_Pipe_VegaSpec {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var spec: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Turi_Visualization_Pipe_VegaData {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var data: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Turi_Visualization_Pipe_Column {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var name: String = String()

  var type: Turi_Visualization_Pipe_Column.ColumnType = .integer

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum ColumnType: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case integer // = 0
    case float // = 1
    case string // = 2
    case vector // = 3
    case list // = 4
    case dict // = 5
    case datetime // = 6
    case undefined // = 7
    case image // = 8
    case ndVector // = 9
    case UNRECOGNIZED(Int)

    init() {
      self = .integer
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .integer
      case 1: self = .float
      case 2: self = .string
      case 3: self = .vector
      case 4: self = .list
      case 5: self = .dict
      case 6: self = .datetime
      case 7: self = .undefined
      case 8: self = .image
      case 9: self = .ndVector
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .integer: return 0
      case .float: return 1
      case .string: return 2
      case .vector: return 3
      case .list: return 4
      case .dict: return 5
      case .datetime: return 6
      case .undefined: return 7
      case .image: return 8
      case .ndVector: return 9
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  init() {}
}

#if swift(>=4.2)

extension Turi_Visualization_Pipe_Column.ColumnType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Turi_Visualization_Pipe_Column.ColumnType] = [
    .integer,
    .float,
    .string,
    .vector,
    .list,
    .dict,
    .datetime,
    .undefined,
    .image,
    .ndVector,
  ]
}

#endif  // swift(>=4.2)

struct Turi_Visualization_Pipe_TableSpec {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var size: Int32 = 0

  var title: String = String()

  var columns: [Turi_Visualization_Pipe_Column] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Turi_Visualization_Pipe_FlexVec {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var value: [Float] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Turi_Visualization_Pipe_FlexList {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var value: [Turi_Visualization_Pipe_FlexibleType] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Turi_Visualization_Pipe_FlexDatetime {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var posixTimestamp: UInt64 = 0

  var tz15MinOffset: Int32 = 0

  var microsecond: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Turi_Visualization_Pipe_FlexDict {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var dict: Dictionary<String,Turi_Visualization_Pipe_FlexibleType> = [:]

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Turi_Visualization_Pipe_FlexUndefined {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Turi_Visualization_Pipe_FlexImage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var height: Int32 = 0

  var width: Int32 = 0

  var channels: Int32 = 0

  var format: Turi_Visualization_Pipe_FlexImage.Format = .jpg

  var imageData: Data = SwiftProtobuf.Internal.emptyData

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum Format: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case jpg // = 0
    case png // = 1
    case rawArray // = 2
    case undefined // = 3
    case UNRECOGNIZED(Int)

    init() {
      self = .jpg
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .jpg
      case 1: self = .png
      case 2: self = .rawArray
      case 3: self = .undefined
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .jpg: return 0
      case .png: return 1
      case .rawArray: return 2
      case .undefined: return 3
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  init() {}
}

#if swift(>=4.2)

extension Turi_Visualization_Pipe_FlexImage.Format: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Turi_Visualization_Pipe_FlexImage.Format] = [
    .jpg,
    .png,
    .rawArray,
    .undefined,
  ]
}

#endif  // swift(>=4.2)

struct Turi_Visualization_Pipe_FlexNDVectorDimension {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var dimension: [Turi_Visualization_Pipe_FlexNDVector] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Turi_Visualization_Pipe_FlexNDVector {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var vector: OneOf_Vector? {
    get {return _storage._vector}
    set {_uniqueStorage()._vector = newValue}
  }

  var dimension: Turi_Visualization_Pipe_FlexNDVectorDimension {
    get {
      if case .dimension(let v)? = _storage._vector {return v}
      return Turi_Visualization_Pipe_FlexNDVectorDimension()
    }
    set {_uniqueStorage()._vector = .dimension(newValue)}
  }

  var values: Turi_Visualization_Pipe_FlexVec {
    get {
      if case .values(let v)? = _storage._vector {return v}
      return Turi_Visualization_Pipe_FlexVec()
    }
    set {_uniqueStorage()._vector = .values(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Vector: Equatable {
    case dimension(Turi_Visualization_Pipe_FlexNDVectorDimension)
    case values(Turi_Visualization_Pipe_FlexVec)

  #if !swift(>=4.1)
    static func ==(lhs: Turi_Visualization_Pipe_FlexNDVector.OneOf_Vector, rhs: Turi_Visualization_Pipe_FlexNDVector.OneOf_Vector) -> Bool {
      switch (lhs, rhs) {
      case (.dimension(let l), .dimension(let r)): return l == r
      case (.values(let l), .values(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Turi_Visualization_Pipe_FlexibleType {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var value: OneOf_Value? {
    get {return _storage._value}
    set {_uniqueStorage()._value = newValue}
  }

  var integer: Int64 {
    get {
      if case .integer(let v)? = _storage._value {return v}
      return 0
    }
    set {_uniqueStorage()._value = .integer(newValue)}
  }

  var float: Float {
    get {
      if case .float(let v)? = _storage._value {return v}
      return 0
    }
    set {_uniqueStorage()._value = .float(newValue)}
  }

  var string: String {
    get {
      if case .string(let v)? = _storage._value {return v}
      return String()
    }
    set {_uniqueStorage()._value = .string(newValue)}
  }

  var vector: Turi_Visualization_Pipe_FlexVec {
    get {
      if case .vector(let v)? = _storage._value {return v}
      return Turi_Visualization_Pipe_FlexVec()
    }
    set {_uniqueStorage()._value = .vector(newValue)}
  }

  var list: Turi_Visualization_Pipe_FlexList {
    get {
      if case .list(let v)? = _storage._value {return v}
      return Turi_Visualization_Pipe_FlexList()
    }
    set {_uniqueStorage()._value = .list(newValue)}
  }

  var dict: Turi_Visualization_Pipe_FlexDict {
    get {
      if case .dict(let v)? = _storage._value {return v}
      return Turi_Visualization_Pipe_FlexDict()
    }
    set {_uniqueStorage()._value = .dict(newValue)}
  }

  var datetime: Turi_Visualization_Pipe_FlexDatetime {
    get {
      if case .datetime(let v)? = _storage._value {return v}
      return Turi_Visualization_Pipe_FlexDatetime()
    }
    set {_uniqueStorage()._value = .datetime(newValue)}
  }

  var undefined: Turi_Visualization_Pipe_FlexUndefined {
    get {
      if case .undefined(let v)? = _storage._value {return v}
      return Turi_Visualization_Pipe_FlexUndefined()
    }
    set {_uniqueStorage()._value = .undefined(newValue)}
  }

  var image: Turi_Visualization_Pipe_FlexImage {
    get {
      if case .image(let v)? = _storage._value {return v}
      return Turi_Visualization_Pipe_FlexImage()
    }
    set {_uniqueStorage()._value = .image(newValue)}
  }

  var ndVector: Turi_Visualization_Pipe_FlexNDVector {
    get {
      if case .ndVector(let v)? = _storage._value {return v}
      return Turi_Visualization_Pipe_FlexNDVector()
    }
    set {_uniqueStorage()._value = .ndVector(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Value: Equatable {
    case integer(Int64)
    case float(Float)
    case string(String)
    case vector(Turi_Visualization_Pipe_FlexVec)
    case list(Turi_Visualization_Pipe_FlexList)
    case dict(Turi_Visualization_Pipe_FlexDict)
    case datetime(Turi_Visualization_Pipe_FlexDatetime)
    case undefined(Turi_Visualization_Pipe_FlexUndefined)
    case image(Turi_Visualization_Pipe_FlexImage)
    case ndVector(Turi_Visualization_Pipe_FlexNDVector)

  #if !swift(>=4.1)
    static func ==(lhs: Turi_Visualization_Pipe_FlexibleType.OneOf_Value, rhs: Turi_Visualization_Pipe_FlexibleType.OneOf_Value) -> Bool {
      switch (lhs, rhs) {
      case (.integer(let l), .integer(let r)): return l == r
      case (.float(let l), .float(let r)): return l == r
      case (.string(let l), .string(let r)): return l == r
      case (.vector(let l), .vector(let r)): return l == r
      case (.list(let l), .list(let r)): return l == r
      case (.dict(let l), .dict(let r)): return l == r
      case (.datetime(let l), .datetime(let r)): return l == r
      case (.undefined(let l), .undefined(let r)): return l == r
      case (.image(let l), .image(let r)): return l == r
      case (.ndVector(let l), .ndVector(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Turi_Visualization_Pipe_TableRow {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: Int32 = 0

  var data: [Turi_Visualization_Pipe_FlexibleType] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Turi_Visualization_Pipe_TableData {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var rows: [Turi_Visualization_Pipe_TableRow] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "turi.visualization.pipe"

extension Turi_Visualization_Pipe_VegaSpec: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".VegaSpec"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "spec"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.spec)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.spec.isEmpty {
      try visitor.visitSingularStringField(value: self.spec, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Turi_Visualization_Pipe_VegaSpec, rhs: Turi_Visualization_Pipe_VegaSpec) -> Bool {
    if lhs.spec != rhs.spec {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Turi_Visualization_Pipe_VegaData: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".VegaData"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "data"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.data)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.data.isEmpty {
      try visitor.visitSingularStringField(value: self.data, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Turi_Visualization_Pipe_VegaData, rhs: Turi_Visualization_Pipe_VegaData) -> Bool {
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Turi_Visualization_Pipe_Column: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Column"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "type"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.name)
      case 2: try decoder.decodeSingularEnumField(value: &self.type)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if self.type != .integer {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Turi_Visualization_Pipe_Column, rhs: Turi_Visualization_Pipe_Column) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.type != rhs.type {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Turi_Visualization_Pipe_Column.ColumnType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "INTEGER"),
    1: .same(proto: "FLOAT"),
    2: .same(proto: "STRING"),
    3: .same(proto: "VECTOR"),
    4: .same(proto: "LIST"),
    5: .same(proto: "DICT"),
    6: .same(proto: "DATETIME"),
    7: .same(proto: "UNDEFINED"),
    8: .same(proto: "IMAGE"),
    9: .same(proto: "ND_VECTOR"),
  ]
}

extension Turi_Visualization_Pipe_TableSpec: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TableSpec"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "size"),
    2: .same(proto: "title"),
    3: .same(proto: "columns"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.size)
      case 2: try decoder.decodeSingularStringField(value: &self.title)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.columns)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.size != 0 {
      try visitor.visitSingularInt32Field(value: self.size, fieldNumber: 1)
    }
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 2)
    }
    if !self.columns.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.columns, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Turi_Visualization_Pipe_TableSpec, rhs: Turi_Visualization_Pipe_TableSpec) -> Bool {
    if lhs.size != rhs.size {return false}
    if lhs.title != rhs.title {return false}
    if lhs.columns != rhs.columns {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Turi_Visualization_Pipe_FlexVec: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".FlexVec"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedFloatField(value: &self.value)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.value.isEmpty {
      try visitor.visitPackedFloatField(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Turi_Visualization_Pipe_FlexVec, rhs: Turi_Visualization_Pipe_FlexVec) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Turi_Visualization_Pipe_FlexList: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".FlexList"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.value)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.value.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Turi_Visualization_Pipe_FlexList, rhs: Turi_Visualization_Pipe_FlexList) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Turi_Visualization_Pipe_FlexDatetime: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".FlexDatetime"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "posix_timestamp"),
    2: .standard(proto: "tz_15min_offset"),
    3: .same(proto: "microsecond"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt64Field(value: &self.posixTimestamp)
      case 2: try decoder.decodeSingularInt32Field(value: &self.tz15MinOffset)
      case 3: try decoder.decodeSingularInt32Field(value: &self.microsecond)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.posixTimestamp != 0 {
      try visitor.visitSingularUInt64Field(value: self.posixTimestamp, fieldNumber: 1)
    }
    if self.tz15MinOffset != 0 {
      try visitor.visitSingularInt32Field(value: self.tz15MinOffset, fieldNumber: 2)
    }
    if self.microsecond != 0 {
      try visitor.visitSingularInt32Field(value: self.microsecond, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Turi_Visualization_Pipe_FlexDatetime, rhs: Turi_Visualization_Pipe_FlexDatetime) -> Bool {
    if lhs.posixTimestamp != rhs.posixTimestamp {return false}
    if lhs.tz15MinOffset != rhs.tz15MinOffset {return false}
    if lhs.microsecond != rhs.microsecond {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Turi_Visualization_Pipe_FlexDict: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".FlexDict"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    6: .same(proto: "dict"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 6: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Turi_Visualization_Pipe_FlexibleType>.self, value: &self.dict)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.dict.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Turi_Visualization_Pipe_FlexibleType>.self, value: self.dict, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Turi_Visualization_Pipe_FlexDict, rhs: Turi_Visualization_Pipe_FlexDict) -> Bool {
    if lhs.dict != rhs.dict {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Turi_Visualization_Pipe_FlexUndefined: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".FlexUndefined"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Turi_Visualization_Pipe_FlexUndefined, rhs: Turi_Visualization_Pipe_FlexUndefined) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Turi_Visualization_Pipe_FlexImage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".FlexImage"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "height"),
    2: .same(proto: "width"),
    3: .same(proto: "channels"),
    4: .same(proto: "format"),
    10: .standard(proto: "image_data"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.height)
      case 2: try decoder.decodeSingularInt32Field(value: &self.width)
      case 3: try decoder.decodeSingularInt32Field(value: &self.channels)
      case 4: try decoder.decodeSingularEnumField(value: &self.format)
      case 10: try decoder.decodeSingularBytesField(value: &self.imageData)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.height != 0 {
      try visitor.visitSingularInt32Field(value: self.height, fieldNumber: 1)
    }
    if self.width != 0 {
      try visitor.visitSingularInt32Field(value: self.width, fieldNumber: 2)
    }
    if self.channels != 0 {
      try visitor.visitSingularInt32Field(value: self.channels, fieldNumber: 3)
    }
    if self.format != .jpg {
      try visitor.visitSingularEnumField(value: self.format, fieldNumber: 4)
    }
    if !self.imageData.isEmpty {
      try visitor.visitSingularBytesField(value: self.imageData, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Turi_Visualization_Pipe_FlexImage, rhs: Turi_Visualization_Pipe_FlexImage) -> Bool {
    if lhs.height != rhs.height {return false}
    if lhs.width != rhs.width {return false}
    if lhs.channels != rhs.channels {return false}
    if lhs.format != rhs.format {return false}
    if lhs.imageData != rhs.imageData {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Turi_Visualization_Pipe_FlexImage.Format: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "JPG"),
    1: .same(proto: "PNG"),
    2: .same(proto: "RAW_ARRAY"),
    3: .same(proto: "UNDEFINED"),
  ]
}

extension Turi_Visualization_Pipe_FlexNDVectorDimension: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".FlexNDVectorDimension"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "dimension"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.dimension)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.dimension.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.dimension, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Turi_Visualization_Pipe_FlexNDVectorDimension, rhs: Turi_Visualization_Pipe_FlexNDVectorDimension) -> Bool {
    if lhs.dimension != rhs.dimension {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Turi_Visualization_Pipe_FlexNDVector: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".FlexNDVector"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "dimension"),
    2: .same(proto: "values"),
  ]

  fileprivate class _StorageClass {
    var _vector: Turi_Visualization_Pipe_FlexNDVector.OneOf_Vector?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _vector = source._vector
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1:
          var v: Turi_Visualization_Pipe_FlexNDVectorDimension?
          if let current = _storage._vector {
            try decoder.handleConflictingOneOf()
            if case .dimension(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._vector = .dimension(v)}
        case 2:
          var v: Turi_Visualization_Pipe_FlexVec?
          if let current = _storage._vector {
            try decoder.handleConflictingOneOf()
            if case .values(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._vector = .values(v)}
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      switch _storage._vector {
      case .dimension(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      case .values(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      case nil: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Turi_Visualization_Pipe_FlexNDVector, rhs: Turi_Visualization_Pipe_FlexNDVector) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._vector != rhs_storage._vector {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Turi_Visualization_Pipe_FlexibleType: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".FlexibleType"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "integer"),
    2: .same(proto: "float"),
    3: .same(proto: "string"),
    4: .same(proto: "vector"),
    5: .same(proto: "list"),
    6: .same(proto: "dict"),
    7: .same(proto: "datetime"),
    8: .same(proto: "undefined"),
    9: .same(proto: "image"),
    10: .standard(proto: "nd_vector"),
  ]

  fileprivate class _StorageClass {
    var _value: Turi_Visualization_Pipe_FlexibleType.OneOf_Value?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _value = source._value
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1:
          if _storage._value != nil {try decoder.handleConflictingOneOf()}
          var v: Int64?
          try decoder.decodeSingularInt64Field(value: &v)
          if let v = v {_storage._value = .integer(v)}
        case 2:
          if _storage._value != nil {try decoder.handleConflictingOneOf()}
          var v: Float?
          try decoder.decodeSingularFloatField(value: &v)
          if let v = v {_storage._value = .float(v)}
        case 3:
          if _storage._value != nil {try decoder.handleConflictingOneOf()}
          var v: String?
          try decoder.decodeSingularStringField(value: &v)
          if let v = v {_storage._value = .string(v)}
        case 4:
          var v: Turi_Visualization_Pipe_FlexVec?
          if let current = _storage._value {
            try decoder.handleConflictingOneOf()
            if case .vector(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._value = .vector(v)}
        case 5:
          var v: Turi_Visualization_Pipe_FlexList?
          if let current = _storage._value {
            try decoder.handleConflictingOneOf()
            if case .list(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._value = .list(v)}
        case 6:
          var v: Turi_Visualization_Pipe_FlexDict?
          if let current = _storage._value {
            try decoder.handleConflictingOneOf()
            if case .dict(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._value = .dict(v)}
        case 7:
          var v: Turi_Visualization_Pipe_FlexDatetime?
          if let current = _storage._value {
            try decoder.handleConflictingOneOf()
            if case .datetime(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._value = .datetime(v)}
        case 8:
          var v: Turi_Visualization_Pipe_FlexUndefined?
          if let current = _storage._value {
            try decoder.handleConflictingOneOf()
            if case .undefined(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._value = .undefined(v)}
        case 9:
          var v: Turi_Visualization_Pipe_FlexImage?
          if let current = _storage._value {
            try decoder.handleConflictingOneOf()
            if case .image(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._value = .image(v)}
        case 10:
          var v: Turi_Visualization_Pipe_FlexNDVector?
          if let current = _storage._value {
            try decoder.handleConflictingOneOf()
            if case .ndVector(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._value = .ndVector(v)}
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      switch _storage._value {
      case .integer(let v)?:
        try visitor.visitSingularInt64Field(value: v, fieldNumber: 1)
      case .float(let v)?:
        try visitor.visitSingularFloatField(value: v, fieldNumber: 2)
      case .string(let v)?:
        try visitor.visitSingularStringField(value: v, fieldNumber: 3)
      case .vector(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      case .list(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      case .dict(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      case .datetime(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      case .undefined(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      case .image(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      case .ndVector(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      case nil: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Turi_Visualization_Pipe_FlexibleType, rhs: Turi_Visualization_Pipe_FlexibleType) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._value != rhs_storage._value {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Turi_Visualization_Pipe_TableRow: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TableRow"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "data"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.id)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.data)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt32Field(value: self.id, fieldNumber: 1)
    }
    if !self.data.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.data, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Turi_Visualization_Pipe_TableRow, rhs: Turi_Visualization_Pipe_TableRow) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Turi_Visualization_Pipe_TableData: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TableData"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "rows"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.rows)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.rows.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.rows, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Turi_Visualization_Pipe_TableData, rhs: Turi_Visualization_Pipe_TableData) -> Bool {
    if lhs.rows != rhs.rows {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
