// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: annotate.proto

#ifndef PROTOBUF_annotate_2eproto__INCLUDED
#define PROTOBUF_annotate_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
namespace TuriCreate {
namespace Annotation {
namespace Specification {
class ActivityClassificationLabel;
class ActivityClassificationLabelDefaultTypeInternal;
extern ActivityClassificationLabelDefaultTypeInternal _ActivityClassificationLabel_default_instance_;
class Annotation;
class AnnotationDefaultTypeInternal;
extern AnnotationDefaultTypeInternal _Annotation_default_instance_;
class Annotations;
class AnnotationsDefaultTypeInternal;
extern AnnotationsDefaultTypeInternal _Annotations_default_instance_;
class AudioClassificationLabel;
class AudioClassificationLabelDefaultTypeInternal;
extern AudioClassificationLabelDefaultTypeInternal _AudioClassificationLabel_default_instance_;
class DrawingClassificationLabel;
class DrawingClassificationLabelDefaultTypeInternal;
extern DrawingClassificationLabelDefaultTypeInternal _DrawingClassificationLabel_default_instance_;
class ImageClassificationLabel;
class ImageClassificationLabelDefaultTypeInternal;
extern ImageClassificationLabelDefaultTypeInternal _ImageClassificationLabel_default_instance_;
class Label;
class LabelDefaultTypeInternal;
extern LabelDefaultTypeInternal _Label_default_instance_;
class ObjectDetectionLabel;
class ObjectDetectionLabelDefaultTypeInternal;
extern ObjectDetectionLabelDefaultTypeInternal _ObjectDetectionLabel_default_instance_;
}  // namespace Specification
}  // namespace Annotation
}  // namespace TuriCreate

namespace TuriCreate {
namespace Annotation {
namespace Specification {

namespace protobuf_annotate_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_annotate_2eproto

// ===================================================================

class ActivityClassificationLabel : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:TuriCreate.Annotation.Specification.ActivityClassificationLabel) */ {
 public:
  ActivityClassificationLabel();
  virtual ~ActivityClassificationLabel();

  ActivityClassificationLabel(const ActivityClassificationLabel& from);

  inline ActivityClassificationLabel& operator=(const ActivityClassificationLabel& from) {
    CopyFrom(from);
    return *this;
  }

  static const ActivityClassificationLabel& default_instance();

  static inline const ActivityClassificationLabel* internal_default_instance() {
    return reinterpret_cast<const ActivityClassificationLabel*>(
               &_ActivityClassificationLabel_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(ActivityClassificationLabel* other);

  // implements Message ----------------------------------------------

  inline ActivityClassificationLabel* New() const PROTOBUF_FINAL { return New(NULL); }

  ActivityClassificationLabel* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const ActivityClassificationLabel& from);
  void MergeFrom(const ActivityClassificationLabel& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ActivityClassificationLabel* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double start = 6;
  void clear_start();
  static const int kStartFieldNumber = 6;
  double start() const;
  void set_start(double value);

  // double stop = 7;
  void clear_stop();
  static const int kStopFieldNumber = 7;
  double stop() const;
  void set_stop(double value);

  // @@protoc_insertion_point(class_scope:TuriCreate.Annotation.Specification.ActivityClassificationLabel)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  double start_;
  double stop_;
  mutable int _cached_size_;
  friend struct protobuf_annotate_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AudioClassificationLabel : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:TuriCreate.Annotation.Specification.AudioClassificationLabel) */ {
 public:
  AudioClassificationLabel();
  virtual ~AudioClassificationLabel();

  AudioClassificationLabel(const AudioClassificationLabel& from);

  inline AudioClassificationLabel& operator=(const AudioClassificationLabel& from) {
    CopyFrom(from);
    return *this;
  }

  static const AudioClassificationLabel& default_instance();

  static inline const AudioClassificationLabel* internal_default_instance() {
    return reinterpret_cast<const AudioClassificationLabel*>(
               &_AudioClassificationLabel_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(AudioClassificationLabel* other);

  // implements Message ----------------------------------------------

  inline AudioClassificationLabel* New() const PROTOBUF_FINAL { return New(NULL); }

  AudioClassificationLabel* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const AudioClassificationLabel& from);
  void MergeFrom(const AudioClassificationLabel& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AudioClassificationLabel* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double start = 6;
  void clear_start();
  static const int kStartFieldNumber = 6;
  double start() const;
  void set_start(double value);

  // double stop = 7;
  void clear_stop();
  static const int kStopFieldNumber = 7;
  double stop() const;
  void set_stop(double value);

  // @@protoc_insertion_point(class_scope:TuriCreate.Annotation.Specification.AudioClassificationLabel)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  double start_;
  double stop_;
  mutable int _cached_size_;
  friend struct protobuf_annotate_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DrawingClassificationLabel : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:TuriCreate.Annotation.Specification.DrawingClassificationLabel) */ {
 public:
  DrawingClassificationLabel();
  virtual ~DrawingClassificationLabel();

  DrawingClassificationLabel(const DrawingClassificationLabel& from);

  inline DrawingClassificationLabel& operator=(const DrawingClassificationLabel& from) {
    CopyFrom(from);
    return *this;
  }

  static const DrawingClassificationLabel& default_instance();

  static inline const DrawingClassificationLabel* internal_default_instance() {
    return reinterpret_cast<const DrawingClassificationLabel*>(
               &_DrawingClassificationLabel_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(DrawingClassificationLabel* other);

  // implements Message ----------------------------------------------

  inline DrawingClassificationLabel* New() const PROTOBUF_FINAL { return New(NULL); }

  DrawingClassificationLabel* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const DrawingClassificationLabel& from);
  void MergeFrom(const DrawingClassificationLabel& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DrawingClassificationLabel* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:TuriCreate.Annotation.Specification.DrawingClassificationLabel)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  mutable int _cached_size_;
  friend struct protobuf_annotate_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ImageClassificationLabel : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:TuriCreate.Annotation.Specification.ImageClassificationLabel) */ {
 public:
  ImageClassificationLabel();
  virtual ~ImageClassificationLabel();

  ImageClassificationLabel(const ImageClassificationLabel& from);

  inline ImageClassificationLabel& operator=(const ImageClassificationLabel& from) {
    CopyFrom(from);
    return *this;
  }

  static const ImageClassificationLabel& default_instance();

  static inline const ImageClassificationLabel* internal_default_instance() {
    return reinterpret_cast<const ImageClassificationLabel*>(
               &_ImageClassificationLabel_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(ImageClassificationLabel* other);

  // implements Message ----------------------------------------------

  inline ImageClassificationLabel* New() const PROTOBUF_FINAL { return New(NULL); }

  ImageClassificationLabel* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const ImageClassificationLabel& from);
  void MergeFrom(const ImageClassificationLabel& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ImageClassificationLabel* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:TuriCreate.Annotation.Specification.ImageClassificationLabel)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  mutable int _cached_size_;
  friend struct protobuf_annotate_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ObjectDetectionLabel : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:TuriCreate.Annotation.Specification.ObjectDetectionLabel) */ {
 public:
  ObjectDetectionLabel();
  virtual ~ObjectDetectionLabel();

  ObjectDetectionLabel(const ObjectDetectionLabel& from);

  inline ObjectDetectionLabel& operator=(const ObjectDetectionLabel& from) {
    CopyFrom(from);
    return *this;
  }

  static const ObjectDetectionLabel& default_instance();

  static inline const ObjectDetectionLabel* internal_default_instance() {
    return reinterpret_cast<const ObjectDetectionLabel*>(
               &_ObjectDetectionLabel_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(ObjectDetectionLabel* other);

  // implements Message ----------------------------------------------

  inline ObjectDetectionLabel* New() const PROTOBUF_FINAL { return New(NULL); }

  ObjectDetectionLabel* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const ObjectDetectionLabel& from);
  void MergeFrom(const ObjectDetectionLabel& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ObjectDetectionLabel* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double height = 1;
  void clear_height();
  static const int kHeightFieldNumber = 1;
  double height() const;
  void set_height(double value);

  // double width = 2;
  void clear_width();
  static const int kWidthFieldNumber = 2;
  double width() const;
  void set_width(double value);

  // double x = 4;
  void clear_x();
  static const int kXFieldNumber = 4;
  double x() const;
  void set_x(double value);

  // double y = 5;
  void clear_y();
  static const int kYFieldNumber = 5;
  double y() const;
  void set_y(double value);

  // @@protoc_insertion_point(class_scope:TuriCreate.Annotation.Specification.ObjectDetectionLabel)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  double height_;
  double width_;
  double x_;
  double y_;
  mutable int _cached_size_;
  friend struct protobuf_annotate_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Label : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:TuriCreate.Annotation.Specification.Label) */ {
 public:
  Label();
  virtual ~Label();

  Label(const Label& from);

  inline Label& operator=(const Label& from) {
    CopyFrom(from);
    return *this;
  }

  static const Label& default_instance();

  enum LabelIdentifierCase {
    kIntLabel = 1,
    kStringLabel = 2,
    LABELIDENTIFIER_NOT_SET = 0,
  };

  enum LabelTypeCase {
    kActivityClassificationLabel = 100,
    kAudioClassificationLabel = 200,
    kDrawingClassificationLabel = 300,
    kImageClassificationLabel = 400,
    kObjectDetectionLabel = 500,
    LABELTYPE_NOT_SET = 0,
  };

  static inline const Label* internal_default_instance() {
    return reinterpret_cast<const Label*>(
               &_Label_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(Label* other);

  // implements Message ----------------------------------------------

  inline Label* New() const PROTOBUF_FINAL { return New(NULL); }

  Label* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const Label& from);
  void MergeFrom(const Label& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Label* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 intLabel = 1;
  private:
  bool has_intlabel() const;
  public:
  void clear_intlabel();
  static const int kIntLabelFieldNumber = 1;
  ::google::protobuf::int64 intlabel() const;
  void set_intlabel(::google::protobuf::int64 value);

  // string stringLabel = 2;
  private:
  bool has_stringlabel() const;
  public:
  void clear_stringlabel();
  static const int kStringLabelFieldNumber = 2;
  const ::std::string& stringlabel() const;
  void set_stringlabel(const ::std::string& value);
  #if LANG_CXX11
  void set_stringlabel(::std::string&& value);
  #endif
  void set_stringlabel(const char* value);
  void set_stringlabel(const char* value, size_t size);
  ::std::string* mutable_stringlabel();
  ::std::string* release_stringlabel();
  void set_allocated_stringlabel(::std::string* stringlabel);

  // .TuriCreate.Annotation.Specification.ActivityClassificationLabel activityClassificationLabel = 100;
  bool has_activityclassificationlabel() const;
  void clear_activityclassificationlabel();
  static const int kActivityClassificationLabelFieldNumber = 100;
  const ::TuriCreate::Annotation::Specification::ActivityClassificationLabel& activityclassificationlabel() const;
  ::TuriCreate::Annotation::Specification::ActivityClassificationLabel* mutable_activityclassificationlabel();
  ::TuriCreate::Annotation::Specification::ActivityClassificationLabel* release_activityclassificationlabel();
  void set_allocated_activityclassificationlabel(::TuriCreate::Annotation::Specification::ActivityClassificationLabel* activityclassificationlabel);

  // .TuriCreate.Annotation.Specification.AudioClassificationLabel audioClassificationLabel = 200;
  bool has_audioclassificationlabel() const;
  void clear_audioclassificationlabel();
  static const int kAudioClassificationLabelFieldNumber = 200;
  const ::TuriCreate::Annotation::Specification::AudioClassificationLabel& audioclassificationlabel() const;
  ::TuriCreate::Annotation::Specification::AudioClassificationLabel* mutable_audioclassificationlabel();
  ::TuriCreate::Annotation::Specification::AudioClassificationLabel* release_audioclassificationlabel();
  void set_allocated_audioclassificationlabel(::TuriCreate::Annotation::Specification::AudioClassificationLabel* audioclassificationlabel);

  // .TuriCreate.Annotation.Specification.DrawingClassificationLabel drawingClassificationLabel = 300;
  bool has_drawingclassificationlabel() const;
  void clear_drawingclassificationlabel();
  static const int kDrawingClassificationLabelFieldNumber = 300;
  const ::TuriCreate::Annotation::Specification::DrawingClassificationLabel& drawingclassificationlabel() const;
  ::TuriCreate::Annotation::Specification::DrawingClassificationLabel* mutable_drawingclassificationlabel();
  ::TuriCreate::Annotation::Specification::DrawingClassificationLabel* release_drawingclassificationlabel();
  void set_allocated_drawingclassificationlabel(::TuriCreate::Annotation::Specification::DrawingClassificationLabel* drawingclassificationlabel);

  // .TuriCreate.Annotation.Specification.ImageClassificationLabel imageClassificationLabel = 400;
  bool has_imageclassificationlabel() const;
  void clear_imageclassificationlabel();
  static const int kImageClassificationLabelFieldNumber = 400;
  const ::TuriCreate::Annotation::Specification::ImageClassificationLabel& imageclassificationlabel() const;
  ::TuriCreate::Annotation::Specification::ImageClassificationLabel* mutable_imageclassificationlabel();
  ::TuriCreate::Annotation::Specification::ImageClassificationLabel* release_imageclassificationlabel();
  void set_allocated_imageclassificationlabel(::TuriCreate::Annotation::Specification::ImageClassificationLabel* imageclassificationlabel);

  // .TuriCreate.Annotation.Specification.ObjectDetectionLabel objectDetectionLabel = 500;
  bool has_objectdetectionlabel() const;
  void clear_objectdetectionlabel();
  static const int kObjectDetectionLabelFieldNumber = 500;
  const ::TuriCreate::Annotation::Specification::ObjectDetectionLabel& objectdetectionlabel() const;
  ::TuriCreate::Annotation::Specification::ObjectDetectionLabel* mutable_objectdetectionlabel();
  ::TuriCreate::Annotation::Specification::ObjectDetectionLabel* release_objectdetectionlabel();
  void set_allocated_objectdetectionlabel(::TuriCreate::Annotation::Specification::ObjectDetectionLabel* objectdetectionlabel);

  LabelIdentifierCase labelIdentifier_case() const;
  LabelTypeCase labelType_case() const;
  // @@protoc_insertion_point(class_scope:TuriCreate.Annotation.Specification.Label)
 private:
  void set_has_intlabel();
  void set_has_stringlabel();
  void set_has_activityclassificationlabel();
  void set_has_audioclassificationlabel();
  void set_has_drawingclassificationlabel();
  void set_has_imageclassificationlabel();
  void set_has_objectdetectionlabel();

  inline bool has_labelIdentifier() const;
  void clear_labelIdentifier();
  inline void clear_has_labelIdentifier();

  inline bool has_labelType() const;
  void clear_labelType();
  inline void clear_has_labelType();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  union LabelIdentifierUnion {
    LabelIdentifierUnion() {}
    ::google::protobuf::int64 intlabel_;
    ::google::protobuf::internal::ArenaStringPtr stringlabel_;
  } labelIdentifier_;
  union LabelTypeUnion {
    LabelTypeUnion() {}
    ::TuriCreate::Annotation::Specification::ActivityClassificationLabel* activityclassificationlabel_;
    ::TuriCreate::Annotation::Specification::AudioClassificationLabel* audioclassificationlabel_;
    ::TuriCreate::Annotation::Specification::DrawingClassificationLabel* drawingclassificationlabel_;
    ::TuriCreate::Annotation::Specification::ImageClassificationLabel* imageclassificationlabel_;
    ::TuriCreate::Annotation::Specification::ObjectDetectionLabel* objectdetectionlabel_;
  } labelType_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[2];

  friend struct protobuf_annotate_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Annotation : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:TuriCreate.Annotation.Specification.Annotation) */ {
 public:
  Annotation();
  virtual ~Annotation();

  Annotation(const Annotation& from);

  inline Annotation& operator=(const Annotation& from) {
    CopyFrom(from);
    return *this;
  }

  static const Annotation& default_instance();

  static inline const Annotation* internal_default_instance() {
    return reinterpret_cast<const Annotation*>(
               &_Annotation_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(Annotation* other);

  // implements Message ----------------------------------------------

  inline Annotation* New() const PROTOBUF_FINAL { return New(NULL); }

  Annotation* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const Annotation& from);
  void MergeFrom(const Annotation& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Annotation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .TuriCreate.Annotation.Specification.Label labels = 1;
  int labels_size() const;
  void clear_labels();
  static const int kLabelsFieldNumber = 1;
  const ::TuriCreate::Annotation::Specification::Label& labels(int index) const;
  ::TuriCreate::Annotation::Specification::Label* mutable_labels(int index);
  ::TuriCreate::Annotation::Specification::Label* add_labels();
  ::google::protobuf::RepeatedPtrField< ::TuriCreate::Annotation::Specification::Label >*
      mutable_labels();
  const ::google::protobuf::RepeatedPtrField< ::TuriCreate::Annotation::Specification::Label >&
      labels() const;

  // repeated int64 rowIndex = 2;
  int rowindex_size() const;
  void clear_rowindex();
  static const int kRowIndexFieldNumber = 2;
  ::google::protobuf::int64 rowindex(int index) const;
  void set_rowindex(int index, ::google::protobuf::int64 value);
  void add_rowindex(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      rowindex() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_rowindex();

  // @@protoc_insertion_point(class_scope:TuriCreate.Annotation.Specification.Annotation)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::TuriCreate::Annotation::Specification::Label > labels_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > rowindex_;
  mutable int _rowindex_cached_byte_size_;
  mutable int _cached_size_;
  friend struct protobuf_annotate_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Annotations : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:TuriCreate.Annotation.Specification.Annotations) */ {
 public:
  Annotations();
  virtual ~Annotations();

  Annotations(const Annotations& from);

  inline Annotations& operator=(const Annotations& from) {
    CopyFrom(from);
    return *this;
  }

  static const Annotations& default_instance();

  static inline const Annotations* internal_default_instance() {
    return reinterpret_cast<const Annotations*>(
               &_Annotations_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(Annotations* other);

  // implements Message ----------------------------------------------

  inline Annotations* New() const PROTOBUF_FINAL { return New(NULL); }

  Annotations* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const Annotations& from);
  void MergeFrom(const Annotations& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Annotations* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .TuriCreate.Annotation.Specification.Annotation annotation = 1;
  int annotation_size() const;
  void clear_annotation();
  static const int kAnnotationFieldNumber = 1;
  const ::TuriCreate::Annotation::Specification::Annotation& annotation(int index) const;
  ::TuriCreate::Annotation::Specification::Annotation* mutable_annotation(int index);
  ::TuriCreate::Annotation::Specification::Annotation* add_annotation();
  ::google::protobuf::RepeatedPtrField< ::TuriCreate::Annotation::Specification::Annotation >*
      mutable_annotation();
  const ::google::protobuf::RepeatedPtrField< ::TuriCreate::Annotation::Specification::Annotation >&
      annotation() const;

  // @@protoc_insertion_point(class_scope:TuriCreate.Annotation.Specification.Annotations)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::TuriCreate::Annotation::Specification::Annotation > annotation_;
  mutable int _cached_size_;
  friend struct protobuf_annotate_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// ActivityClassificationLabel

// double start = 6;
inline void ActivityClassificationLabel::clear_start() {
  start_ = 0;
}
inline double ActivityClassificationLabel::start() const {
  // @@protoc_insertion_point(field_get:TuriCreate.Annotation.Specification.ActivityClassificationLabel.start)
  return start_;
}
inline void ActivityClassificationLabel::set_start(double value) {

  start_ = value;
  // @@protoc_insertion_point(field_set:TuriCreate.Annotation.Specification.ActivityClassificationLabel.start)
}

// double stop = 7;
inline void ActivityClassificationLabel::clear_stop() {
  stop_ = 0;
}
inline double ActivityClassificationLabel::stop() const {
  // @@protoc_insertion_point(field_get:TuriCreate.Annotation.Specification.ActivityClassificationLabel.stop)
  return stop_;
}
inline void ActivityClassificationLabel::set_stop(double value) {

  stop_ = value;
  // @@protoc_insertion_point(field_set:TuriCreate.Annotation.Specification.ActivityClassificationLabel.stop)
}

// -------------------------------------------------------------------

// AudioClassificationLabel

// double start = 6;
inline void AudioClassificationLabel::clear_start() {
  start_ = 0;
}
inline double AudioClassificationLabel::start() const {
  // @@protoc_insertion_point(field_get:TuriCreate.Annotation.Specification.AudioClassificationLabel.start)
  return start_;
}
inline void AudioClassificationLabel::set_start(double value) {

  start_ = value;
  // @@protoc_insertion_point(field_set:TuriCreate.Annotation.Specification.AudioClassificationLabel.start)
}

// double stop = 7;
inline void AudioClassificationLabel::clear_stop() {
  stop_ = 0;
}
inline double AudioClassificationLabel::stop() const {
  // @@protoc_insertion_point(field_get:TuriCreate.Annotation.Specification.AudioClassificationLabel.stop)
  return stop_;
}
inline void AudioClassificationLabel::set_stop(double value) {

  stop_ = value;
  // @@protoc_insertion_point(field_set:TuriCreate.Annotation.Specification.AudioClassificationLabel.stop)
}

// -------------------------------------------------------------------

// DrawingClassificationLabel

// -------------------------------------------------------------------

// ImageClassificationLabel

// -------------------------------------------------------------------

// ObjectDetectionLabel

// double height = 1;
inline void ObjectDetectionLabel::clear_height() {
  height_ = 0;
}
inline double ObjectDetectionLabel::height() const {
  // @@protoc_insertion_point(field_get:TuriCreate.Annotation.Specification.ObjectDetectionLabel.height)
  return height_;
}
inline void ObjectDetectionLabel::set_height(double value) {

  height_ = value;
  // @@protoc_insertion_point(field_set:TuriCreate.Annotation.Specification.ObjectDetectionLabel.height)
}

// double width = 2;
inline void ObjectDetectionLabel::clear_width() {
  width_ = 0;
}
inline double ObjectDetectionLabel::width() const {
  // @@protoc_insertion_point(field_get:TuriCreate.Annotation.Specification.ObjectDetectionLabel.width)
  return width_;
}
inline void ObjectDetectionLabel::set_width(double value) {

  width_ = value;
  // @@protoc_insertion_point(field_set:TuriCreate.Annotation.Specification.ObjectDetectionLabel.width)
}

// double x = 4;
inline void ObjectDetectionLabel::clear_x() {
  x_ = 0;
}
inline double ObjectDetectionLabel::x() const {
  // @@protoc_insertion_point(field_get:TuriCreate.Annotation.Specification.ObjectDetectionLabel.x)
  return x_;
}
inline void ObjectDetectionLabel::set_x(double value) {

  x_ = value;
  // @@protoc_insertion_point(field_set:TuriCreate.Annotation.Specification.ObjectDetectionLabel.x)
}

// double y = 5;
inline void ObjectDetectionLabel::clear_y() {
  y_ = 0;
}
inline double ObjectDetectionLabel::y() const {
  // @@protoc_insertion_point(field_get:TuriCreate.Annotation.Specification.ObjectDetectionLabel.y)
  return y_;
}
inline void ObjectDetectionLabel::set_y(double value) {

  y_ = value;
  // @@protoc_insertion_point(field_set:TuriCreate.Annotation.Specification.ObjectDetectionLabel.y)
}

// -------------------------------------------------------------------

// Label

// int64 intLabel = 1;
inline bool Label::has_intlabel() const {
  return labelIdentifier_case() == kIntLabel;
}
inline void Label::set_has_intlabel() {
  _oneof_case_[0] = kIntLabel;
}
inline void Label::clear_intlabel() {
  if (has_intlabel()) {
    labelIdentifier_.intlabel_ = GOOGLE_LONGLONG(0);
    clear_has_labelIdentifier();
  }
}
inline ::google::protobuf::int64 Label::intlabel() const {
  // @@protoc_insertion_point(field_get:TuriCreate.Annotation.Specification.Label.intLabel)
  if (has_intlabel()) {
    return labelIdentifier_.intlabel_;
  }
  return GOOGLE_LONGLONG(0);
}
inline void Label::set_intlabel(::google::protobuf::int64 value) {
  if (!has_intlabel()) {
    clear_labelIdentifier();
    set_has_intlabel();
  }
  labelIdentifier_.intlabel_ = value;
  // @@protoc_insertion_point(field_set:TuriCreate.Annotation.Specification.Label.intLabel)
}

// string stringLabel = 2;
inline bool Label::has_stringlabel() const {
  return labelIdentifier_case() == kStringLabel;
}
inline void Label::set_has_stringlabel() {
  _oneof_case_[0] = kStringLabel;
}
inline void Label::clear_stringlabel() {
  if (has_stringlabel()) {
    labelIdentifier_.stringlabel_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_labelIdentifier();
  }
}
inline const ::std::string& Label::stringlabel() const {
  // @@protoc_insertion_point(field_get:TuriCreate.Annotation.Specification.Label.stringLabel)
  if (has_stringlabel()) {
    return labelIdentifier_.stringlabel_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void Label::set_stringlabel(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:TuriCreate.Annotation.Specification.Label.stringLabel)
  if (!has_stringlabel()) {
    clear_labelIdentifier();
    set_has_stringlabel();
    labelIdentifier_.stringlabel_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  labelIdentifier_.stringlabel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TuriCreate.Annotation.Specification.Label.stringLabel)
}
#if LANG_CXX11
inline void Label::set_stringlabel(::std::string&& value) {
  // @@protoc_insertion_point(field_set:TuriCreate.Annotation.Specification.Label.stringLabel)
  if (!has_stringlabel()) {
    clear_labelIdentifier();
    set_has_stringlabel();
    labelIdentifier_.stringlabel_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  labelIdentifier_.stringlabel_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TuriCreate.Annotation.Specification.Label.stringLabel)
}
#endif
inline void Label::set_stringlabel(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_stringlabel()) {
    clear_labelIdentifier();
    set_has_stringlabel();
    labelIdentifier_.stringlabel_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  labelIdentifier_.stringlabel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TuriCreate.Annotation.Specification.Label.stringLabel)
}
inline void Label::set_stringlabel(const char* value, size_t size) {
  if (!has_stringlabel()) {
    clear_labelIdentifier();
    set_has_stringlabel();
    labelIdentifier_.stringlabel_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  labelIdentifier_.stringlabel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TuriCreate.Annotation.Specification.Label.stringLabel)
}
inline ::std::string* Label::mutable_stringlabel() {
  if (!has_stringlabel()) {
    clear_labelIdentifier();
    set_has_stringlabel();
    labelIdentifier_.stringlabel_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:TuriCreate.Annotation.Specification.Label.stringLabel)
  return labelIdentifier_.stringlabel_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Label::release_stringlabel() {
  // @@protoc_insertion_point(field_release:TuriCreate.Annotation.Specification.Label.stringLabel)
  if (has_stringlabel()) {
    clear_has_labelIdentifier();
    return labelIdentifier_.stringlabel_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void Label::set_allocated_stringlabel(::std::string* stringlabel) {
  if (!has_stringlabel()) {
    labelIdentifier_.stringlabel_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_labelIdentifier();
  if (stringlabel != NULL) {
    set_has_stringlabel();
    labelIdentifier_.stringlabel_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        stringlabel);
  }
  // @@protoc_insertion_point(field_set_allocated:TuriCreate.Annotation.Specification.Label.stringLabel)
}

// .TuriCreate.Annotation.Specification.ActivityClassificationLabel activityClassificationLabel = 100;
inline bool Label::has_activityclassificationlabel() const {
  return labelType_case() == kActivityClassificationLabel;
}
inline void Label::set_has_activityclassificationlabel() {
  _oneof_case_[1] = kActivityClassificationLabel;
}
inline void Label::clear_activityclassificationlabel() {
  if (has_activityclassificationlabel()) {
    delete labelType_.activityclassificationlabel_;
    clear_has_labelType();
  }
}
inline  const ::TuriCreate::Annotation::Specification::ActivityClassificationLabel& Label::activityclassificationlabel() const {
  // @@protoc_insertion_point(field_get:TuriCreate.Annotation.Specification.Label.activityClassificationLabel)
  return has_activityclassificationlabel()
      ? *labelType_.activityclassificationlabel_
      : ::TuriCreate::Annotation::Specification::ActivityClassificationLabel::default_instance();
}
inline ::TuriCreate::Annotation::Specification::ActivityClassificationLabel* Label::mutable_activityclassificationlabel() {
  if (!has_activityclassificationlabel()) {
    clear_labelType();
    set_has_activityclassificationlabel();
    labelType_.activityclassificationlabel_ = new ::TuriCreate::Annotation::Specification::ActivityClassificationLabel;
  }
  // @@protoc_insertion_point(field_mutable:TuriCreate.Annotation.Specification.Label.activityClassificationLabel)
  return labelType_.activityclassificationlabel_;
}
inline ::TuriCreate::Annotation::Specification::ActivityClassificationLabel* Label::release_activityclassificationlabel() {
  // @@protoc_insertion_point(field_release:TuriCreate.Annotation.Specification.Label.activityClassificationLabel)
  if (has_activityclassificationlabel()) {
    clear_has_labelType();
    ::TuriCreate::Annotation::Specification::ActivityClassificationLabel* temp = labelType_.activityclassificationlabel_;
    labelType_.activityclassificationlabel_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Label::set_allocated_activityclassificationlabel(::TuriCreate::Annotation::Specification::ActivityClassificationLabel* activityclassificationlabel) {
  clear_labelType();
  if (activityclassificationlabel) {
    set_has_activityclassificationlabel();
    labelType_.activityclassificationlabel_ = activityclassificationlabel;
  }
  // @@protoc_insertion_point(field_set_allocated:TuriCreate.Annotation.Specification.Label.activityClassificationLabel)
}

// .TuriCreate.Annotation.Specification.AudioClassificationLabel audioClassificationLabel = 200;
inline bool Label::has_audioclassificationlabel() const {
  return labelType_case() == kAudioClassificationLabel;
}
inline void Label::set_has_audioclassificationlabel() {
  _oneof_case_[1] = kAudioClassificationLabel;
}
inline void Label::clear_audioclassificationlabel() {
  if (has_audioclassificationlabel()) {
    delete labelType_.audioclassificationlabel_;
    clear_has_labelType();
  }
}
inline  const ::TuriCreate::Annotation::Specification::AudioClassificationLabel& Label::audioclassificationlabel() const {
  // @@protoc_insertion_point(field_get:TuriCreate.Annotation.Specification.Label.audioClassificationLabel)
  return has_audioclassificationlabel()
      ? *labelType_.audioclassificationlabel_
      : ::TuriCreate::Annotation::Specification::AudioClassificationLabel::default_instance();
}
inline ::TuriCreate::Annotation::Specification::AudioClassificationLabel* Label::mutable_audioclassificationlabel() {
  if (!has_audioclassificationlabel()) {
    clear_labelType();
    set_has_audioclassificationlabel();
    labelType_.audioclassificationlabel_ = new ::TuriCreate::Annotation::Specification::AudioClassificationLabel;
  }
  // @@protoc_insertion_point(field_mutable:TuriCreate.Annotation.Specification.Label.audioClassificationLabel)
  return labelType_.audioclassificationlabel_;
}
inline ::TuriCreate::Annotation::Specification::AudioClassificationLabel* Label::release_audioclassificationlabel() {
  // @@protoc_insertion_point(field_release:TuriCreate.Annotation.Specification.Label.audioClassificationLabel)
  if (has_audioclassificationlabel()) {
    clear_has_labelType();
    ::TuriCreate::Annotation::Specification::AudioClassificationLabel* temp = labelType_.audioclassificationlabel_;
    labelType_.audioclassificationlabel_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Label::set_allocated_audioclassificationlabel(::TuriCreate::Annotation::Specification::AudioClassificationLabel* audioclassificationlabel) {
  clear_labelType();
  if (audioclassificationlabel) {
    set_has_audioclassificationlabel();
    labelType_.audioclassificationlabel_ = audioclassificationlabel;
  }
  // @@protoc_insertion_point(field_set_allocated:TuriCreate.Annotation.Specification.Label.audioClassificationLabel)
}

// .TuriCreate.Annotation.Specification.DrawingClassificationLabel drawingClassificationLabel = 300;
inline bool Label::has_drawingclassificationlabel() const {
  return labelType_case() == kDrawingClassificationLabel;
}
inline void Label::set_has_drawingclassificationlabel() {
  _oneof_case_[1] = kDrawingClassificationLabel;
}
inline void Label::clear_drawingclassificationlabel() {
  if (has_drawingclassificationlabel()) {
    delete labelType_.drawingclassificationlabel_;
    clear_has_labelType();
  }
}
inline  const ::TuriCreate::Annotation::Specification::DrawingClassificationLabel& Label::drawingclassificationlabel() const {
  // @@protoc_insertion_point(field_get:TuriCreate.Annotation.Specification.Label.drawingClassificationLabel)
  return has_drawingclassificationlabel()
      ? *labelType_.drawingclassificationlabel_
      : ::TuriCreate::Annotation::Specification::DrawingClassificationLabel::default_instance();
}
inline ::TuriCreate::Annotation::Specification::DrawingClassificationLabel* Label::mutable_drawingclassificationlabel() {
  if (!has_drawingclassificationlabel()) {
    clear_labelType();
    set_has_drawingclassificationlabel();
    labelType_.drawingclassificationlabel_ = new ::TuriCreate::Annotation::Specification::DrawingClassificationLabel;
  }
  // @@protoc_insertion_point(field_mutable:TuriCreate.Annotation.Specification.Label.drawingClassificationLabel)
  return labelType_.drawingclassificationlabel_;
}
inline ::TuriCreate::Annotation::Specification::DrawingClassificationLabel* Label::release_drawingclassificationlabel() {
  // @@protoc_insertion_point(field_release:TuriCreate.Annotation.Specification.Label.drawingClassificationLabel)
  if (has_drawingclassificationlabel()) {
    clear_has_labelType();
    ::TuriCreate::Annotation::Specification::DrawingClassificationLabel* temp = labelType_.drawingclassificationlabel_;
    labelType_.drawingclassificationlabel_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Label::set_allocated_drawingclassificationlabel(::TuriCreate::Annotation::Specification::DrawingClassificationLabel* drawingclassificationlabel) {
  clear_labelType();
  if (drawingclassificationlabel) {
    set_has_drawingclassificationlabel();
    labelType_.drawingclassificationlabel_ = drawingclassificationlabel;
  }
  // @@protoc_insertion_point(field_set_allocated:TuriCreate.Annotation.Specification.Label.drawingClassificationLabel)
}

// .TuriCreate.Annotation.Specification.ImageClassificationLabel imageClassificationLabel = 400;
inline bool Label::has_imageclassificationlabel() const {
  return labelType_case() == kImageClassificationLabel;
}
inline void Label::set_has_imageclassificationlabel() {
  _oneof_case_[1] = kImageClassificationLabel;
}
inline void Label::clear_imageclassificationlabel() {
  if (has_imageclassificationlabel()) {
    delete labelType_.imageclassificationlabel_;
    clear_has_labelType();
  }
}
inline  const ::TuriCreate::Annotation::Specification::ImageClassificationLabel& Label::imageclassificationlabel() const {
  // @@protoc_insertion_point(field_get:TuriCreate.Annotation.Specification.Label.imageClassificationLabel)
  return has_imageclassificationlabel()
      ? *labelType_.imageclassificationlabel_
      : ::TuriCreate::Annotation::Specification::ImageClassificationLabel::default_instance();
}
inline ::TuriCreate::Annotation::Specification::ImageClassificationLabel* Label::mutable_imageclassificationlabel() {
  if (!has_imageclassificationlabel()) {
    clear_labelType();
    set_has_imageclassificationlabel();
    labelType_.imageclassificationlabel_ = new ::TuriCreate::Annotation::Specification::ImageClassificationLabel;
  }
  // @@protoc_insertion_point(field_mutable:TuriCreate.Annotation.Specification.Label.imageClassificationLabel)
  return labelType_.imageclassificationlabel_;
}
inline ::TuriCreate::Annotation::Specification::ImageClassificationLabel* Label::release_imageclassificationlabel() {
  // @@protoc_insertion_point(field_release:TuriCreate.Annotation.Specification.Label.imageClassificationLabel)
  if (has_imageclassificationlabel()) {
    clear_has_labelType();
    ::TuriCreate::Annotation::Specification::ImageClassificationLabel* temp = labelType_.imageclassificationlabel_;
    labelType_.imageclassificationlabel_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Label::set_allocated_imageclassificationlabel(::TuriCreate::Annotation::Specification::ImageClassificationLabel* imageclassificationlabel) {
  clear_labelType();
  if (imageclassificationlabel) {
    set_has_imageclassificationlabel();
    labelType_.imageclassificationlabel_ = imageclassificationlabel;
  }
  // @@protoc_insertion_point(field_set_allocated:TuriCreate.Annotation.Specification.Label.imageClassificationLabel)
}

// .TuriCreate.Annotation.Specification.ObjectDetectionLabel objectDetectionLabel = 500;
inline bool Label::has_objectdetectionlabel() const {
  return labelType_case() == kObjectDetectionLabel;
}
inline void Label::set_has_objectdetectionlabel() {
  _oneof_case_[1] = kObjectDetectionLabel;
}
inline void Label::clear_objectdetectionlabel() {
  if (has_objectdetectionlabel()) {
    delete labelType_.objectdetectionlabel_;
    clear_has_labelType();
  }
}
inline  const ::TuriCreate::Annotation::Specification::ObjectDetectionLabel& Label::objectdetectionlabel() const {
  // @@protoc_insertion_point(field_get:TuriCreate.Annotation.Specification.Label.objectDetectionLabel)
  return has_objectdetectionlabel()
      ? *labelType_.objectdetectionlabel_
      : ::TuriCreate::Annotation::Specification::ObjectDetectionLabel::default_instance();
}
inline ::TuriCreate::Annotation::Specification::ObjectDetectionLabel* Label::mutable_objectdetectionlabel() {
  if (!has_objectdetectionlabel()) {
    clear_labelType();
    set_has_objectdetectionlabel();
    labelType_.objectdetectionlabel_ = new ::TuriCreate::Annotation::Specification::ObjectDetectionLabel;
  }
  // @@protoc_insertion_point(field_mutable:TuriCreate.Annotation.Specification.Label.objectDetectionLabel)
  return labelType_.objectdetectionlabel_;
}
inline ::TuriCreate::Annotation::Specification::ObjectDetectionLabel* Label::release_objectdetectionlabel() {
  // @@protoc_insertion_point(field_release:TuriCreate.Annotation.Specification.Label.objectDetectionLabel)
  if (has_objectdetectionlabel()) {
    clear_has_labelType();
    ::TuriCreate::Annotation::Specification::ObjectDetectionLabel* temp = labelType_.objectdetectionlabel_;
    labelType_.objectdetectionlabel_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Label::set_allocated_objectdetectionlabel(::TuriCreate::Annotation::Specification::ObjectDetectionLabel* objectdetectionlabel) {
  clear_labelType();
  if (objectdetectionlabel) {
    set_has_objectdetectionlabel();
    labelType_.objectdetectionlabel_ = objectdetectionlabel;
  }
  // @@protoc_insertion_point(field_set_allocated:TuriCreate.Annotation.Specification.Label.objectDetectionLabel)
}

inline bool Label::has_labelIdentifier() const {
  return labelIdentifier_case() != LABELIDENTIFIER_NOT_SET;
}
inline void Label::clear_has_labelIdentifier() {
  _oneof_case_[0] = LABELIDENTIFIER_NOT_SET;
}
inline bool Label::has_labelType() const {
  return labelType_case() != LABELTYPE_NOT_SET;
}
inline void Label::clear_has_labelType() {
  _oneof_case_[1] = LABELTYPE_NOT_SET;
}
inline Label::LabelIdentifierCase Label::labelIdentifier_case() const {
  return Label::LabelIdentifierCase(_oneof_case_[0]);
}
inline Label::LabelTypeCase Label::labelType_case() const {
  return Label::LabelTypeCase(_oneof_case_[1]);
}
// -------------------------------------------------------------------

// Annotation

// repeated .TuriCreate.Annotation.Specification.Label labels = 1;
inline int Annotation::labels_size() const {
  return labels_.size();
}
inline void Annotation::clear_labels() {
  labels_.Clear();
}
inline const ::TuriCreate::Annotation::Specification::Label& Annotation::labels(int index) const {
  // @@protoc_insertion_point(field_get:TuriCreate.Annotation.Specification.Annotation.labels)
  return labels_.Get(index);
}
inline ::TuriCreate::Annotation::Specification::Label* Annotation::mutable_labels(int index) {
  // @@protoc_insertion_point(field_mutable:TuriCreate.Annotation.Specification.Annotation.labels)
  return labels_.Mutable(index);
}
inline ::TuriCreate::Annotation::Specification::Label* Annotation::add_labels() {
  // @@protoc_insertion_point(field_add:TuriCreate.Annotation.Specification.Annotation.labels)
  return labels_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::TuriCreate::Annotation::Specification::Label >*
Annotation::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_list:TuriCreate.Annotation.Specification.Annotation.labels)
  return &labels_;
}
inline const ::google::protobuf::RepeatedPtrField< ::TuriCreate::Annotation::Specification::Label >&
Annotation::labels() const {
  // @@protoc_insertion_point(field_list:TuriCreate.Annotation.Specification.Annotation.labels)
  return labels_;
}

// repeated int64 rowIndex = 2;
inline int Annotation::rowindex_size() const {
  return rowindex_.size();
}
inline void Annotation::clear_rowindex() {
  rowindex_.Clear();
}
inline ::google::protobuf::int64 Annotation::rowindex(int index) const {
  // @@protoc_insertion_point(field_get:TuriCreate.Annotation.Specification.Annotation.rowIndex)
  return rowindex_.Get(index);
}
inline void Annotation::set_rowindex(int index, ::google::protobuf::int64 value) {
  rowindex_.Set(index, value);
  // @@protoc_insertion_point(field_set:TuriCreate.Annotation.Specification.Annotation.rowIndex)
}
inline void Annotation::add_rowindex(::google::protobuf::int64 value) {
  rowindex_.Add(value);
  // @@protoc_insertion_point(field_add:TuriCreate.Annotation.Specification.Annotation.rowIndex)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
Annotation::rowindex() const {
  // @@protoc_insertion_point(field_list:TuriCreate.Annotation.Specification.Annotation.rowIndex)
  return rowindex_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
Annotation::mutable_rowindex() {
  // @@protoc_insertion_point(field_mutable_list:TuriCreate.Annotation.Specification.Annotation.rowIndex)
  return &rowindex_;
}

// -------------------------------------------------------------------

// Annotations

// repeated .TuriCreate.Annotation.Specification.Annotation annotation = 1;
inline int Annotations::annotation_size() const {
  return annotation_.size();
}
inline void Annotations::clear_annotation() {
  annotation_.Clear();
}
inline const ::TuriCreate::Annotation::Specification::Annotation& Annotations::annotation(int index) const {
  // @@protoc_insertion_point(field_get:TuriCreate.Annotation.Specification.Annotations.annotation)
  return annotation_.Get(index);
}
inline ::TuriCreate::Annotation::Specification::Annotation* Annotations::mutable_annotation(int index) {
  // @@protoc_insertion_point(field_mutable:TuriCreate.Annotation.Specification.Annotations.annotation)
  return annotation_.Mutable(index);
}
inline ::TuriCreate::Annotation::Specification::Annotation* Annotations::add_annotation() {
  // @@protoc_insertion_point(field_add:TuriCreate.Annotation.Specification.Annotations.annotation)
  return annotation_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::TuriCreate::Annotation::Specification::Annotation >*
Annotations::mutable_annotation() {
  // @@protoc_insertion_point(field_mutable_list:TuriCreate.Annotation.Specification.Annotations.annotation)
  return &annotation_;
}
inline const ::google::protobuf::RepeatedPtrField< ::TuriCreate::Annotation::Specification::Annotation >&
Annotations::annotation() const {
  // @@protoc_insertion_point(field_list:TuriCreate.Annotation.Specification.Annotations.annotation)
  return annotation_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace Specification
}  // namespace Annotation
}  // namespace TuriCreate

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_annotate_2eproto__INCLUDED
