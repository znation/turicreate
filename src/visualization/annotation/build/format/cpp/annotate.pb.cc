// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: annotate.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "annotate.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace TuriCreate {
namespace Annotation {
namespace Specification {
class ActivityClassificationLabelDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ActivityClassificationLabel> {
} _ActivityClassificationLabel_default_instance_;
class AudioClassificationLabelDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AudioClassificationLabel> {
} _AudioClassificationLabel_default_instance_;
class DrawingClassificationLabelDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DrawingClassificationLabel> {
} _DrawingClassificationLabel_default_instance_;
class ImageClassificationLabelDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ImageClassificationLabel> {
} _ImageClassificationLabel_default_instance_;
class ObjectDetectionLabelDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ObjectDetectionLabel> {
} _ObjectDetectionLabel_default_instance_;
class LabelDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Label> {
  public:
  ::google::protobuf::int64 intlabel_;
  ::google::protobuf::internal::ArenaStringPtr stringlabel_;
  const ::TuriCreate::Annotation::Specification::ActivityClassificationLabel* activityclassificationlabel_;
  const ::TuriCreate::Annotation::Specification::AudioClassificationLabel* audioclassificationlabel_;
  const ::TuriCreate::Annotation::Specification::DrawingClassificationLabel* drawingclassificationlabel_;
  const ::TuriCreate::Annotation::Specification::ImageClassificationLabel* imageclassificationlabel_;
  const ::TuriCreate::Annotation::Specification::ObjectDetectionLabel* objectdetectionlabel_;
} _Label_default_instance_;
class AnnotationDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Annotation> {
} _Annotation_default_instance_;
class AnnotationsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Annotations> {
} _Annotations_default_instance_;

namespace protobuf_annotate_2eproto {

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};


void TableStruct::Shutdown() {
  _ActivityClassificationLabel_default_instance_.Shutdown();
  _AudioClassificationLabel_default_instance_.Shutdown();
  _DrawingClassificationLabel_default_instance_.Shutdown();
  _ImageClassificationLabel_default_instance_.Shutdown();
  _ObjectDetectionLabel_default_instance_.Shutdown();
  _Label_default_instance_.Shutdown();
  _Annotation_default_instance_.Shutdown();
  _Annotations_default_instance_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _ActivityClassificationLabel_default_instance_.DefaultConstruct();
  _AudioClassificationLabel_default_instance_.DefaultConstruct();
  _DrawingClassificationLabel_default_instance_.DefaultConstruct();
  _ImageClassificationLabel_default_instance_.DefaultConstruct();
  _ObjectDetectionLabel_default_instance_.DefaultConstruct();
  _Label_default_instance_.DefaultConstruct();
  _Annotation_default_instance_.DefaultConstruct();
  _Annotations_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER

}  // namespace protobuf_annotate_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ActivityClassificationLabel::kStartFieldNumber;
const int ActivityClassificationLabel::kStopFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ActivityClassificationLabel::ActivityClassificationLabel()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_annotate_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:TuriCreate.Annotation.Specification.ActivityClassificationLabel)
}
ActivityClassificationLabel::ActivityClassificationLabel(const ActivityClassificationLabel& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&start_, &from.start_,
    reinterpret_cast<char*>(&stop_) -
    reinterpret_cast<char*>(&start_) + sizeof(stop_));
  // @@protoc_insertion_point(copy_constructor:TuriCreate.Annotation.Specification.ActivityClassificationLabel)
}

void ActivityClassificationLabel::SharedCtor() {
  ::memset(&start_, 0, reinterpret_cast<char*>(&stop_) -
    reinterpret_cast<char*>(&start_) + sizeof(stop_));
  _cached_size_ = 0;
}

ActivityClassificationLabel::~ActivityClassificationLabel() {
  // @@protoc_insertion_point(destructor:TuriCreate.Annotation.Specification.ActivityClassificationLabel)
  SharedDtor();
}

void ActivityClassificationLabel::SharedDtor() {
}

void ActivityClassificationLabel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ActivityClassificationLabel& ActivityClassificationLabel::default_instance() {
  protobuf_annotate_2eproto::InitDefaults();
  return *internal_default_instance();
}

ActivityClassificationLabel* ActivityClassificationLabel::New(::google::protobuf::Arena* arena) const {
  ActivityClassificationLabel* n = new ActivityClassificationLabel;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ActivityClassificationLabel::Clear() {
// @@protoc_insertion_point(message_clear_start:TuriCreate.Annotation.Specification.ActivityClassificationLabel)
  ::memset(&start_, 0, reinterpret_cast<char*>(&stop_) -
    reinterpret_cast<char*>(&start_) + sizeof(stop_));
}

bool ActivityClassificationLabel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TuriCreate.Annotation.Specification.ActivityClassificationLabel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double start = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &start_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double stop = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &stop_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TuriCreate.Annotation.Specification.ActivityClassificationLabel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TuriCreate.Annotation.Specification.ActivityClassificationLabel)
  return false;
#undef DO_
}

void ActivityClassificationLabel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TuriCreate.Annotation.Specification.ActivityClassificationLabel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double start = 6;
  if (this->start() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->start(), output);
  }

  // double stop = 7;
  if (this->stop() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->stop(), output);
  }

  // @@protoc_insertion_point(serialize_end:TuriCreate.Annotation.Specification.ActivityClassificationLabel)
}

size_t ActivityClassificationLabel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TuriCreate.Annotation.Specification.ActivityClassificationLabel)
  size_t total_size = 0;

  // double start = 6;
  if (this->start() != 0) {
    total_size += 1 + 8;
  }

  // double stop = 7;
  if (this->stop() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActivityClassificationLabel::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ActivityClassificationLabel*>(&from));
}

void ActivityClassificationLabel::MergeFrom(const ActivityClassificationLabel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TuriCreate.Annotation.Specification.ActivityClassificationLabel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.start() != 0) {
    set_start(from.start());
  }
  if (from.stop() != 0) {
    set_stop(from.stop());
  }
}

void ActivityClassificationLabel::CopyFrom(const ActivityClassificationLabel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TuriCreate.Annotation.Specification.ActivityClassificationLabel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityClassificationLabel::IsInitialized() const {
  return true;
}

void ActivityClassificationLabel::Swap(ActivityClassificationLabel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ActivityClassificationLabel::InternalSwap(ActivityClassificationLabel* other) {
  std::swap(start_, other->start_);
  std::swap(stop_, other->stop_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ActivityClassificationLabel::GetTypeName() const {
  return "TuriCreate.Annotation.Specification.ActivityClassificationLabel";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ActivityClassificationLabel

// double start = 6;
void ActivityClassificationLabel::clear_start() {
  start_ = 0;
}
double ActivityClassificationLabel::start() const {
  // @@protoc_insertion_point(field_get:TuriCreate.Annotation.Specification.ActivityClassificationLabel.start)
  return start_;
}
void ActivityClassificationLabel::set_start(double value) {

  start_ = value;
  // @@protoc_insertion_point(field_set:TuriCreate.Annotation.Specification.ActivityClassificationLabel.start)
}

// double stop = 7;
void ActivityClassificationLabel::clear_stop() {
  stop_ = 0;
}
double ActivityClassificationLabel::stop() const {
  // @@protoc_insertion_point(field_get:TuriCreate.Annotation.Specification.ActivityClassificationLabel.stop)
  return stop_;
}
void ActivityClassificationLabel::set_stop(double value) {

  stop_ = value;
  // @@protoc_insertion_point(field_set:TuriCreate.Annotation.Specification.ActivityClassificationLabel.stop)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AudioClassificationLabel::kStartFieldNumber;
const int AudioClassificationLabel::kStopFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AudioClassificationLabel::AudioClassificationLabel()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_annotate_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:TuriCreate.Annotation.Specification.AudioClassificationLabel)
}
AudioClassificationLabel::AudioClassificationLabel(const AudioClassificationLabel& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&start_, &from.start_,
    reinterpret_cast<char*>(&stop_) -
    reinterpret_cast<char*>(&start_) + sizeof(stop_));
  // @@protoc_insertion_point(copy_constructor:TuriCreate.Annotation.Specification.AudioClassificationLabel)
}

void AudioClassificationLabel::SharedCtor() {
  ::memset(&start_, 0, reinterpret_cast<char*>(&stop_) -
    reinterpret_cast<char*>(&start_) + sizeof(stop_));
  _cached_size_ = 0;
}

AudioClassificationLabel::~AudioClassificationLabel() {
  // @@protoc_insertion_point(destructor:TuriCreate.Annotation.Specification.AudioClassificationLabel)
  SharedDtor();
}

void AudioClassificationLabel::SharedDtor() {
}

void AudioClassificationLabel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AudioClassificationLabel& AudioClassificationLabel::default_instance() {
  protobuf_annotate_2eproto::InitDefaults();
  return *internal_default_instance();
}

AudioClassificationLabel* AudioClassificationLabel::New(::google::protobuf::Arena* arena) const {
  AudioClassificationLabel* n = new AudioClassificationLabel;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AudioClassificationLabel::Clear() {
// @@protoc_insertion_point(message_clear_start:TuriCreate.Annotation.Specification.AudioClassificationLabel)
  ::memset(&start_, 0, reinterpret_cast<char*>(&stop_) -
    reinterpret_cast<char*>(&start_) + sizeof(stop_));
}

bool AudioClassificationLabel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TuriCreate.Annotation.Specification.AudioClassificationLabel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double start = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &start_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double stop = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &stop_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TuriCreate.Annotation.Specification.AudioClassificationLabel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TuriCreate.Annotation.Specification.AudioClassificationLabel)
  return false;
#undef DO_
}

void AudioClassificationLabel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TuriCreate.Annotation.Specification.AudioClassificationLabel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double start = 6;
  if (this->start() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->start(), output);
  }

  // double stop = 7;
  if (this->stop() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->stop(), output);
  }

  // @@protoc_insertion_point(serialize_end:TuriCreate.Annotation.Specification.AudioClassificationLabel)
}

size_t AudioClassificationLabel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TuriCreate.Annotation.Specification.AudioClassificationLabel)
  size_t total_size = 0;

  // double start = 6;
  if (this->start() != 0) {
    total_size += 1 + 8;
  }

  // double stop = 7;
  if (this->stop() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AudioClassificationLabel::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AudioClassificationLabel*>(&from));
}

void AudioClassificationLabel::MergeFrom(const AudioClassificationLabel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TuriCreate.Annotation.Specification.AudioClassificationLabel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.start() != 0) {
    set_start(from.start());
  }
  if (from.stop() != 0) {
    set_stop(from.stop());
  }
}

void AudioClassificationLabel::CopyFrom(const AudioClassificationLabel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TuriCreate.Annotation.Specification.AudioClassificationLabel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioClassificationLabel::IsInitialized() const {
  return true;
}

void AudioClassificationLabel::Swap(AudioClassificationLabel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AudioClassificationLabel::InternalSwap(AudioClassificationLabel* other) {
  std::swap(start_, other->start_);
  std::swap(stop_, other->stop_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string AudioClassificationLabel::GetTypeName() const {
  return "TuriCreate.Annotation.Specification.AudioClassificationLabel";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AudioClassificationLabel

// double start = 6;
void AudioClassificationLabel::clear_start() {
  start_ = 0;
}
double AudioClassificationLabel::start() const {
  // @@protoc_insertion_point(field_get:TuriCreate.Annotation.Specification.AudioClassificationLabel.start)
  return start_;
}
void AudioClassificationLabel::set_start(double value) {

  start_ = value;
  // @@protoc_insertion_point(field_set:TuriCreate.Annotation.Specification.AudioClassificationLabel.start)
}

// double stop = 7;
void AudioClassificationLabel::clear_stop() {
  stop_ = 0;
}
double AudioClassificationLabel::stop() const {
  // @@protoc_insertion_point(field_get:TuriCreate.Annotation.Specification.AudioClassificationLabel.stop)
  return stop_;
}
void AudioClassificationLabel::set_stop(double value) {

  stop_ = value;
  // @@protoc_insertion_point(field_set:TuriCreate.Annotation.Specification.AudioClassificationLabel.stop)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DrawingClassificationLabel::DrawingClassificationLabel()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_annotate_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:TuriCreate.Annotation.Specification.DrawingClassificationLabel)
}
DrawingClassificationLabel::DrawingClassificationLabel(const DrawingClassificationLabel& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TuriCreate.Annotation.Specification.DrawingClassificationLabel)
}

void DrawingClassificationLabel::SharedCtor() {
  _cached_size_ = 0;
}

DrawingClassificationLabel::~DrawingClassificationLabel() {
  // @@protoc_insertion_point(destructor:TuriCreate.Annotation.Specification.DrawingClassificationLabel)
  SharedDtor();
}

void DrawingClassificationLabel::SharedDtor() {
}

void DrawingClassificationLabel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DrawingClassificationLabel& DrawingClassificationLabel::default_instance() {
  protobuf_annotate_2eproto::InitDefaults();
  return *internal_default_instance();
}

DrawingClassificationLabel* DrawingClassificationLabel::New(::google::protobuf::Arena* arena) const {
  DrawingClassificationLabel* n = new DrawingClassificationLabel;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DrawingClassificationLabel::Clear() {
// @@protoc_insertion_point(message_clear_start:TuriCreate.Annotation.Specification.DrawingClassificationLabel)
}

bool DrawingClassificationLabel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TuriCreate.Annotation.Specification.DrawingClassificationLabel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:TuriCreate.Annotation.Specification.DrawingClassificationLabel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TuriCreate.Annotation.Specification.DrawingClassificationLabel)
  return false;
#undef DO_
}

void DrawingClassificationLabel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TuriCreate.Annotation.Specification.DrawingClassificationLabel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // @@protoc_insertion_point(serialize_end:TuriCreate.Annotation.Specification.DrawingClassificationLabel)
}

size_t DrawingClassificationLabel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TuriCreate.Annotation.Specification.DrawingClassificationLabel)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DrawingClassificationLabel::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DrawingClassificationLabel*>(&from));
}

void DrawingClassificationLabel::MergeFrom(const DrawingClassificationLabel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TuriCreate.Annotation.Specification.DrawingClassificationLabel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void DrawingClassificationLabel::CopyFrom(const DrawingClassificationLabel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TuriCreate.Annotation.Specification.DrawingClassificationLabel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DrawingClassificationLabel::IsInitialized() const {
  return true;
}

void DrawingClassificationLabel::Swap(DrawingClassificationLabel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DrawingClassificationLabel::InternalSwap(DrawingClassificationLabel* other) {
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string DrawingClassificationLabel::GetTypeName() const {
  return "TuriCreate.Annotation.Specification.DrawingClassificationLabel";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DrawingClassificationLabel

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImageClassificationLabel::ImageClassificationLabel()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_annotate_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:TuriCreate.Annotation.Specification.ImageClassificationLabel)
}
ImageClassificationLabel::ImageClassificationLabel(const ImageClassificationLabel& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TuriCreate.Annotation.Specification.ImageClassificationLabel)
}

void ImageClassificationLabel::SharedCtor() {
  _cached_size_ = 0;
}

ImageClassificationLabel::~ImageClassificationLabel() {
  // @@protoc_insertion_point(destructor:TuriCreate.Annotation.Specification.ImageClassificationLabel)
  SharedDtor();
}

void ImageClassificationLabel::SharedDtor() {
}

void ImageClassificationLabel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ImageClassificationLabel& ImageClassificationLabel::default_instance() {
  protobuf_annotate_2eproto::InitDefaults();
  return *internal_default_instance();
}

ImageClassificationLabel* ImageClassificationLabel::New(::google::protobuf::Arena* arena) const {
  ImageClassificationLabel* n = new ImageClassificationLabel;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ImageClassificationLabel::Clear() {
// @@protoc_insertion_point(message_clear_start:TuriCreate.Annotation.Specification.ImageClassificationLabel)
}

bool ImageClassificationLabel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TuriCreate.Annotation.Specification.ImageClassificationLabel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:TuriCreate.Annotation.Specification.ImageClassificationLabel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TuriCreate.Annotation.Specification.ImageClassificationLabel)
  return false;
#undef DO_
}

void ImageClassificationLabel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TuriCreate.Annotation.Specification.ImageClassificationLabel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // @@protoc_insertion_point(serialize_end:TuriCreate.Annotation.Specification.ImageClassificationLabel)
}

size_t ImageClassificationLabel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TuriCreate.Annotation.Specification.ImageClassificationLabel)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImageClassificationLabel::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ImageClassificationLabel*>(&from));
}

void ImageClassificationLabel::MergeFrom(const ImageClassificationLabel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TuriCreate.Annotation.Specification.ImageClassificationLabel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ImageClassificationLabel::CopyFrom(const ImageClassificationLabel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TuriCreate.Annotation.Specification.ImageClassificationLabel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageClassificationLabel::IsInitialized() const {
  return true;
}

void ImageClassificationLabel::Swap(ImageClassificationLabel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ImageClassificationLabel::InternalSwap(ImageClassificationLabel* other) {
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ImageClassificationLabel::GetTypeName() const {
  return "TuriCreate.Annotation.Specification.ImageClassificationLabel";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ImageClassificationLabel

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ObjectDetectionLabel::kHeightFieldNumber;
const int ObjectDetectionLabel::kWidthFieldNumber;
const int ObjectDetectionLabel::kXFieldNumber;
const int ObjectDetectionLabel::kYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ObjectDetectionLabel::ObjectDetectionLabel()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_annotate_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:TuriCreate.Annotation.Specification.ObjectDetectionLabel)
}
ObjectDetectionLabel::ObjectDetectionLabel(const ObjectDetectionLabel& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&height_, &from.height_,
    reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&height_) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:TuriCreate.Annotation.Specification.ObjectDetectionLabel)
}

void ObjectDetectionLabel::SharedCtor() {
  ::memset(&height_, 0, reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&height_) + sizeof(y_));
  _cached_size_ = 0;
}

ObjectDetectionLabel::~ObjectDetectionLabel() {
  // @@protoc_insertion_point(destructor:TuriCreate.Annotation.Specification.ObjectDetectionLabel)
  SharedDtor();
}

void ObjectDetectionLabel::SharedDtor() {
}

void ObjectDetectionLabel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ObjectDetectionLabel& ObjectDetectionLabel::default_instance() {
  protobuf_annotate_2eproto::InitDefaults();
  return *internal_default_instance();
}

ObjectDetectionLabel* ObjectDetectionLabel::New(::google::protobuf::Arena* arena) const {
  ObjectDetectionLabel* n = new ObjectDetectionLabel;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ObjectDetectionLabel::Clear() {
// @@protoc_insertion_point(message_clear_start:TuriCreate.Annotation.Specification.ObjectDetectionLabel)
  ::memset(&height_, 0, reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&height_) + sizeof(y_));
}

bool ObjectDetectionLabel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TuriCreate.Annotation.Specification.ObjectDetectionLabel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double height = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double width = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double x = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double y = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TuriCreate.Annotation.Specification.ObjectDetectionLabel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TuriCreate.Annotation.Specification.ObjectDetectionLabel)
  return false;
#undef DO_
}

void ObjectDetectionLabel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TuriCreate.Annotation.Specification.ObjectDetectionLabel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double height = 1;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->height(), output);
  }

  // double width = 2;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->width(), output);
  }

  // double x = 4;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->x(), output);
  }

  // double y = 5;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->y(), output);
  }

  // @@protoc_insertion_point(serialize_end:TuriCreate.Annotation.Specification.ObjectDetectionLabel)
}

size_t ObjectDetectionLabel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TuriCreate.Annotation.Specification.ObjectDetectionLabel)
  size_t total_size = 0;

  // double height = 1;
  if (this->height() != 0) {
    total_size += 1 + 8;
  }

  // double width = 2;
  if (this->width() != 0) {
    total_size += 1 + 8;
  }

  // double x = 4;
  if (this->x() != 0) {
    total_size += 1 + 8;
  }

  // double y = 5;
  if (this->y() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObjectDetectionLabel::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ObjectDetectionLabel*>(&from));
}

void ObjectDetectionLabel::MergeFrom(const ObjectDetectionLabel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TuriCreate.Annotation.Specification.ObjectDetectionLabel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.height() != 0) {
    set_height(from.height());
  }
  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
}

void ObjectDetectionLabel::CopyFrom(const ObjectDetectionLabel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TuriCreate.Annotation.Specification.ObjectDetectionLabel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectDetectionLabel::IsInitialized() const {
  return true;
}

void ObjectDetectionLabel::Swap(ObjectDetectionLabel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ObjectDetectionLabel::InternalSwap(ObjectDetectionLabel* other) {
  std::swap(height_, other->height_);
  std::swap(width_, other->width_);
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ObjectDetectionLabel::GetTypeName() const {
  return "TuriCreate.Annotation.Specification.ObjectDetectionLabel";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ObjectDetectionLabel

// double height = 1;
void ObjectDetectionLabel::clear_height() {
  height_ = 0;
}
double ObjectDetectionLabel::height() const {
  // @@protoc_insertion_point(field_get:TuriCreate.Annotation.Specification.ObjectDetectionLabel.height)
  return height_;
}
void ObjectDetectionLabel::set_height(double value) {

  height_ = value;
  // @@protoc_insertion_point(field_set:TuriCreate.Annotation.Specification.ObjectDetectionLabel.height)
}

// double width = 2;
void ObjectDetectionLabel::clear_width() {
  width_ = 0;
}
double ObjectDetectionLabel::width() const {
  // @@protoc_insertion_point(field_get:TuriCreate.Annotation.Specification.ObjectDetectionLabel.width)
  return width_;
}
void ObjectDetectionLabel::set_width(double value) {

  width_ = value;
  // @@protoc_insertion_point(field_set:TuriCreate.Annotation.Specification.ObjectDetectionLabel.width)
}

// double x = 4;
void ObjectDetectionLabel::clear_x() {
  x_ = 0;
}
double ObjectDetectionLabel::x() const {
  // @@protoc_insertion_point(field_get:TuriCreate.Annotation.Specification.ObjectDetectionLabel.x)
  return x_;
}
void ObjectDetectionLabel::set_x(double value) {

  x_ = value;
  // @@protoc_insertion_point(field_set:TuriCreate.Annotation.Specification.ObjectDetectionLabel.x)
}

// double y = 5;
void ObjectDetectionLabel::clear_y() {
  y_ = 0;
}
double ObjectDetectionLabel::y() const {
  // @@protoc_insertion_point(field_get:TuriCreate.Annotation.Specification.ObjectDetectionLabel.y)
  return y_;
}
void ObjectDetectionLabel::set_y(double value) {

  y_ = value;
  // @@protoc_insertion_point(field_set:TuriCreate.Annotation.Specification.ObjectDetectionLabel.y)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Label::kIntLabelFieldNumber;
const int Label::kStringLabelFieldNumber;
const int Label::kActivityClassificationLabelFieldNumber;
const int Label::kAudioClassificationLabelFieldNumber;
const int Label::kDrawingClassificationLabelFieldNumber;
const int Label::kImageClassificationLabelFieldNumber;
const int Label::kObjectDetectionLabelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Label::Label()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_annotate_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:TuriCreate.Annotation.Specification.Label)
}
Label::Label(const Label& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_labelIdentifier();
  switch (from.labelIdentifier_case()) {
    case kIntLabel: {
      set_intlabel(from.intlabel());
      break;
    }
    case kStringLabel: {
      set_stringlabel(from.stringlabel());
      break;
    }
    case LABELIDENTIFIER_NOT_SET: {
      break;
    }
  }
  clear_has_labelType();
  switch (from.labelType_case()) {
    case kActivityClassificationLabel: {
      mutable_activityclassificationlabel()->::TuriCreate::Annotation::Specification::ActivityClassificationLabel::MergeFrom(from.activityclassificationlabel());
      break;
    }
    case kAudioClassificationLabel: {
      mutable_audioclassificationlabel()->::TuriCreate::Annotation::Specification::AudioClassificationLabel::MergeFrom(from.audioclassificationlabel());
      break;
    }
    case kDrawingClassificationLabel: {
      mutable_drawingclassificationlabel()->::TuriCreate::Annotation::Specification::DrawingClassificationLabel::MergeFrom(from.drawingclassificationlabel());
      break;
    }
    case kImageClassificationLabel: {
      mutable_imageclassificationlabel()->::TuriCreate::Annotation::Specification::ImageClassificationLabel::MergeFrom(from.imageclassificationlabel());
      break;
    }
    case kObjectDetectionLabel: {
      mutable_objectdetectionlabel()->::TuriCreate::Annotation::Specification::ObjectDetectionLabel::MergeFrom(from.objectdetectionlabel());
      break;
    }
    case LABELTYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:TuriCreate.Annotation.Specification.Label)
}

void Label::SharedCtor() {
  clear_has_labelIdentifier();
  clear_has_labelType();
  _cached_size_ = 0;
}

Label::~Label() {
  // @@protoc_insertion_point(destructor:TuriCreate.Annotation.Specification.Label)
  SharedDtor();
}

void Label::SharedDtor() {
  if (has_labelIdentifier()) {
    clear_labelIdentifier();
  }
  if (has_labelType()) {
    clear_labelType();
  }
}

void Label::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Label& Label::default_instance() {
  protobuf_annotate_2eproto::InitDefaults();
  return *internal_default_instance();
}

Label* Label::New(::google::protobuf::Arena* arena) const {
  Label* n = new Label;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Label::clear_labelIdentifier() {
// @@protoc_insertion_point(one_of_clear_start:TuriCreate.Annotation.Specification.Label)
  switch (labelIdentifier_case()) {
    case kIntLabel: {
      // No need to clear
      break;
    }
    case kStringLabel: {
      labelIdentifier_.stringlabel_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case LABELIDENTIFIER_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = LABELIDENTIFIER_NOT_SET;
}

void Label::clear_labelType() {
// @@protoc_insertion_point(one_of_clear_start:TuriCreate.Annotation.Specification.Label)
  switch (labelType_case()) {
    case kActivityClassificationLabel: {
      delete labelType_.activityclassificationlabel_;
      break;
    }
    case kAudioClassificationLabel: {
      delete labelType_.audioclassificationlabel_;
      break;
    }
    case kDrawingClassificationLabel: {
      delete labelType_.drawingclassificationlabel_;
      break;
    }
    case kImageClassificationLabel: {
      delete labelType_.imageclassificationlabel_;
      break;
    }
    case kObjectDetectionLabel: {
      delete labelType_.objectdetectionlabel_;
      break;
    }
    case LABELTYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = LABELTYPE_NOT_SET;
}


void Label::Clear() {
// @@protoc_insertion_point(message_clear_start:TuriCreate.Annotation.Specification.Label)
  clear_labelIdentifier();
  clear_labelType();
}

bool Label::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TuriCreate.Annotation.Specification.Label)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 intLabel = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          clear_labelIdentifier();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &labelIdentifier_.intlabel_)));
          set_has_intlabel();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string stringLabel = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stringlabel()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->stringlabel().data(), this->stringlabel().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TuriCreate.Annotation.Specification.Label.stringLabel"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .TuriCreate.Annotation.Specification.ActivityClassificationLabel activityClassificationLabel = 100;
      case 100: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(802u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_activityclassificationlabel()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .TuriCreate.Annotation.Specification.AudioClassificationLabel audioClassificationLabel = 200;
      case 200: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(1602u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_audioclassificationlabel()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .TuriCreate.Annotation.Specification.DrawingClassificationLabel drawingClassificationLabel = 300;
      case 300: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(2402u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_drawingclassificationlabel()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .TuriCreate.Annotation.Specification.ImageClassificationLabel imageClassificationLabel = 400;
      case 400: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(3202u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_imageclassificationlabel()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .TuriCreate.Annotation.Specification.ObjectDetectionLabel objectDetectionLabel = 500;
      case 500: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(4002u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_objectdetectionlabel()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TuriCreate.Annotation.Specification.Label)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TuriCreate.Annotation.Specification.Label)
  return false;
#undef DO_
}

void Label::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TuriCreate.Annotation.Specification.Label)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 intLabel = 1;
  if (has_intlabel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->intlabel(), output);
  }

  // string stringLabel = 2;
  if (has_stringlabel()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stringlabel().data(), this->stringlabel().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TuriCreate.Annotation.Specification.Label.stringLabel");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->stringlabel(), output);
  }

  // .TuriCreate.Annotation.Specification.ActivityClassificationLabel activityClassificationLabel = 100;
  if (has_activityclassificationlabel()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      100, *labelType_.activityclassificationlabel_, output);
  }

  // .TuriCreate.Annotation.Specification.AudioClassificationLabel audioClassificationLabel = 200;
  if (has_audioclassificationlabel()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      200, *labelType_.audioclassificationlabel_, output);
  }

  // .TuriCreate.Annotation.Specification.DrawingClassificationLabel drawingClassificationLabel = 300;
  if (has_drawingclassificationlabel()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      300, *labelType_.drawingclassificationlabel_, output);
  }

  // .TuriCreate.Annotation.Specification.ImageClassificationLabel imageClassificationLabel = 400;
  if (has_imageclassificationlabel()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      400, *labelType_.imageclassificationlabel_, output);
  }

  // .TuriCreate.Annotation.Specification.ObjectDetectionLabel objectDetectionLabel = 500;
  if (has_objectdetectionlabel()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      500, *labelType_.objectdetectionlabel_, output);
  }

  // @@protoc_insertion_point(serialize_end:TuriCreate.Annotation.Specification.Label)
}

size_t Label::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TuriCreate.Annotation.Specification.Label)
  size_t total_size = 0;

  switch (labelIdentifier_case()) {
    // int64 intLabel = 1;
    case kIntLabel: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->intlabel());
      break;
    }
    // string stringLabel = 2;
    case kStringLabel: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stringlabel());
      break;
    }
    case LABELIDENTIFIER_NOT_SET: {
      break;
    }
  }
  switch (labelType_case()) {
    // .TuriCreate.Annotation.Specification.ActivityClassificationLabel activityClassificationLabel = 100;
    case kActivityClassificationLabel: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *labelType_.activityclassificationlabel_);
      break;
    }
    // .TuriCreate.Annotation.Specification.AudioClassificationLabel audioClassificationLabel = 200;
    case kAudioClassificationLabel: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *labelType_.audioclassificationlabel_);
      break;
    }
    // .TuriCreate.Annotation.Specification.DrawingClassificationLabel drawingClassificationLabel = 300;
    case kDrawingClassificationLabel: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *labelType_.drawingclassificationlabel_);
      break;
    }
    // .TuriCreate.Annotation.Specification.ImageClassificationLabel imageClassificationLabel = 400;
    case kImageClassificationLabel: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *labelType_.imageclassificationlabel_);
      break;
    }
    // .TuriCreate.Annotation.Specification.ObjectDetectionLabel objectDetectionLabel = 500;
    case kObjectDetectionLabel: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *labelType_.objectdetectionlabel_);
      break;
    }
    case LABELTYPE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Label::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Label*>(&from));
}

void Label::MergeFrom(const Label& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TuriCreate.Annotation.Specification.Label)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.labelIdentifier_case()) {
    case kIntLabel: {
      set_intlabel(from.intlabel());
      break;
    }
    case kStringLabel: {
      set_stringlabel(from.stringlabel());
      break;
    }
    case LABELIDENTIFIER_NOT_SET: {
      break;
    }
  }
  switch (from.labelType_case()) {
    case kActivityClassificationLabel: {
      mutable_activityclassificationlabel()->::TuriCreate::Annotation::Specification::ActivityClassificationLabel::MergeFrom(from.activityclassificationlabel());
      break;
    }
    case kAudioClassificationLabel: {
      mutable_audioclassificationlabel()->::TuriCreate::Annotation::Specification::AudioClassificationLabel::MergeFrom(from.audioclassificationlabel());
      break;
    }
    case kDrawingClassificationLabel: {
      mutable_drawingclassificationlabel()->::TuriCreate::Annotation::Specification::DrawingClassificationLabel::MergeFrom(from.drawingclassificationlabel());
      break;
    }
    case kImageClassificationLabel: {
      mutable_imageclassificationlabel()->::TuriCreate::Annotation::Specification::ImageClassificationLabel::MergeFrom(from.imageclassificationlabel());
      break;
    }
    case kObjectDetectionLabel: {
      mutable_objectdetectionlabel()->::TuriCreate::Annotation::Specification::ObjectDetectionLabel::MergeFrom(from.objectdetectionlabel());
      break;
    }
    case LABELTYPE_NOT_SET: {
      break;
    }
  }
}

void Label::CopyFrom(const Label& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TuriCreate.Annotation.Specification.Label)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Label::IsInitialized() const {
  return true;
}

void Label::Swap(Label* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Label::InternalSwap(Label* other) {
  std::swap(labelIdentifier_, other->labelIdentifier_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(labelType_, other->labelType_);
  std::swap(_oneof_case_[1], other->_oneof_case_[1]);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Label::GetTypeName() const {
  return "TuriCreate.Annotation.Specification.Label";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Label

// int64 intLabel = 1;
bool Label::has_intlabel() const {
  return labelIdentifier_case() == kIntLabel;
}
void Label::set_has_intlabel() {
  _oneof_case_[0] = kIntLabel;
}
void Label::clear_intlabel() {
  if (has_intlabel()) {
    labelIdentifier_.intlabel_ = GOOGLE_LONGLONG(0);
    clear_has_labelIdentifier();
  }
}
::google::protobuf::int64 Label::intlabel() const {
  // @@protoc_insertion_point(field_get:TuriCreate.Annotation.Specification.Label.intLabel)
  if (has_intlabel()) {
    return labelIdentifier_.intlabel_;
  }
  return GOOGLE_LONGLONG(0);
}
void Label::set_intlabel(::google::protobuf::int64 value) {
  if (!has_intlabel()) {
    clear_labelIdentifier();
    set_has_intlabel();
  }
  labelIdentifier_.intlabel_ = value;
  // @@protoc_insertion_point(field_set:TuriCreate.Annotation.Specification.Label.intLabel)
}

// string stringLabel = 2;
bool Label::has_stringlabel() const {
  return labelIdentifier_case() == kStringLabel;
}
void Label::set_has_stringlabel() {
  _oneof_case_[0] = kStringLabel;
}
void Label::clear_stringlabel() {
  if (has_stringlabel()) {
    labelIdentifier_.stringlabel_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_labelIdentifier();
  }
}
const ::std::string& Label::stringlabel() const {
  // @@protoc_insertion_point(field_get:TuriCreate.Annotation.Specification.Label.stringLabel)
  if (has_stringlabel()) {
    return labelIdentifier_.stringlabel_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void Label::set_stringlabel(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:TuriCreate.Annotation.Specification.Label.stringLabel)
  if (!has_stringlabel()) {
    clear_labelIdentifier();
    set_has_stringlabel();
    labelIdentifier_.stringlabel_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  labelIdentifier_.stringlabel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TuriCreate.Annotation.Specification.Label.stringLabel)
}
#if LANG_CXX11
void Label::set_stringlabel(::std::string&& value) {
  // @@protoc_insertion_point(field_set:TuriCreate.Annotation.Specification.Label.stringLabel)
  if (!has_stringlabel()) {
    clear_labelIdentifier();
    set_has_stringlabel();
    labelIdentifier_.stringlabel_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  labelIdentifier_.stringlabel_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TuriCreate.Annotation.Specification.Label.stringLabel)
}
#endif
void Label::set_stringlabel(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_stringlabel()) {
    clear_labelIdentifier();
    set_has_stringlabel();
    labelIdentifier_.stringlabel_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  labelIdentifier_.stringlabel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TuriCreate.Annotation.Specification.Label.stringLabel)
}
void Label::set_stringlabel(const char* value, size_t size) {
  if (!has_stringlabel()) {
    clear_labelIdentifier();
    set_has_stringlabel();
    labelIdentifier_.stringlabel_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  labelIdentifier_.stringlabel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TuriCreate.Annotation.Specification.Label.stringLabel)
}
::std::string* Label::mutable_stringlabel() {
  if (!has_stringlabel()) {
    clear_labelIdentifier();
    set_has_stringlabel();
    labelIdentifier_.stringlabel_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:TuriCreate.Annotation.Specification.Label.stringLabel)
  return labelIdentifier_.stringlabel_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Label::release_stringlabel() {
  // @@protoc_insertion_point(field_release:TuriCreate.Annotation.Specification.Label.stringLabel)
  if (has_stringlabel()) {
    clear_has_labelIdentifier();
    return labelIdentifier_.stringlabel_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void Label::set_allocated_stringlabel(::std::string* stringlabel) {
  if (!has_stringlabel()) {
    labelIdentifier_.stringlabel_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_labelIdentifier();
  if (stringlabel != NULL) {
    set_has_stringlabel();
    labelIdentifier_.stringlabel_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        stringlabel);
  }
  // @@protoc_insertion_point(field_set_allocated:TuriCreate.Annotation.Specification.Label.stringLabel)
}

// .TuriCreate.Annotation.Specification.ActivityClassificationLabel activityClassificationLabel = 100;
bool Label::has_activityclassificationlabel() const {
  return labelType_case() == kActivityClassificationLabel;
}
void Label::set_has_activityclassificationlabel() {
  _oneof_case_[1] = kActivityClassificationLabel;
}
void Label::clear_activityclassificationlabel() {
  if (has_activityclassificationlabel()) {
    delete labelType_.activityclassificationlabel_;
    clear_has_labelType();
  }
}
 const ::TuriCreate::Annotation::Specification::ActivityClassificationLabel& Label::activityclassificationlabel() const {
  // @@protoc_insertion_point(field_get:TuriCreate.Annotation.Specification.Label.activityClassificationLabel)
  return has_activityclassificationlabel()
      ? *labelType_.activityclassificationlabel_
      : ::TuriCreate::Annotation::Specification::ActivityClassificationLabel::default_instance();
}
::TuriCreate::Annotation::Specification::ActivityClassificationLabel* Label::mutable_activityclassificationlabel() {
  if (!has_activityclassificationlabel()) {
    clear_labelType();
    set_has_activityclassificationlabel();
    labelType_.activityclassificationlabel_ = new ::TuriCreate::Annotation::Specification::ActivityClassificationLabel;
  }
  // @@protoc_insertion_point(field_mutable:TuriCreate.Annotation.Specification.Label.activityClassificationLabel)
  return labelType_.activityclassificationlabel_;
}
::TuriCreate::Annotation::Specification::ActivityClassificationLabel* Label::release_activityclassificationlabel() {
  // @@protoc_insertion_point(field_release:TuriCreate.Annotation.Specification.Label.activityClassificationLabel)
  if (has_activityclassificationlabel()) {
    clear_has_labelType();
    ::TuriCreate::Annotation::Specification::ActivityClassificationLabel* temp = labelType_.activityclassificationlabel_;
    labelType_.activityclassificationlabel_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Label::set_allocated_activityclassificationlabel(::TuriCreate::Annotation::Specification::ActivityClassificationLabel* activityclassificationlabel) {
  clear_labelType();
  if (activityclassificationlabel) {
    set_has_activityclassificationlabel();
    labelType_.activityclassificationlabel_ = activityclassificationlabel;
  }
  // @@protoc_insertion_point(field_set_allocated:TuriCreate.Annotation.Specification.Label.activityClassificationLabel)
}

// .TuriCreate.Annotation.Specification.AudioClassificationLabel audioClassificationLabel = 200;
bool Label::has_audioclassificationlabel() const {
  return labelType_case() == kAudioClassificationLabel;
}
void Label::set_has_audioclassificationlabel() {
  _oneof_case_[1] = kAudioClassificationLabel;
}
void Label::clear_audioclassificationlabel() {
  if (has_audioclassificationlabel()) {
    delete labelType_.audioclassificationlabel_;
    clear_has_labelType();
  }
}
 const ::TuriCreate::Annotation::Specification::AudioClassificationLabel& Label::audioclassificationlabel() const {
  // @@protoc_insertion_point(field_get:TuriCreate.Annotation.Specification.Label.audioClassificationLabel)
  return has_audioclassificationlabel()
      ? *labelType_.audioclassificationlabel_
      : ::TuriCreate::Annotation::Specification::AudioClassificationLabel::default_instance();
}
::TuriCreate::Annotation::Specification::AudioClassificationLabel* Label::mutable_audioclassificationlabel() {
  if (!has_audioclassificationlabel()) {
    clear_labelType();
    set_has_audioclassificationlabel();
    labelType_.audioclassificationlabel_ = new ::TuriCreate::Annotation::Specification::AudioClassificationLabel;
  }
  // @@protoc_insertion_point(field_mutable:TuriCreate.Annotation.Specification.Label.audioClassificationLabel)
  return labelType_.audioclassificationlabel_;
}
::TuriCreate::Annotation::Specification::AudioClassificationLabel* Label::release_audioclassificationlabel() {
  // @@protoc_insertion_point(field_release:TuriCreate.Annotation.Specification.Label.audioClassificationLabel)
  if (has_audioclassificationlabel()) {
    clear_has_labelType();
    ::TuriCreate::Annotation::Specification::AudioClassificationLabel* temp = labelType_.audioclassificationlabel_;
    labelType_.audioclassificationlabel_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Label::set_allocated_audioclassificationlabel(::TuriCreate::Annotation::Specification::AudioClassificationLabel* audioclassificationlabel) {
  clear_labelType();
  if (audioclassificationlabel) {
    set_has_audioclassificationlabel();
    labelType_.audioclassificationlabel_ = audioclassificationlabel;
  }
  // @@protoc_insertion_point(field_set_allocated:TuriCreate.Annotation.Specification.Label.audioClassificationLabel)
}

// .TuriCreate.Annotation.Specification.DrawingClassificationLabel drawingClassificationLabel = 300;
bool Label::has_drawingclassificationlabel() const {
  return labelType_case() == kDrawingClassificationLabel;
}
void Label::set_has_drawingclassificationlabel() {
  _oneof_case_[1] = kDrawingClassificationLabel;
}
void Label::clear_drawingclassificationlabel() {
  if (has_drawingclassificationlabel()) {
    delete labelType_.drawingclassificationlabel_;
    clear_has_labelType();
  }
}
 const ::TuriCreate::Annotation::Specification::DrawingClassificationLabel& Label::drawingclassificationlabel() const {
  // @@protoc_insertion_point(field_get:TuriCreate.Annotation.Specification.Label.drawingClassificationLabel)
  return has_drawingclassificationlabel()
      ? *labelType_.drawingclassificationlabel_
      : ::TuriCreate::Annotation::Specification::DrawingClassificationLabel::default_instance();
}
::TuriCreate::Annotation::Specification::DrawingClassificationLabel* Label::mutable_drawingclassificationlabel() {
  if (!has_drawingclassificationlabel()) {
    clear_labelType();
    set_has_drawingclassificationlabel();
    labelType_.drawingclassificationlabel_ = new ::TuriCreate::Annotation::Specification::DrawingClassificationLabel;
  }
  // @@protoc_insertion_point(field_mutable:TuriCreate.Annotation.Specification.Label.drawingClassificationLabel)
  return labelType_.drawingclassificationlabel_;
}
::TuriCreate::Annotation::Specification::DrawingClassificationLabel* Label::release_drawingclassificationlabel() {
  // @@protoc_insertion_point(field_release:TuriCreate.Annotation.Specification.Label.drawingClassificationLabel)
  if (has_drawingclassificationlabel()) {
    clear_has_labelType();
    ::TuriCreate::Annotation::Specification::DrawingClassificationLabel* temp = labelType_.drawingclassificationlabel_;
    labelType_.drawingclassificationlabel_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Label::set_allocated_drawingclassificationlabel(::TuriCreate::Annotation::Specification::DrawingClassificationLabel* drawingclassificationlabel) {
  clear_labelType();
  if (drawingclassificationlabel) {
    set_has_drawingclassificationlabel();
    labelType_.drawingclassificationlabel_ = drawingclassificationlabel;
  }
  // @@protoc_insertion_point(field_set_allocated:TuriCreate.Annotation.Specification.Label.drawingClassificationLabel)
}

// .TuriCreate.Annotation.Specification.ImageClassificationLabel imageClassificationLabel = 400;
bool Label::has_imageclassificationlabel() const {
  return labelType_case() == kImageClassificationLabel;
}
void Label::set_has_imageclassificationlabel() {
  _oneof_case_[1] = kImageClassificationLabel;
}
void Label::clear_imageclassificationlabel() {
  if (has_imageclassificationlabel()) {
    delete labelType_.imageclassificationlabel_;
    clear_has_labelType();
  }
}
 const ::TuriCreate::Annotation::Specification::ImageClassificationLabel& Label::imageclassificationlabel() const {
  // @@protoc_insertion_point(field_get:TuriCreate.Annotation.Specification.Label.imageClassificationLabel)
  return has_imageclassificationlabel()
      ? *labelType_.imageclassificationlabel_
      : ::TuriCreate::Annotation::Specification::ImageClassificationLabel::default_instance();
}
::TuriCreate::Annotation::Specification::ImageClassificationLabel* Label::mutable_imageclassificationlabel() {
  if (!has_imageclassificationlabel()) {
    clear_labelType();
    set_has_imageclassificationlabel();
    labelType_.imageclassificationlabel_ = new ::TuriCreate::Annotation::Specification::ImageClassificationLabel;
  }
  // @@protoc_insertion_point(field_mutable:TuriCreate.Annotation.Specification.Label.imageClassificationLabel)
  return labelType_.imageclassificationlabel_;
}
::TuriCreate::Annotation::Specification::ImageClassificationLabel* Label::release_imageclassificationlabel() {
  // @@protoc_insertion_point(field_release:TuriCreate.Annotation.Specification.Label.imageClassificationLabel)
  if (has_imageclassificationlabel()) {
    clear_has_labelType();
    ::TuriCreate::Annotation::Specification::ImageClassificationLabel* temp = labelType_.imageclassificationlabel_;
    labelType_.imageclassificationlabel_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Label::set_allocated_imageclassificationlabel(::TuriCreate::Annotation::Specification::ImageClassificationLabel* imageclassificationlabel) {
  clear_labelType();
  if (imageclassificationlabel) {
    set_has_imageclassificationlabel();
    labelType_.imageclassificationlabel_ = imageclassificationlabel;
  }
  // @@protoc_insertion_point(field_set_allocated:TuriCreate.Annotation.Specification.Label.imageClassificationLabel)
}

// .TuriCreate.Annotation.Specification.ObjectDetectionLabel objectDetectionLabel = 500;
bool Label::has_objectdetectionlabel() const {
  return labelType_case() == kObjectDetectionLabel;
}
void Label::set_has_objectdetectionlabel() {
  _oneof_case_[1] = kObjectDetectionLabel;
}
void Label::clear_objectdetectionlabel() {
  if (has_objectdetectionlabel()) {
    delete labelType_.objectdetectionlabel_;
    clear_has_labelType();
  }
}
 const ::TuriCreate::Annotation::Specification::ObjectDetectionLabel& Label::objectdetectionlabel() const {
  // @@protoc_insertion_point(field_get:TuriCreate.Annotation.Specification.Label.objectDetectionLabel)
  return has_objectdetectionlabel()
      ? *labelType_.objectdetectionlabel_
      : ::TuriCreate::Annotation::Specification::ObjectDetectionLabel::default_instance();
}
::TuriCreate::Annotation::Specification::ObjectDetectionLabel* Label::mutable_objectdetectionlabel() {
  if (!has_objectdetectionlabel()) {
    clear_labelType();
    set_has_objectdetectionlabel();
    labelType_.objectdetectionlabel_ = new ::TuriCreate::Annotation::Specification::ObjectDetectionLabel;
  }
  // @@protoc_insertion_point(field_mutable:TuriCreate.Annotation.Specification.Label.objectDetectionLabel)
  return labelType_.objectdetectionlabel_;
}
::TuriCreate::Annotation::Specification::ObjectDetectionLabel* Label::release_objectdetectionlabel() {
  // @@protoc_insertion_point(field_release:TuriCreate.Annotation.Specification.Label.objectDetectionLabel)
  if (has_objectdetectionlabel()) {
    clear_has_labelType();
    ::TuriCreate::Annotation::Specification::ObjectDetectionLabel* temp = labelType_.objectdetectionlabel_;
    labelType_.objectdetectionlabel_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Label::set_allocated_objectdetectionlabel(::TuriCreate::Annotation::Specification::ObjectDetectionLabel* objectdetectionlabel) {
  clear_labelType();
  if (objectdetectionlabel) {
    set_has_objectdetectionlabel();
    labelType_.objectdetectionlabel_ = objectdetectionlabel;
  }
  // @@protoc_insertion_point(field_set_allocated:TuriCreate.Annotation.Specification.Label.objectDetectionLabel)
}

bool Label::has_labelIdentifier() const {
  return labelIdentifier_case() != LABELIDENTIFIER_NOT_SET;
}
void Label::clear_has_labelIdentifier() {
  _oneof_case_[0] = LABELIDENTIFIER_NOT_SET;
}
bool Label::has_labelType() const {
  return labelType_case() != LABELTYPE_NOT_SET;
}
void Label::clear_has_labelType() {
  _oneof_case_[1] = LABELTYPE_NOT_SET;
}
Label::LabelIdentifierCase Label::labelIdentifier_case() const {
  return Label::LabelIdentifierCase(_oneof_case_[0]);
}
Label::LabelTypeCase Label::labelType_case() const {
  return Label::LabelTypeCase(_oneof_case_[1]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Annotation::kLabelsFieldNumber;
const int Annotation::kRowIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Annotation::Annotation()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_annotate_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:TuriCreate.Annotation.Specification.Annotation)
}
Annotation::Annotation(const Annotation& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      labels_(from.labels_),
      rowindex_(from.rowindex_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TuriCreate.Annotation.Specification.Annotation)
}

void Annotation::SharedCtor() {
  _cached_size_ = 0;
}

Annotation::~Annotation() {
  // @@protoc_insertion_point(destructor:TuriCreate.Annotation.Specification.Annotation)
  SharedDtor();
}

void Annotation::SharedDtor() {
}

void Annotation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Annotation& Annotation::default_instance() {
  protobuf_annotate_2eproto::InitDefaults();
  return *internal_default_instance();
}

Annotation* Annotation::New(::google::protobuf::Arena* arena) const {
  Annotation* n = new Annotation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Annotation::Clear() {
// @@protoc_insertion_point(message_clear_start:TuriCreate.Annotation.Specification.Annotation)
  labels_.Clear();
  rowindex_.Clear();
}

bool Annotation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TuriCreate.Annotation.Specification.Annotation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .TuriCreate.Annotation.Specification.Label labels = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_labels()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 rowIndex = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_rowindex())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(16u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 18u, input, this->mutable_rowindex())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TuriCreate.Annotation.Specification.Annotation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TuriCreate.Annotation.Specification.Annotation)
  return false;
#undef DO_
}

void Annotation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TuriCreate.Annotation.Specification.Annotation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TuriCreate.Annotation.Specification.Label labels = 1;
  for (unsigned int i = 0, n = this->labels_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->labels(i), output);
  }

  // repeated int64 rowIndex = 2;
  if (this->rowindex_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_rowindex_cached_byte_size_);
  }
  for (int i = 0, n = this->rowindex_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->rowindex(i), output);
  }

  // @@protoc_insertion_point(serialize_end:TuriCreate.Annotation.Specification.Annotation)
}

size_t Annotation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TuriCreate.Annotation.Specification.Annotation)
  size_t total_size = 0;

  // repeated .TuriCreate.Annotation.Specification.Label labels = 1;
  {
    unsigned int count = this->labels_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->labels(i));
    }
  }

  // repeated int64 rowIndex = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->rowindex_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _rowindex_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Annotation::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Annotation*>(&from));
}

void Annotation::MergeFrom(const Annotation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TuriCreate.Annotation.Specification.Annotation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  labels_.MergeFrom(from.labels_);
  rowindex_.MergeFrom(from.rowindex_);
}

void Annotation::CopyFrom(const Annotation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TuriCreate.Annotation.Specification.Annotation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Annotation::IsInitialized() const {
  return true;
}

void Annotation::Swap(Annotation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Annotation::InternalSwap(Annotation* other) {
  labels_.InternalSwap(&other->labels_);
  rowindex_.InternalSwap(&other->rowindex_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Annotation::GetTypeName() const {
  return "TuriCreate.Annotation.Specification.Annotation";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Annotation

// repeated .TuriCreate.Annotation.Specification.Label labels = 1;
int Annotation::labels_size() const {
  return labels_.size();
}
void Annotation::clear_labels() {
  labels_.Clear();
}
const ::TuriCreate::Annotation::Specification::Label& Annotation::labels(int index) const {
  // @@protoc_insertion_point(field_get:TuriCreate.Annotation.Specification.Annotation.labels)
  return labels_.Get(index);
}
::TuriCreate::Annotation::Specification::Label* Annotation::mutable_labels(int index) {
  // @@protoc_insertion_point(field_mutable:TuriCreate.Annotation.Specification.Annotation.labels)
  return labels_.Mutable(index);
}
::TuriCreate::Annotation::Specification::Label* Annotation::add_labels() {
  // @@protoc_insertion_point(field_add:TuriCreate.Annotation.Specification.Annotation.labels)
  return labels_.Add();
}
::google::protobuf::RepeatedPtrField< ::TuriCreate::Annotation::Specification::Label >*
Annotation::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_list:TuriCreate.Annotation.Specification.Annotation.labels)
  return &labels_;
}
const ::google::protobuf::RepeatedPtrField< ::TuriCreate::Annotation::Specification::Label >&
Annotation::labels() const {
  // @@protoc_insertion_point(field_list:TuriCreate.Annotation.Specification.Annotation.labels)
  return labels_;
}

// repeated int64 rowIndex = 2;
int Annotation::rowindex_size() const {
  return rowindex_.size();
}
void Annotation::clear_rowindex() {
  rowindex_.Clear();
}
::google::protobuf::int64 Annotation::rowindex(int index) const {
  // @@protoc_insertion_point(field_get:TuriCreate.Annotation.Specification.Annotation.rowIndex)
  return rowindex_.Get(index);
}
void Annotation::set_rowindex(int index, ::google::protobuf::int64 value) {
  rowindex_.Set(index, value);
  // @@protoc_insertion_point(field_set:TuriCreate.Annotation.Specification.Annotation.rowIndex)
}
void Annotation::add_rowindex(::google::protobuf::int64 value) {
  rowindex_.Add(value);
  // @@protoc_insertion_point(field_add:TuriCreate.Annotation.Specification.Annotation.rowIndex)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
Annotation::rowindex() const {
  // @@protoc_insertion_point(field_list:TuriCreate.Annotation.Specification.Annotation.rowIndex)
  return rowindex_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
Annotation::mutable_rowindex() {
  // @@protoc_insertion_point(field_mutable_list:TuriCreate.Annotation.Specification.Annotation.rowIndex)
  return &rowindex_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Annotations::kAnnotationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Annotations::Annotations()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_annotate_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:TuriCreate.Annotation.Specification.Annotations)
}
Annotations::Annotations(const Annotations& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      annotation_(from.annotation_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TuriCreate.Annotation.Specification.Annotations)
}

void Annotations::SharedCtor() {
  _cached_size_ = 0;
}

Annotations::~Annotations() {
  // @@protoc_insertion_point(destructor:TuriCreate.Annotation.Specification.Annotations)
  SharedDtor();
}

void Annotations::SharedDtor() {
}

void Annotations::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Annotations& Annotations::default_instance() {
  protobuf_annotate_2eproto::InitDefaults();
  return *internal_default_instance();
}

Annotations* Annotations::New(::google::protobuf::Arena* arena) const {
  Annotations* n = new Annotations;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Annotations::Clear() {
// @@protoc_insertion_point(message_clear_start:TuriCreate.Annotation.Specification.Annotations)
  annotation_.Clear();
}

bool Annotations::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TuriCreate.Annotation.Specification.Annotations)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .TuriCreate.Annotation.Specification.Annotation annotation = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_annotation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TuriCreate.Annotation.Specification.Annotations)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TuriCreate.Annotation.Specification.Annotations)
  return false;
#undef DO_
}

void Annotations::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TuriCreate.Annotation.Specification.Annotations)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TuriCreate.Annotation.Specification.Annotation annotation = 1;
  for (unsigned int i = 0, n = this->annotation_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->annotation(i), output);
  }

  // @@protoc_insertion_point(serialize_end:TuriCreate.Annotation.Specification.Annotations)
}

size_t Annotations::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TuriCreate.Annotation.Specification.Annotations)
  size_t total_size = 0;

  // repeated .TuriCreate.Annotation.Specification.Annotation annotation = 1;
  {
    unsigned int count = this->annotation_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->annotation(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Annotations::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Annotations*>(&from));
}

void Annotations::MergeFrom(const Annotations& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TuriCreate.Annotation.Specification.Annotations)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  annotation_.MergeFrom(from.annotation_);
}

void Annotations::CopyFrom(const Annotations& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TuriCreate.Annotation.Specification.Annotations)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Annotations::IsInitialized() const {
  return true;
}

void Annotations::Swap(Annotations* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Annotations::InternalSwap(Annotations* other) {
  annotation_.InternalSwap(&other->annotation_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Annotations::GetTypeName() const {
  return "TuriCreate.Annotation.Specification.Annotations";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Annotations

// repeated .TuriCreate.Annotation.Specification.Annotation annotation = 1;
int Annotations::annotation_size() const {
  return annotation_.size();
}
void Annotations::clear_annotation() {
  annotation_.Clear();
}
const ::TuriCreate::Annotation::Specification::Annotation& Annotations::annotation(int index) const {
  // @@protoc_insertion_point(field_get:TuriCreate.Annotation.Specification.Annotations.annotation)
  return annotation_.Get(index);
}
::TuriCreate::Annotation::Specification::Annotation* Annotations::mutable_annotation(int index) {
  // @@protoc_insertion_point(field_mutable:TuriCreate.Annotation.Specification.Annotations.annotation)
  return annotation_.Mutable(index);
}
::TuriCreate::Annotation::Specification::Annotation* Annotations::add_annotation() {
  // @@protoc_insertion_point(field_add:TuriCreate.Annotation.Specification.Annotations.annotation)
  return annotation_.Add();
}
::google::protobuf::RepeatedPtrField< ::TuriCreate::Annotation::Specification::Annotation >*
Annotations::mutable_annotation() {
  // @@protoc_insertion_point(field_mutable_list:TuriCreate.Annotation.Specification.Annotations.annotation)
  return &annotation_;
}
const ::google::protobuf::RepeatedPtrField< ::TuriCreate::Annotation::Specification::Annotation >&
Annotations::annotation() const {
  // @@protoc_insertion_point(field_list:TuriCreate.Annotation.Specification.Annotations.annotation)
  return annotation_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Specification
}  // namespace Annotation
}  // namespace TuriCreate

// @@protoc_insertion_point(global_scope)
