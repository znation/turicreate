# vim: set ft=dockerfile:

# This image is intended for building Turi Create for maximum compatibility
# with various Linux distributions.
# Based on Ubuntu 10.04 for compatibility with older glibc versions.
# Builds llvm 3.4.2 with clang and libc++,
# using libstdc++ ABI 4.8.1 for ABI compatibility with older libstdc++ versions.

FROM ubuntu:10.04

# Prevent apt-get from asking questions and expecting answers
ENV DEBIAN_FRONTEND noninteractive

# Set env variables for tools to pick up
ENV CC="gcc"
ENV CXX="g++"
ENV PATH="/usr/local/bin:${PATH}"
ENV CCACHE_DIR=/build/.docker_ccache
ENV CCACHE_COMPILERCHECK=content

# Fix path to new location for older Ubuntu releases
RUN sed -i -e 's/archive\./old-releases\./g' /etc/apt/sources.list

# Update package database
RUN apt-get update

# Install add-apt-repository and set up PPA for git
RUN apt-get -y install python-software-properties
RUN add-apt-repository ppa:ubuntu-toolchain-r/test
RUN add-apt-repository ppa:git-core/ppa
RUN add-apt-repository ppa:h-rayflood/llvm
RUN apt-get update

# Install dependencies
RUN apt-get -y install vim-common gcc-4.8 g++-4.8 libgif-dev libx11-dev ccache make zlib1g-dev libsqlite3-dev tk-dev libgdbm-dev libc6-dev libbz2-dev perl-modules patch rsync git xz-utils file libc6-dev-i386 zip pkg-config wget clang-3.2 llvm-3.2
RUN rm /usr/bin/gcc
RUN ln -s /usr/bin/gcc-4.8 /usr/bin/gcc
RUN ln -s /usr/bin/g++-4.8 /usr/bin/g++
RUN ln -s /usr/bin/clang-3.2 /usr/bin/clang
RUN ln -s /usr/bin/clang++-3.2 /usr/bin/clang++

# Install OpenSSL and curl from source
# The built-in SSL is so old it can't talk to anything on the internet anymore
# (so even get-pip.py doesn't work!)
ADD https://www.openssl.org/source/openssl-1.1.0j.tar.gz /src/openssl-1.1.0j.tar.gz
WORKDIR /src
RUN tar xf openssl-1.1.0j.tar.gz
WORKDIR /src/openssl-1.1.0j
RUN ./config --shared
RUN make -j24 --quiet
RUN make --quiet install
RUN ldconfig

ADD https://curl.haxx.se/download/curl-7.64.1.tar.xz /src/curl-7.64.1.tar.xz
WORKDIR /src
RUN tar xf curl-7.64.1.tar.xz
WORKDIR /src/curl-7.64.1
RUN ./configure --with-ssl --prefix=/usr/local 
RUN make -j24 --quiet
RUN make --quiet install
RUN ldconfig

# Install cmake from binary release
WORKDIR /opt
RUN curl -O https://cmake.org/files/v3.13/cmake-3.13.4-Linux-x86_64.tar.gz
RUN tar xf cmake-3.13.4-Linux-x86_64.tar.gz
ENV PATH="/opt/cmake-3.13.4-Linux-x86_64/bin:${PATH}"

# Install Python 2.7 from source
WORKDIR /src
RUN curl -O https://www.python.org/ftp/python/2.7.15/Python-2.7.15.tgz
RUN tar xf Python-2.7.15.tgz
WORKDIR /src/Python-2.7.15
RUN ./configure --prefix=/usr/local --enable-unicode=ucs4 --enable-shared --enable-loadable-sqlite-extensions
RUN make -j24 --quiet
RUN make --quiet install
RUN ldconfig

# Install Python 3.5 from source
WORKDIR /src
RUN curl -O https://www.python.org/ftp/python/3.5.6/Python-3.5.6.tgz
RUN tar xf Python-3.5.6.tgz
WORKDIR /src/Python-3.5.6
RUN ./configure --prefix=/usr/local --enable-unicode=ucs4 --enable-shared --enable-loadable-sqlite-extensions
RUN make -j24 --quiet
RUN make --quiet install
RUN ldconfig

# Install Python 3.6 from source
WORKDIR /src
RUN curl -O https://www.python.org/ftp/python/3.6.8/Python-3.6.8.tgz
RUN tar xf Python-3.6.8.tgz
WORKDIR /src/Python-3.6.8
RUN ./configure --prefix=/usr/local --enable-unicode=ucs4 --enable-shared --enable-loadable-sqlite-extensions
RUN make -j24 --quiet
RUN make --quiet install
RUN ldconfig

# Install pip and virtualenv
WORKDIR /src
RUN curl -O https://bootstrap.pypa.io/get-pip.py
RUN python2.7 get-pip.py
RUN pip2.7 install virtualenv
RUN python3.5 get-pip.py
RUN pip3.5 install virtualenv
RUN python3.6 get-pip.py
RUN pip3.6 install virtualenv

# Install llvm 3.4.2 from source with clang and libc++ (no libc++abi)
WORKDIR /src
RUN curl -O https://releases.llvm.org/3.4.2/llvm-3.4.2.src.tar.gz
RUN curl -O https://releases.llvm.org/3.4.2/cfe-3.4.2.src.tar.gz
RUN curl -O https://releases.llvm.org/3.4.2/libcxx-3.4.2.src.tar.gz
RUN tar xf llvm-3.4.2.src.tar.gz
RUN tar xf cfe-3.4.2.src.tar.gz
RUN tar xf libcxx-3.4.2.src.tar.gz
RUN mv cfe-3.4.2.src llvm-3.4.2.src/tools/clang
RUN mv libcxx-3.4.2.src llvm-3.4.2.src/projects/libcxx
RUN mkdir llvm-3.4.2.build
WORKDIR /src/llvm-3.4.2.build
RUN cmake ../llvm-3.4.2.src/ -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr/local -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ -DLLVM_TEMPORARILY_ALLOW_OLD_TOOLCHAIN=ON
RUN make -j24 || make -j4
RUN make --quiet install

# Start at repo root (mounted into Docker)
WORKDIR /build

# Set ccache size to 4GB
CMD mkdir -p $CCACHE_DIR
CMD ccache -s
CMD ccache -M 4G

# Make clang the default compiler
ENV CC="/usr/local/bin/clang"
ENV CXX="/usr/local/bin/clang++"
